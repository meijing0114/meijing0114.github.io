<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meijing0114的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meijing0114.com/"/>
  <updated>2016-12-19T15:39:27.000Z</updated>
  <id>http://meijing0114.com/</id>
  
  <author>
    <name>meijing0114</name>
    <email>525937005@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx模块之echo</title>
    <link href="http://meijing0114.com/2016/12/19/nginx001/"/>
    <id>http://meijing0114.com/2016/12/19/nginx001/</id>
    <published>2016-12-19T15:17:40.000Z</published>
    <updated>2016-12-19T15:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择nginx"><a href="#选择nginx" class="headerlink" title="选择nginx"></a>选择nginx</h2><p>Nginx性能为王：</p>
<ul>
<li>支持epoll，大规模高并发</li>
<li>支持Linux的sendfile系统调用，可以高效地把硬盘中数据发送到网络上。</li>
</ul>
<p>选择Nginx的原因：</p>
<ul>
<li>更快：要理解它怎么做到更快的</li>
<li>高扩展性：不同模块，大量的第三方模块，并且模块之间具有很好的隔离性；</li>
<li>高可靠性：来自于核心框架代码的优秀设计、模块设计的简单性。master-worker模式很稳定；</li>
<li>低内存消耗：10000个非活跃的http keep-alive连接至消耗2.5MB内存！精细的数据结构控制，c语言精华的体现；</li>
<li>单机支持10万以上的并发连接：上限只取决于内存</li>
<li>热部署，从没见过这么顺滑的reload</li>
<li>BSD许可协议的自由性</li>
</ul>
<h2 id="echo模块-debug利器"><a href="#echo模块-debug利器" class="headerlink" title="echo模块 - debug利器"></a>echo模块 - debug利器</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>github开源，openresty作者推荐<br><a href="https://github.com/openresty/echo-nginx-module" target="_blank" rel="external">https://github.com/openresty/echo-nginx-module</a></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="Location测试："><a href="#Location测试：" class="headerlink" title="Location测试："></a>Location测试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /test &#123;</div><div class="line">        echo &quot;test here&quot;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/test&quot;</code></p>
<h4 id="计算后端请求时间："><a href="#计算后端请求时间：" class="headerlink" title="计算后端请求时间："></a>计算后端请求时间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location /timed_hello &#123;</div><div class="line">     # 计时器重置</div><div class="line">     echo_reset_timer;</div><div class="line">     echo hello world;</div><div class="line">     # 休眠2.5s</div><div class="line">     echo_sleep   2.5;</div><div class="line">     # 打印最终耗时</div><div class="line">     echo &quot;&apos;hello world&apos; takes about $echo_timer_elapsed sec.&quot;;</div><div class="line">     echo_reset_timer;</div><div class="line">     echo hiya igor;</div><div class="line">     echo_sleep 1;</div><div class="line">     echo &quot;&apos;hiya igor&apos; takes about $echo_timer_elapsed sec.&quot;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/timed_hello&quot;</code></p>
<h4 id="请求代理："><a href="#请求代理：" class="headerlink" title="请求代理："></a>请求代理：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location /echo_proxy &#123;</div><div class="line">       # 修改向下游请求的body</div><div class="line">       echo_before_body hello;</div><div class="line">       echo_before_body world;</div><div class="line">       # 进行proxy pass的请求</div><div class="line">       proxy_pass $scheme://10.247.165.120:10090/monitor/monitor.html;</div><div class="line">       # 修改返回到client端的body</div><div class="line">       echo_after_body hiya;</div><div class="line">       echo_after_body igor;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/echo_proxy&quot;</code></p>
<h4 id="发起子请求："><a href="#发起子请求：" class="headerlink" title="发起子请求："></a>发起子请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># 子请求1，充分利用epoll的优势</div><div class="line">location /main1 &#123;</div><div class="line">    echo_reset_timer;</div><div class="line">    echo &quot;start takes about $echo_timer_elapsed sec.&quot;;</div><div class="line"></div><div class="line">    # subrequests in parallel，并发子请求</div><div class="line">    echo_location_async /sub1;</div><div class="line">    echo_location_async /sub2;</div><div class="line">    # 打印结果为0s 请求耗时为2s</div><div class="line">    echo &quot;took $echo_timer_elapsed sec for total.&quot;;</div><div class="line">&#125;</div><div class="line"># 子请求2，并未发挥子请求优势</div><div class="line">location /main2 &#123;</div><div class="line">    echo_reset_timer;</div><div class="line">    echo &quot;start takes about $echo_timer_elapsed sec.&quot;;</div><div class="line"></div><div class="line">    # 同步的进行请求</div><div class="line">    echo_location /sub1;</div><div class="line">    echo_location /sub2;</div><div class="line">    # 打印结果为3s 最终耗时3s</div><div class="line">    echo &quot;took $echo_timer_elapsed sec for total.&quot;;</div><div class="line">&#125;</div><div class="line"># 子请求1</div><div class="line">location /sub1 &#123;</div><div class="line">    echo_sleep 2;</div><div class="line">    echo hello;</div><div class="line">&#125;</div><div class="line"># 子请求2</div><div class="line">location /sub2 &#123;</div><div class="line">    echo_sleep 1;</div><div class="line">    echo world;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/main1&quot;
curl &quot;http://testecho.qidian.com/main2&quot;</code></p>
<h4 id="同时发起多个子请求："><a href="#同时发起多个子请求：" class="headerlink" title="同时发起多个子请求："></a>同时发起多个子请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location /multi &#123;</div><div class="line">    # 指定请求方式 参数等</div><div class="line">    echo_subrequest_async POST &apos;/tools&apos; -q &apos;foo=Foo&apos; -b &apos;hi&apos;;</div><div class="line">    echo_subrequest_async PUT &apos;/tools&apos; -q &apos;bar=Bar&apos; -b &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line">location /tools &#123;</div><div class="line">    # 支持打印打印多个nginx的内建变量</div><div class="line">    echo &quot;querystring: $query_string&quot;;</div><div class="line">    echo &quot;method: $echo_request_method&quot;;</div><div class="line">    echo &quot;body: $echo_request_body&quot;;</div><div class="line">    echo &quot;content length: $http_content_length&quot;;</div><div class="line">    echo &apos;///&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/multi&quot;</code></p>
<h4 id="静态资源合并："><a href="#静态资源合并：" class="headerlink" title="静态资源合并："></a>静态资源合并：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 不多说，和combo扩展非常的类似</div><div class="line">location /merge &#123;</div><div class="line">       default_type &apos;text/javascript&apos;;</div><div class="line">       echo_foreach_split &apos;&amp;&apos; $query_string;</div><div class="line">           echo &quot;/* JS File $echo_it */&quot;;</div><div class="line">           echo_location_async $echo_it;</div><div class="line">           echo;</div><div class="line">       echo_end;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/merge?/foo.js&amp;/test.js&quot;</code></p>
<h4 id="if-由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的"><a href="#if-由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的" class="headerlink" title="if: 由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的"></a>if: 由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ^~ /if &#123;</div><div class="line">     set $res miss;</div><div class="line">     if ($arg_val ~* &apos;^a&apos;) &#123;</div><div class="line">         set $res hit;</div><div class="line">         echo $res;</div><div class="line">     &#125;</div><div class="line">     echo $res;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/if?val=abc&quot;</code><br><code>curl &quot;http://testecho.qidian.com/if?val=ddd&quot;</code></p>
<h3 id="其中涉及的一些nginx模块的开发概念"><a href="#其中涉及的一些nginx模块的开发概念" class="headerlink" title="其中涉及的一些nginx模块的开发概念"></a>其中涉及的一些nginx模块的开发概念</h3><h4 id="subrequest与upstream"><a href="#subrequest与upstream" class="headerlink" title="subrequest与upstream"></a>subrequest与upstream</h4><p>upstream：<br>提供了一种访问后端服务的能力。更加基础，同时充分利用了nginx优秀设计中的epoll模型，从而做到了异步和无阻塞. 通信方式不限，通信协议不限。常见的就是udp和tcp，同时再配合二进制的一些高校打包协议，这时候你就可以让nginx和后端服务无缝的衔接在一起了。</p>
<p>subrequest： 子请求<br>针对的是第三方的服务，举个例子，你的网站导航服务依赖于第三方服务比如新浪天气的返回结果，那么可以使用子请求的方式。<br>但是第三方的服务协议局限于http，同时它的底层也是由upstream实现的。但是相比之下概念和出发点有所不同。</p>
<h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>几个名词：IO多路复用、高性能网络模型、同步异步、阻塞非阻塞、协程与并发。<br>推荐篇文章：<a href="http://blog.csdn.net/tianmohust/article/details/6677985" target="_blank" rel="external">http://blog.csdn.net/tianmohust/article/details/6677985</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选择nginx&quot;&gt;&lt;a href=&quot;#选择nginx&quot; class=&quot;headerlink&quot; title=&quot;选择nginx&quot;&gt;&lt;/a&gt;选择nginx&lt;/h2&gt;&lt;p&gt;Nginx性能为王：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持epoll，大规模高并发&lt;/li&gt;
&lt;li&gt;支持
    
    </summary>
    
      <category term="接入层" scheme="http://meijing0114.com/categories/%E6%8E%A5%E5%85%A5%E5%B1%82/"/>
    
    
  </entry>
  
  <entry>
    <title>读《成为乔布斯》</title>
    <link href="http://meijing0114.com/2016/11/26/book013/"/>
    <id>http://meijing0114.com/2016/11/26/book013/</id>
    <published>2016-11-26T04:01:36.000Z</published>
    <updated>2016-11-26T04:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>《乔布斯传》的热潮似乎在慢慢的过去，人们已经逐渐淡忘了那位乔帮主，只是在每年苹果推出新产品的时候，会对tim cook 有一种矛盾的心情，既期待又担心他无法达到乔帮主的水准，愁煞了一帮果粉。</p>
<p>我是在12年才开始接触苹果的产品，对乔布斯的了解同样也是差不多时间，如今五年左右过去，回过头看看这本《成为乔布斯》，能够得到很多不同的体悟。</p>
<p>这本书作者的背景是曾任财富、华尔街日报的记者，他是能够得到乔布斯信任的不多的记者之一。要知道在很长一段时间里，乔帮主与媒体的关系并不好，这也是造成他“孤傲天才”固定形象的重要原因。</p>
<p>下面来看媒体对他的固有描述：</p>
<blockquote>
<p>史蒂夫是一位天才，在设计方面天赋过人，讲故事的能力超凡脱俗，可以产生“扭曲现实”的魔力；他就是个自以为是的混蛋，一味地追求完美，完全不顾他人的感受；他觉得自己比任何人都聪明，从来听不进任何建议，而且从出生伊始，就是天才与混蛋的结合体。</p>
</blockquote>
<p>但妖魔化的描述从来不能代表一个人的真实与多面性。本书的核心在于凸显乔布斯不服输的精神 永不满足的追求 不断学习的渴望。他绝非孤独的天才，职业生涯刚起步的乔布斯羽翼未丰、鲁莽冲动、傲慢无礼，但带领苹果扭转乾坤、重登巅峰的乔布斯却成熟稳重、思虑周全。而这种质的转变不是一蹴而就的，从1085-1997的12年时间，他都在蛰伏和不断打磨自己，理解他的成长尤为可贵。</p>
<p>要理解他的这种转变，就不能不看看他人生的各个阶段：</p>
<p>1955 出生<br>1969 结识史蒂夫沃兹尼亚克<br>1976 苹果成立<br>1979 AppleII：软驱和visiCalc<br>1980 苹果上市<br>1984 麦金塔电脑<br>1995 四年制作的玩具总动员 皮克斯上市<br>1997 重回苹果，苹果收购NeXT（OS 操作系统）<br>2000 ipod<br>2002 cancer<br>2005 迪斯尼收购皮克斯<br>2007 iphone<br>2010 ipad<br>2011 去世</p>
<h2 id="少年得志与重大挫折-1976-1985"><a href="#少年得志与重大挫折-1976-1985" class="headerlink" title="少年得志与重大挫折 1976-1985"></a>少年得志与重大挫折 1976-1985</h2><p>认识史蒂夫沃兹尼亚克给乔布斯的人生带来了第一个小高潮，凭借着他在市场营销和表达能力上的满点技能和沃兹尼亚克几乎无解的技术能力，一个个创意的小产品出现。从最早的“blue box”，到完整强大的电路板，直到appleI的出现。完全是工程师的匠心独运和市场产品人员的敏锐嗅觉的结合。</p>
<p>苹果公司正是在这种场景下应运而生。但是乔布斯却没有运营公司的经验，从租办公楼、厂房、设备，设计可靠的生产流程，组建销售团队，引入质量控制，监管工程设计，建立管理信息系统，指定财务和人事负责人，着手与主要供应商和软件开发商建立联系。这都不是他擅长的。</p>
<p>按照他自己在这个阶段的说法，他擅长创新，擅长改变世界。但却还没有达到能够捕捉业界趋势的境界。尽管他和比尔盖茨都到施乐查看了惊为天人的图形化界面和鼠标，但是如何应用仍是四处碰壁。所以这个阶段的产品，从AppleIII，到面对企业市场却费尽心思实现图形界面的Lisa，再到雷声大雨点小的麦金塔，都未能在个人电脑市场掀起波澜。而是一枝独秀的AppleII，坚挺了很长的时间。</p>
<p>ps：经典的1984广告：<a href="http://v.youku.com/v_show/id_XMTY1MzU5OTY4.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMTY1MzU5OTY4.html</a></p>
<p>这些经历表明，这个阶段的乔布斯根本不知道如何管理一家大的公司，他沉迷于小细节，逼疯工程师，用完美主义为自己的错误决策打掩护，这对苹果对团队，都是非常大的伤害。所以，不可避免的，他与董事会的冲突让他不得不黯然辞职。而逼他辞职的，就是他亲手请来的，曾经是”卖糖水”的前百事ceo john Sculley.</p>
<h2 id="十年磨一剑-1985-1997"><a href="#十年磨一剑-1985-1997" class="headerlink" title="十年磨一剑 1985-1997"></a>十年磨一剑 1985-1997</h2><p>这十二年的时间，是乔布斯转变、蛰伏、成长的时间。绝非是一帆风顺，而是仍充满着各种挫折和挑战，甚至财务危机。</p>
<p>他在NeXT苦心经营，定位便宜的工作站，面向被他称为“隐形五百强”的大学研究市场，却从未取得突破性的进展。苦心推出的第一代工作站，不但被竞争公司sun嗤之以鼻，而且甚至被比尔盖茨称为马桶一样的产品，并不愿为它开发软件。<br>由此打造一家伟大的企业成为空谈， 宏大的产品发布会成了一场看似成功却失败的秀，六年后的NeXT团队已经失去了原有的元老们。媒体开始将他与过气的失败者联系在一起。脾气暴躁，缺乏耐心，伤仲永成为了他新的标签。</p>
<p>此时时代已变，机器不重要，软件才重要，比尔盖茨最先意识到了这一点，所以他独霸九十年代。但是在Next他逐渐学会了对产品的更为理性的判断，更重要的是，在NeXT，他打造了OS X的雏形，这为他苹果的回归奠定了基础。</p>
<p>而皮克斯则是无心插柳柳成荫，遇见最佳创意管理者卡特穆尔和最佳动画师拉塞特是他最大的幸运，或者说是一种注定的相互成全。ps. 推荐卡特穆尔的《创意公司》。被离婚缠身的卢卡斯将皮克斯抛售给他，而他本想将皮克斯的3D技术用作商业化，但拉塞特的小台灯改变了一切，在图像专业大会上，人们排队六个小时，只为看几分钟的小台灯和《锡铁小人》。这甚至为他赢得了好斯卡。《玩具总动员》一鸣惊人，与迪斯尼的合作成功，皮克斯也成功上市，至少，这让他的财务又自由了。他也懂得了如何与最杰出的人进行合作，而不是总觉得自己是世上最特别的哪一个。</p>
<p>这个阶段他的转变可以概括为：</p>
<ul>
<li>从认为自己可以取代任何一个人，胜任任何一份工作到分工的理解</li>
<li>从不分轻重缓急，盲目追求视觉效果到理解人们的基本诉求</li>
<li>从追求完美，而不在意市场，慢慢的学会适应和融合</li>
<li>而他一以贯之的非常理解工程师的情感诉求，这就是为什么很多人愿意为他工作</li>
</ul>
<h2 id="扭转乾坤-1997-2011"><a href="#扭转乾坤-1997-2011" class="headerlink" title="扭转乾坤 1997-2011"></a>扭转乾坤 1997-2011</h2><p>之后的故事，大家都知道了。靠着NeXT，他重回苹果，此时的苹果，按照一些记者的说法，已经“内部腐烂”。</p>
<p>所以他：</p>
<ul>
<li>炒掉不称职的CEO</li>
<li>快刀斩乱麻的解决与微软的纠纷，推动微软为麦金塔开发软件</li>
<li>重塑企业形象，发布广告《非同凡想》，宣布苹果的价值观： <a href="http://v.youku.com/v_show/id_XMzIyNTM3MzQ0.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMzIyNTM3MzQ0.html</a></li>
<li>关掉无用的newton掌上电脑和eMate电脑产品线</li>
<li>裁员1900</li>
<li>明确只提供四种基本产品：两种台式机 两种笔记本，分别针对个人和专业人士</li>
<li>试水iMac + powerbook + OSX</li>
<li>一步一个脚印构建消费电子时代：iMovie-&gt;iTunes-&gt;iPod(johnny ive 拇指轮盘设计)-&gt;苹果专卖店-&gt;音乐电子化-&gt;safari-&gt;iphone(多点触控+触摸屏)-&gt;ipad-&gt;mac系列</li>
</ul>
<p>从下面几张图可以慢慢看到苹果的变化和不断推陈出新，走在创新边缘的步骤</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-6a1815bc36af2e09.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ceNcZImdmrU8.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-9c8abfe451219214.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="220px-WallstreetII.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-44c7c00468efcc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ipod-5th-gen.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-a103d93c6bf7478b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ios_6_app_store_steve_jobs_iphone_2007.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-96108f9d0c0ab2f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bbd878e2bcae7ec8421e812276e6b57b.png"></p>
<p>如此高产，如此多的创意，一步一个脚印。从破产的泥潭，到世界上市值最高的科技公司，乔帮主可谓殚精竭虑，他并非外界所想的那般冷酷无情，他不是那么好相处，确实是，但他对整个消费电子时代的推动，对推出创新产品的初心丝毫未变。在此想起乔布斯在<a href="http://open.163.com/special/opencourse/jobs.html" target="_blank" rel="external">斯坦福演讲</a>中对The Whole Earch Catalog的引用: Stay hungry stay foolish，与君共勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《乔布斯传》的热潮似乎在慢慢的过去，人们已经逐渐淡忘了那位乔帮主，只是在每年苹果推出新产品的时候，会对tim cook 有一种矛盾的心情，既期待又担心他无法达到乔帮主的水准，愁煞了一帮果粉。&lt;/p&gt;
&lt;p&gt;我是在12年才开始接触苹果的产品，对乔布斯的了解同样也是差不多时间，
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="读书" scheme="http://meijing0114.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>山水游重庆</title>
    <link href="http://meijing0114.com/2016/10/06/travel001/"/>
    <id>http://meijing0114.com/2016/10/06/travel001/</id>
    <published>2016-10-06T04:28:34.000Z</published>
    <updated>2016-10-06T04:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="山城的路"><a href="#山城的路" class="headerlink" title="山城的路"></a>山城的路</h2><p>去重庆之前，听到最多的一句就是不要在重庆使用高德导航，因为这个城市的路从不以常理出牌。咋听下来不以为然，但是因为要租车，所以还是有一些忐忑。第一天刚到酒店，便忙不迭的出门探路，顺便去人气火锅店打个尖。从导航来看，不过一公里直线距离，哪知道刚出门就直呼上当。这一公里是结结实实的跌宕起伏:出门先是一个大环路，然后就是五百米的爬坡，这还不算完，又经过了三百米的六十度登山运动，这才差不多到了终点。待气喘吁吁的登了上去，竟然已经可以俯瞰住处，不禁称奇。</p>
<p>有了这么一出，却也还没免去第二天取车时的尴尬。大马路进入大名鼎鼎的洪崖洞，抬头一看，竟是十层。离着负一层的停车场差了一个人山人海的电梯。九牛二虎之力之后，终于到达负一层，一抬头竟又是大马路，令人啧啧称奇。所以呢，这座城市永远能给你惊喜，因为楼下有楼，路下有路。更妙的是，楼中有车，轻轨可以穿楼而过。楼中有路，长达二百米的大电梯让你扶层而上，甚至还要你留下两块的买路钱:)</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8ig5hdz6mj20zk0zkwle.jpg" alt=""></p>
<p>不过不得不说的一点是，在通行方面，城市的设计者确实也随性了些。对我一个健康人而言，很多地方的通行已经是一种障碍了。洪崖洞从十层到一层，踩了十几只脚，挤了七八趟电梯，十分不便。山城的魅力虽然是在此，但也确实应当更加对出行的便利性加以考虑。</p>
<p>山城两字，其实也不足以囊括重庆的精髓，因为地处嘉陵江和长江的两江交汇之处，重庆的水路也是十分的发达。朝天门码头赫赫有名，曾经在历史上承担着无比重要的地位。作为长江黄金水段的源头，碧绿的嘉陵江与浊黄的长江水在此交汇。顺水而下，遍览三峡。</p>
<p>当然了，山城的交通是立体的，除去水路和陆路，更有别具一格的空路 – 长江索道。在《周渔的火车》《疯狂的石头中》，长江索道亮点十足，最喜得就是在雾蒙蒙的江面上，独坐索道，看雾中有山，雾中有水，心里却思考着远方的感觉。让人能够不由自主的从繁复的生活中抽出，思考着人生的意义。不过在旅游旺季，就没有这么好的待遇了，长达两小时的排队和骤至的暴雨都让人等待的心焦。拥挤的人群和登索道时的忙乱更是有些措手不及，说话间，五分钟的索道就到了终点。不免有些意犹未尽，不过留下点遗憾也好，至少下次来时，还有些心中未完成的事。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5gsa1uj20zk0zkdj8.jpg" alt=""></p>
<p>路在脚下，除了用脚去丈量，开车也是一种不错的方式。自驾在重庆，是一种特别的体验。第一个体验就是眼见，重庆的人民感觉特别的随性，不止一次在内环高速或是跨县高速上看到有行人徒步，啧啧称奇。第二个体验就是脚踏，在山城开车，要求很高。尤其是高峰时段，开车排队在上山路上时，为了谨防溜车，脚始终要在刹车和油门之间进行无缝的切换。开了一会儿就要活动那么一下，就怕自己车还没上去，脚已经抽筋了。第三个体验就是路险，s弯、临水临山路、发夹弯、连续下坡都是家常便饭，尤其是当你拐弯拐到自己的右后上方的时候，不禁要感叹，以前古代人民真不容易。</p>
<h2 id="山城的吃"><a href="#山城的吃" class="headerlink" title="山城的吃"></a>山城的吃</h2><p>每个来山城的人，都怀揣着一颗蠢蠢欲动的吃货心。不过往往发生最多的情况就是，这颗吃货心会迅速的在火锅的刺激下达到顶点，然后在肠胃和口腔的双重作用下，回归成“不吃辣椒我也可以活的很好”的认怂心态。对我来说，对重庆辣度的挑战，在第一天还没开始，就已经结束了。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f8ig5ih34lj20zk0zk7al.jpg" alt=""></p>
<p>重庆菜能够放上台面来讲的，无非几样。民间的以小面、酸辣粉为首，讲究走入民间，越是平民化，越是环境一般性，越是巷子深，越是来的人络绎不绝。著名的胖妹小面，虽然不知是不是重庆小面二十强，称得上是这么的一个范例。尽管非常可惜的是店主十一休假去了，但是从环境来看，确实只是略好于路边摊，不过味道据吃过的人说，相当的“巴适”。</p>
<p>用小面解决了早饭，中饭最好来一桌江湖菜。重庆的所谓江湖菜，我的理解，讲究一种取材。因地制宜，食材很关键。因为重庆靠山又临水，所以食材可以说十分丰富。南山上的泉水鸡，一鸡三吃，道道入味，尤其是主菜椒麻鸡，肉质细嫩，入味三分。另一个比较耳熟能详的江湖菜就是毛血旺，各种食材汇聚，鲜香一锅，令人垂涎不已。就是这么些不上大桌的菜，吃的很有味道，吃完酣畅淋漓，十分痛快！</p>
<p>时间转到黄昏，整个城市起雾了，雾蒙蒙的江岸边，仔细那么一闻，还真有股老火锅的味道。现在重庆火锅主要就是两个流派，一个是新式火锅，处于特别高端的cbd或是商业街区，在口味、环境方面都做了不少的改良。还有就是所谓的“老火锅”，这些火锅店往往是酒香不怕巷子深，隐藏于不同的居民区、街区。其中有在地下室的，有在山头上的，还有在山洞里面的。家家都有那么几样经典：黄喉 牛肚 鸭肠，谁也不让谁。但是家家也都有自己的汤底独家秘方，往往那饕餮的食客们，就是闻着这么股夹杂着海椒、花椒和各式香料的味道作为导航，在一桌桌麻辣鲜香中大快朵颐。</p>
<h2 id="文化自然双遗"><a href="#文化自然双遗" class="headerlink" title="文化自然双遗"></a>文化自然双遗</h2><p>一通山城的饮食三板斧之后，驱车一路向西，不出200公里，就是世界文化遗产，大足石刻。一路向东，也是200公里上下，就是世界自然遗产，武隆天坑。一文一武，既有自然界的鬼斧神工，也有宗教人文的源远流长。</p>
<p>来了大足石刻，一圈下来，可以说是应接不暇。每一座石刻都有故事，每一处设置都有出处。雕刻家与修行者兢兢业业，为的是将他们心中的佛法留存和流传，为此殚精竭力。比如著名的九龙浴太子图，出处乃是释迦摩尼的降生故事：</p>
<p>净饭王之妻摩耶夫人身怀有孕，出游兰毗尼园中，手攀树枝，太子悉达多从其右腋下降生。太子降生即能行走七步，步步生莲，并一手指天，一手指地说：天上地下，唯我独尊。时有九蛇至太子头顶，口吐香水，为太子洗浴，诸天护俱来守护。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5sxgouj21kw16otwi.jpg" alt=""></p>
<p>这样的一个雕塑，体现了匠人的匠心独运，与自然水势相结合，引用山泉之水，为太子沐浴。正所谓因地制宜，顺势而为。而由于中国人认为蛇是邪恶的，所以故事在中国进行了进一步的演化，蛇变成了神龙。这种佛教的本地化，在佛教传入中国的过程中比比皆是。这种演化，是宗教在传播过程中遇到阻碍产生的自适应。便览大足石刻，你就能看到这种变化，从单纯的佛教主题石刻，到带有中国特色孝道的佛教石刻，再到佛、道、儒三者融合的石刻，看着这些石刻，就像是层叠的历史，完整的展现在你的面前，说真的，比大片还要过瘾。</p>
<p> 大足石刻多不胜数，而且各个内涵深意，再提一个六道轮回图，这是第一次完整的看到所谓的六道轮回及其深意。其中必须要说的是左下角那个竹林猫鼠相戏图。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f8ig5jzf7zj21kw2dme81.jpg" alt=""></p>
<p>猫于竹林下，看着竹上的老鼠，想吃却吃不到，心急如焚。老鼠在竹子上瑟瑟发抖，想求生却又无处可逃。正所谓：</p>
<p>欲求不得，苦之本也<br>看完人文景观，不妨转战天坑地缝芙蓉洞。自然的鬼斧神工，在这里几乎全部集齐。既有天生三桥这样的峡谷，又有芙蓉洞这样的山体溶洞。古人云，天人合一，请看下图，确实很适合修炼:)</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5g8kqmj20zk0zktfl.jpg" alt=""></p>
<p>此地可以说在我第一次看到时，就觉得满足了我心中隐居的所有想象。深山之中，树影婆娑，一座小院，修生养性，尽管参观时人流滚滚，但站在庭院中心，一停一转，吸收天地灵气，确实又忘我之感。</p>
<p>山城来也匆匆，去也匆匆，仍有不少魅力值得探寻，但留下遗憾，即是留下再访的理由。重庆，再见！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;山城的路&quot;&gt;&lt;a href=&quot;#山城的路&quot; class=&quot;headerlink&quot; title=&quot;山城的路&quot;&gt;&lt;/a&gt;山城的路&lt;/h2&gt;&lt;p&gt;去重庆之前，听到最多的一句就是不要在重庆使用高德导航，因为这个城市的路从不以常理出牌。咋听下来不以为然，但是因为要租车，所以
    
    </summary>
    
      <category term="旅行" scheme="http://meijing0114.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>编写可读代码的艺术</title>
    <link href="http://meijing0114.com/2016/09/21/book012/"/>
    <id>http://meijing0114.com/2016/09/21/book012/</id>
    <published>2016-09-21T00:59:14.000Z</published>
    <updated>2016-10-21T01:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码应当易于理解"><a href="#代码应当易于理解" class="headerlink" title="代码应当易于理解"></a>代码应当易于理解</h2><h2 id="表面层次的改进"><a href="#表面层次的改进" class="headerlink" title="表面层次的改进"></a>表面层次的改进</h2><h3 id="把信息装到名字里"><a href="#把信息装到名字里" class="headerlink" title="把信息装到名字里"></a>把信息装到名字里</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwunkasj20l30dhwhr.jpg" alt=""></p>
<p>把信息装入名字：</p>
<ul>
<li>使用专业的词汇；</li>
<li>避免泛泛的名字</li>
<li>在适当的作用域使用适当的单词长短；</li>
<li>通过后缀的方式增加额外的信息，比如单位，比如编码的描述；</li>
<li>利用名字的格式来表达含义（通过使用下划线等区分类的变量）</li>
<li>用具体代替抽象的名字</li>
</ul>
<h4 id="使用专业的词汇"><a href="#使用专业的词汇" class="headerlink" title="使用专业的词汇"></a>使用专业的词汇</h4><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwu2j9uj20kq0c341j.jpg" alt=""><br>清晰和精确比装可爱好。</p>
<p>重灾区：get size</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def  GetPage(url)</div></pre></td></tr></table></figure>
<p>换成FetchPage或DownloadPage会好很多</p>
<p>size -&gt; height nums memoryBytes</p>
<p>stop -&gt; kill resume pause</p>
<p>find -&gt; search extract locate recover</p>
<p>send -&gt; deliver dispatch annouce distribute route</p>
<p>start -&gt; launch create begin open</p>
<p>make -&gt; create setup build generate compose add new</p>
<h4 id="避免泛泛的名字"><a href="#避免泛泛的名字" class="headerlink" title="避免泛泛的名字"></a>避免泛泛的名字</h4><p>比如retval tmp data ret<br>使用更具象的名字能够帮你清楚的定位错误。</p>
<p>tmp的用武之地只在于经典的变量交换。</p>
<p>循环迭代器索引：i j k 的大灾难，加上数组名前缀 mi ci di</p>
<h4 id="具体的名字代替抽象的名字"><a href="#具体的名字代替抽象的名字" class="headerlink" title="具体的名字代替抽象的名字"></a>具体的名字代替抽象的名字</h4><p>在给变量、函数或其他元素命名时，描述的更具体而不是更抽象。<br><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwxtmsdj20is0hx76m.jpg" alt=""><br>比如参数 –run_locally 本来是用来输出额外的调试信息</p>
<ul>
<li>新成员不知道干嘛的</li>
<li>有时候远程也需要输出调试信息</li>
<li>有时候本地性能测试，不想输出调试信息<br>其实更适合extra_logging</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/mw690/67ad48bbgw1f87vwx38fgj20jo0ay403.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f87vwwjq5lj20jk0c20v9.jpg" alt=""><br>为了更具体，需要<strong>为名字附带更多的信息</strong>。</p>
<ul>
<li>带单位的值: diff_ms max_kbsps size_mb</li>
<li>附带其他重要属性 hex_id data_urlenc html_utf8 plaintext_password</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f87vwvvukpj20lb0dg0vx.jpg" alt=""><br>那么一般<strong>名字应该有多长</strong>呢？</p>
<ul>
<li>小的作用域里可以使用短的名字，比如if for 甚至可以用单个字母</li>
<li>不用担心长名字，现在都有自动补全了</li>
<li>首字母缩写，经验原则是你还是否能理解这种缩写？比如QD就很好理解，WSD可能有点难，REC就更难了</li>
<li>普遍的没问题 str-&gt;string cnt-&gt;count eval-&gt;evaluation doc-&gt;document</li>
<li>丢掉没用的词 convert_to_string -&gt; to_string</li>
</ul>
<p>利用名字的格式来传递含义：<br>下划线 连字符和大小写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static const int kMaxOpenFiles = 100;//常量并非全大写，区分宏</div><div class="line">class LogReader &#123;// 类名驼峰</div><div class="line">  public:</div><div class="line">    void OpenFile(string local_file//变量名);</div><div class="line">  private:</div><div class="line">    int offset_;//类成员变量用下划线</div><div class="line">    DISALLOW_COPY_AND_ASSIGN(LogReader);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>总结本章：把信息塞到名字里去。</p>
<ul>
<li>使用专业的单词——例如，不用Get，而用Fetch或者Download可能会更好，这由上下文决定。</li>
<li>避免空泛的名字，像tmp和retval，除非使用它们有特殊的理由。</li>
<li>使用具体的名字来更细致地描述事物——Server Can Start()这个名字就比CanListenOnPort更不清楚。</li>
<li>给变量名带上重要的细节——例如，在值为毫秒的变量后面加上ms，或者在还需要转义的，未处理的变量前面加上raw_。</li>
<li>为作用域大的名字采用更长的名字——不要用让人费解的一个或两个字母的名字来命名在几屏之间都可见的变量。对于只存在于几行之间的变量用短一点的名字更好。<br>有目的地使用大小写、下划线等 — 例如，你可以在类成员和局部变量后面加上”_”来区分它们。</li>
</ul>
<h3 id="不会误解的名字"><a href="#不会误解的名字" class="headerlink" title="不会误解的名字"></a>不会误解的名字</h3><p>关键原则：多问自己几遍，这个名字会被别人误解成其他的含义么？<br><img src="http://ww4.sinaimg.cn/mw690/67ad48bbgw1f8a7c2q9s7j20ld0e3ad1.jpg" alt=""></p>
<p>例子：</p>
<ul>
<li>filter：需要明确是挑出来，还是过滤掉</li>
<li>clip(text,length)：减掉length，还是剪出来length -&gt; truncate更好</li>
<li>length-&gt;max_length-&gt;max_chars</li>
<li>差一问题：max<em> min</em> 进行明确，不要使用limit</li>
<li>first last表明范围，不要用start stop</li>
</ul>
<p>一些基本的实践：</p>
<ul>
<li>给bool命名,增加is has can should 这样的词</li>
<li>与使用者的期望匹配：举出了STL里面有一个size的函数调用，其实O(N2)的操作</li>
</ul>
<h3 id="审美"><a href="#审美" class="headerlink" title="审美"></a>审美</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7c23twpj20mf0fggoo.jpg" alt=""><br>好的审美真的很重要。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8a7c14eqkj20lo0dpwhq.jpg" alt=""><br>三条原则：</p>
<ul>
<li>使用一致的布局，让读者很快习惯这种风格；</li>
<li>让相似的代码看起来相似；<ul>
<li>并不一定局限于固定换行</li>
<li>但要保持一种固定的顺序</li>
</ul>
</li>
<li>把相关代码分组，形成代码块<ul>
<li>按照逻辑分组分段，会更为清晰</li>
</ul>
</li>
</ul>
<p>让代码好看，有的时候也会涉及到一些对代码本身的改进，比如对方法的抽象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Logger &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Logger</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人风格的一致性，一致的风格，比正确的风格更为重要。</p>
<h3 id="该写什么样的注释"><a href="#该写什么样的注释" class="headerlink" title="该写什么样的注释"></a>该写什么样的注释</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7c0i74zj20lo0fw76u.jpg" alt=""></p>
<p>关键思想：注释的目的是尽量帮助读者了解的和作者一样多</p>
<h4 id="什么不需要注释"><a href="#什么不需要注释" class="headerlink" title="什么不需要注释"></a>什么不需要注释</h4><p>那些很明显的逻辑(能够被快速推断出来的逻辑)，或者是因为命名不准确做的多余注释，为了注释而注释。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7bzou36j20k40humzr.jpg" alt=""></p>
<p>明显的逻辑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// The class definition for Account</div><div class="line">class Account &#123;</div><div class="line">    public:</div><div class="line">    // Contructor</div><div class="line">    Account();</div><div class="line">    // set the profit member to a new value</div><div class="line">    void SetProfit (double profit);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不好的名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Realease the handle for this key, does not modify actual registry</div><div class="line">void DeleteRegistry(RegistryKey * key);</div></pre></td></tr></table></figure>
<h4 id="记录你的思想"><a href="#记录你的思想" class="headerlink" title="记录你的思想"></a>记录你的思想</h4><p>加入导演评论：上帝视角</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// 使用二叉树比哈希表处理这些数据快很多</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// 这个类太乱了，谁写的，应该建立一个子类来处理它</div></pre></td></tr></table></figure>
<p>加入特定的标记</p>
<table>
<thead>
<tr>
<th style="text-align:right">标记</th>
<th style="text-align:right">通常的事情</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">todo</td>
<td style="text-align:right">未处理</td>
</tr>
<tr>
<td style="text-align:right">FIXME</td>
<td style="text-align:right">已知的无法运行的代码</td>
</tr>
<tr>
<td style="text-align:right">HACK</td>
<td style="text-align:right">为解决问题做的粗糙方案</td>
</tr>
<tr>
<td style="text-align:right">XXX</td>
<td style="text-align:right">危险！这里有重要问题</td>
</tr>
</tbody>
</table>
<p>给常量加注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const CHAPTER_MAX = 500 // 后台能接受的最大为500，超过会有超时</div></pre></td></tr></table></figure>
<h4 id="站在读者的角度"><a href="#站在读者的角度" class="headerlink" title="站在读者的角度"></a>站在读者的角度</h4><p>公布可能的陷阱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void SendEmail(string to, string subject ,string body);</div></pre></td></tr></table></figure>
<p>这个调用有可能会花费整整一秒的时间，标注可能的超时时间。</p>
<p>一些全局观:</p>
<ul>
<li>类之间如何交互</li>
<li>数据如何在整个系统中流动</li>
<li>入口点在哪里</li>
</ul>
<h4 id="注释会打断你的思绪么"><a href="#注释会打断你的思绪么" class="headerlink" title="注释会打断你的思绪么"></a>注释会打断你的思绪么</h4><p>其实很多时候会帮助你整理思绪。<br>把要实现的逻辑拆成几个不同的步骤，然后逐一时间，定义接口。</p>
<h3 id="写出言简意赅的注释"><a href="#写出言简意赅的注释" class="headerlink" title="写出言简意赅的注释"></a>写出言简意赅的注释</h3><p>图1</p>
<p>写出注释的关键一点在于：注释应该有很高的信息/空间率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码应当易于理解&quot;&gt;&lt;a href=&quot;#代码应当易于理解&quot; class=&quot;headerlink&quot; title=&quot;代码应当易于理解&quot;&gt;&lt;/a&gt;代码应当易于理解&lt;/h2&gt;&lt;h2 id=&quot;表面层次的改进&quot;&gt;&lt;a href=&quot;#表面层次的改进&quot; class=&quot;header
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>读阳明先生心学有感</title>
    <link href="http://meijing0114.com/2016/09/01/book011/"/>
    <id>http://meijing0114.com/2016/09/01/book011/</id>
    <published>2016-09-01T00:58:30.000Z</published>
    <updated>2016-09-17T08:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结缘，之前的感受"><a href="#结缘，之前的感受" class="headerlink" title="结缘，之前的感受"></a>结缘，之前的感受</h2><p>早先在看《明朝那些事》的时候，心里就一直对王阳明有了这么一个印象。书中的具体描述已然淡去，但作者对王阳明的心学的推崇，以及其弟子遍地开花，执掌明朝内阁大权的事实却是浓墨重彩的。当时对心学的唯一印象就是“知行合一”。尽管简单，但是让我很有好感。以致于很长的一段时间里，我并不以为它是儒学的一个分支，而是认为它是更入市，或者说更接地气的一种为人处世的方式。</p>
<p>直到近日，心中烦恼颇多。烦恼并非来自于现实中的不顺利，反而是来自于生活中的倦怠与惯性，让我感到心力俱疲。在这种情况下，不自觉的想要去寻求一种答案，再加上之前对心学的这么一个良好的印象。所以才有了对这本《王阳明-最神奇的心学》的细读。</p>
<p>不过说实话，刚开始读的时候有些患得患失。一方面担心这又是一本古文翻译而来的鸡汤（事实上书中不少篇幅确实如此），另一方面，接触了西方的那套自由思想体系之后，怕形成价值观上的冲突。不过读起来之后，倒是领悟了书中的一点：寻求本心而破除纷扰，你领悟的只是本心的，和你本来拥有的也并不冲突。这本二手书的优点在于，作者的诗词底子很好，很多心学的思想，他通过一些诗词的方式表示出来，非常能够加深你的理解。</p>
<p>太阳底下没有新鲜事，春秋战国时代百家争鸣，看后来人所议论之事，无一不能从百家经典中找到验证，不禁让人神往那个思想碰撞的年代。王阳明之言，在我看来很多是一种回归，去掉宋代朱熹那种格物的思想，提出了知行合一的观点，更关注了人性本身。</p>
<h2 id="阳明此人"><a href="#阳明此人" class="headerlink" title="阳明此人"></a>阳明此人</h2><p>王阳明一身跌宕起伏，有过少年天才得志，也有过官场为奸臣所害，更有的是龙场悟道与评定宁王之乱。更重要的是他将所行所悟，发扬光大，在他之后的明代内阁首辅，几乎大部分都受到了心学的影响。他的人生关键词可以总结为，阳明格竹 龙场悟道 宁王之乱 创立心学。 从人生轨迹和成就上来看，他是第一个实现立功立言立德的三不朽的神人。</p>
<p>心学的核心思想是心即是理，反对格物致知，提倡知行合一。说到格物，维基百科中提到了一件很有趣的事，说王阳明小时候喜欢杨朱理学，相信天下之物皆有义理，所以他不断的格物，曾经两周的时间尝试去“格”竹子，结果一场大病，最后痛定思痛，再也不从外物出发，而是关注于自己的内心。</p>
<p>史书说王阳明豪迈不羁而又十分有个性，而他自己也是表达了宁做狂人不做小人的心态：</p>
<p>“乡愿以忠信廉洁见取于君子，以同流合污无忤于小人，故非之无举，刺之无刺。然究其心，乃知忠信廉洁所以媚君子也，同流合污所以媚小人也，其心已破坏矣，故不可与入尧舜之道。狂者志存古人，一切纷嚣俗染，举不足以累其心，真有凤凰翔于千仞之意，一克念即圣人矣。惟不克念，故阔略事情，而行常不掩。惟其不掩，故心尚未坏而庶可与裁”</p>
<p>与其去做一个乡人赞赏的老好人，还不如做个狂人，更近本心，这里深得我心。因为我从小就被称为好人，循规蹈矩，不敢越雷池一步。长大后不自觉有逆反心理，常常心中所想与实际所做大相径庭。慢慢的学会贴近自己的本心，而不是以他人的眼光，定义自己的行为。</p>
<p>还有一定要提的就是王阳明的军功，作为文人，他的作战水平相当之高。对兵法的理解也是入木三分的。明史中对他的军事才能，也是十分赞赏。宁王叛乱时，谣言满天飞。而他稳如泰山，调兵遣将，迷惑对手，几乎以一人之力，平定了宁王叛乱。当真文武双全。</p>
<h2 id="精华，受到启发的地方"><a href="#精华，受到启发的地方" class="headerlink" title="精华，受到启发的地方"></a>精华，受到启发的地方</h2><p>本书将王阳明的心学主观的分成了如下的几个部分：</p>
<ul>
<li>磨砺</li>
<li>立志</li>
<li>行动</li>
<li>态度</li>
<li>智慧</li>
<li>处世</li>
</ul>
<p>对于<strong>磨砺</strong>，王阳明所提倡的就是让能力在磨练中快速成长。</p>
<blockquote>
<p>人须在事上磨练做功夫，乃有益。若只好静，遇事便乱，终无长进</p>
</blockquote>
<p>很多时候，不管是工作还是生活，我们往往会进入一种舒适的区域。在这个区域之内，我们便不敢越雷池一步。生怕犯错，生怕打破现有的生活平衡。但是如果没有磨砺，就不会有进步，就不能突破自己。但是呢，人们改变自己的意愿，有的时候又没那么强烈，所以这个时候，重要的便是<strong>立志</strong>。</p>
<p>因为“志不立，天下无可成之事”，有了决心和一个具体的目标，你会调动自己所有的能力，用尽方法去完成它。反过来，没有目标，那么努力了一段也很有可能停滞。古往今来，成大事的人往往有大志，比如张载：为天地立心，为生民立命，为往圣续绝学，为万世开太平。比如司马迁的写史书之志。但是作为我们一般人来说，是很难有这样的志向的，或许是因为际遇不足，或许是因为个人涵养不足。因此，我们正确的立志就更重要了。</p>
<p>对我来说，利用科技改变大家的生活很重要，我也愿意为之奋斗，所以我给自己也立下了这样的志向。或许不大，但是如果能够完成，对我而言就是一种巨大的满足。</p>
<p>但是立了志，如果不能正确的<strong>行动</strong>，仍是毫无用处。所以遇到该完成的时候时候，必须 “马上行动，一以贯之”。当然了，马上行动并不是鲁莽的行动，而是根据你的判断和思考所进行的行动。因为去尝试，永远好过于一直在等待。实践中的学习，永远好过纸上谈兵。如果面对该做的事情的时候，总是推脱说一切万事俱备了才去做，如此永远做不成。这种所谓等待万事俱备的推脱心态，必须加以警惕，区分到底是真的仍需时间，还是你的惰性所引起的拖延症又犯了。</p>
<p>行动固然重要，不半途而废更是如此。米卢说，<strong>态度</strong>决定一切。行动中要自己做自己的贵人。陈胜吴广起事的时候，在鱼中放置陈胜为王的布条。这就是一种心理的安慰，只有去除了疑惑，坚定了信念，做事情才能一往无前。而当你真的要做的时候，记得努力到极致，否则的话，倒还不如不做了。而一件事，如果你真想想做，很多时候方法会源源不断，记得放下你的偏见，放下你曾经学过的不能，而是发动一切你可以发动的力量。<br>所谓</p>
<blockquote>
<p>瞽者善听，聋者善视，绝利一源，用师十倍，三返昼夜，用师万倍。</p>
</blockquote>
<p>关注在一点的时候，就能够水滴石穿。</p>
<p>书中同样对<strong>智慧</strong>着墨很多，其中最得我心的就是“活在当下”。</p>
<blockquote>
<p>只存得此心常见在，便是学。过去未来事，思之何益？徒放心耳！</p>
</blockquote>
<p>这与《新世界，灵性的觉醒》中的观点何其相似。只有活在当下，你才能更好的体察当下。试着放弃其他无关的事情，花一个小时去全神贯注地做一件事。做时时刻留心、管住自己每一刻的感受。人的不快乐，很多时候来自于对事务的心猿意马，俗话说呢，就是吃着碗里的看着锅里的。而心猿意马时，及时地把自己拉回来，只要能够意识到自己的杂念就行。每天尝试冥想十分钟，完全的放飞自己的心灵，你会发现，之前让你十分苦恼的情绪，也就烟消云散了。</p>
<p>前面都是些自己的修为，<strong>处世</strong>则着重去说与他人和社会的接触。</p>
<blockquote>
<p>山光物态弄春辉，莫为轻阴便拟归。纵使晴明无雨色，入云深处亦沾衣。</p>
</blockquote>
<p>俗话说，常在河边站哪有不湿鞋，所以遇人闲话，不妨置之一笑。遇人侮辱，只当是耳边风。</p>
<blockquote>
<p>天地生意，花草一般。何曾有善恶之分？子欲观花，则以花为善，以草为恶。如欲用草时，复以草为善</p>
</blockquote>
<p>改变你的心境，就在一瞬间。现在我的很多快乐，往往是建立在与他人比较的基础之上的，很多不快乐，同样也是如此，这正应了阳明先生所说：</p>
<blockquote>
<p>不知就自己心地良知良能上体认扩充，却去求知其所不知，求能其所不能，一味只是希高慕大，不知自己桀纣心地，动辄要做尧舜事业，如何做得？</p>
</blockquote>
<p>确实值得反思。</p>
<p>诗中有云：</p>
<blockquote>
<p>钓罢归来不系船，江村月落正堪眠。纵然一夜风吹去，只在芦花浅水边。</p>
</blockquote>
<p>这种顺其自然的功夫，现在的我有些望尘莫及，但在世间纷纷扰扰之时，不妨给自己留下这么一扇窗，让自己的心灵透透气。</p>
<h2 id="践行，我所认同的心学"><a href="#践行，我所认同的心学" class="headerlink" title="践行，我所认同的心学"></a>践行，我所认同的心学</h2><p>初读这本书，自以为还是有一些收获。对我的日常生活影响最大的不外乎以下几点：</p>
<ul>
<li>活在当下</li>
<li>控制情绪，让情绪不侵入本心，而是本心静静的看着他们</li>
<li>立志，必须让远大的志向催动自己前行</li>
<li>用中学，掉书袋是万万不可的</li>
<li>想到就去做，不要犹豫，不要让自己后悔</li>
<li>专注的去做，但不是盲目的去做</li>
<li>只有见遍了好东西，才能有自己好的产出</li>
</ul>
<p>对心学一些理解仍在与自己的生活验证，而心学中的观点有些也无法完全认同。但是这种体察本心的过程，确实让我多了那么一丢丢对自己的生活的控制和专注。不过一旦遇到比较棘手的事情的时候，还是很容易乱了方寸。比如近期家中的杂事，时常让自己如热锅上的蚂蚁，想做却又无可奈何，这种情况下，对自己心态的磨砺也就尤为重要了。越是此时，越要控制住情绪，越是放任，越容易掉入情绪的大坑，与君共勉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结缘，之前的感受&quot;&gt;&lt;a href=&quot;#结缘，之前的感受&quot; class=&quot;headerlink&quot; title=&quot;结缘，之前的感受&quot;&gt;&lt;/a&gt;结缘，之前的感受&lt;/h2&gt;&lt;p&gt;早先在看《明朝那些事》的时候，心里就一直对王阳明有了这么一个印象。书中的具体描述已然淡去，但
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="哲学 心学" scheme="http://meijing0114.com/tags/%E5%93%B2%E5%AD%A6-%E5%BF%83%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>上海酒店之外滩茂悦</title>
    <link href="http://meijing0114.com/2016/08/13/life001/"/>
    <id>http://meijing0114.com/2016/08/13/life001/</id>
    <published>2016-08-13T10:14:41.000Z</published>
    <updated>2016-09-17T07:32:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前被同事安利，再加上自己之前也比较有兴趣。就去申请了一张招商银行的经典白金卡。算是真正的入坑了。这种卡带的福利还是相对不错的，比如有：</p>
<ul>
<li>每年送一次体检</li>
<li>每年送一次口腔保健</li>
<li>兑换航空公司里程</li>
<li>每年6次机场贵宾厅</li>
</ul>
<p>不过还有一个很不错的权益，那就是每年四次的300块住五星级酒店的权益。看了一下上海的列表，本来打算去住佘山艾美+欢乐谷，但是却发现佘山艾美实在是太热门了。所以最后抱着一种进城的心态，住了外滩茂悦。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f7wlob002ij20hs0vk470.jpg" alt=""></p>
<h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><p>去酒店第一个体验的是膳食。提前预定了酒店靠窗的自助餐，下面分别打分：</p>
<ul>
<li>环境：4分</li>
<li>口味：3分</li>
<li>服务：4分</li>
</ul>
<p>总体来说其实有些差强人意，环境还算马马虎虎，但是口味实在是不敢恭维。作为280这个价位的自助来说的话，它的膳食的品类、新鲜度和味道都没有达到预期。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f7wlrejxlrj216o1kwtlm.jpg" alt=""></p>
<p>其中为数不多的亮点，一个是煲仔饭，还有一个是生蚝。煲仔饭的话做法比较广式，但是食材稍差了写。生蚝算是实打实的，毕竟没有那个新鲜度的话，一般也不能放出来让你生吃不是。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f7wlrd6aygj216o1kwdw1.jpg" alt=""></p>
<p>环境的话，因为并不是直接临着外滩的，所以无法享受到无敌的江景。但是位置的安排还算合意。灯光和氛围也是中规中矩。</p>
<p>服务的话其实比较差，除了引导之外，别的服务都有点形同虚设。收拾的服务员差点把我们没吃完的东西收掉，铁板烧的服务员也是有点爱理不理。看来在这块的服务质量有待提高啊。</p>
<h2 id="房间"><a href="#房间" class="headerlink" title="房间"></a>房间</h2><p>房间的话，大小应该算是同类酒店里面的中等。先来说几个亮点，一个是浴室和房间的连接设计的很好：<br><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f7wlo8r5m9j21kw23uan4.jpg" alt=""></p>
<p>还有一个就是落地窗的设计使得视野十分的开阔，同时电动窗的设计也很贴心，能够保证你一觉睡到天亮。</p>
<p>但是吐槽的地方也不少，一个是开关老化，各种开关，都没有能够很顺畅的实现我想打开各种灯的想法。。反而是一直在不停的尝试，晚上起夜的时候非常的痛苦。电视的尺寸也是蛮小的，现在哪还有这种尺寸的电视。所以在硬件条件上，感觉房间是不够达标的。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f7wlo0ve7pj21kw16oti3.jpg" alt=""></p>
<h2 id="环境与其他设施"><a href="#环境与其他设施" class="headerlink" title="环境与其他设施"></a>环境与其他设施</h2><p>另外体验的酒店设施，一个最大的亮点就是顶楼的“非常时髦酒吧”。据说是小时代的取景地，它的逼格、视野和酒品都是中等偏上的，不多说，先来看几张无敌的景色照片：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbjw1f7wm9kq49tj21kw0qr14n.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbjw1f7wm9mjmaij21kw1kw4ge.jpg" alt=""></p>
<p>酒吧一进去就逼格满满，是由几千个酒瓶镶嵌在墙上组成的装饰，十分的震撼。有靠窗的位置，也有内侧的包间，可以满足不同喜好。而更加惊艳的是二楼，一个全开放式的天台设计，中间还有一个小泳池。一遍喝着鸡尾酒，一遍吹着风，同时看着外滩的无敌美景，这种感觉的确是一种很好的体验。怪不得进去的每个妹子都是不停的自拍。</p>
<p>第二天早上，赶着点体验了一把泳池和水疗中心。泳池的条件没的说，不过就是池水比较浅。水疗中心里面的话，汗蒸湿蒸，温泉都是一应俱全的。这点上倒是十分的良心，值得推荐！</p>
<p>除此之外，checkin和checkout都是被吐槽的，checkin的妹子错误告诉我关于早餐的信息，checkout的时候莫名的有一个外国人在错误的引导，不知所谓，差点停车票也没了，这点实在是有失水准。</p>
<p>不过综合来看，胜在位置和顶楼的bar，为了这两点，还是可以来体验一下的。再次推荐招行，中秋还在酒店附送了一盒月饼，良心~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前被同事安利，再加上自己之前也比较有兴趣。就去申请了一张招商银行的经典白金卡。算是真正的入坑了。这种卡带的福利还是相对不错的，比如有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每年送一次体检&lt;/li&gt;
&lt;li&gt;每年送一次口腔保健&lt;/li&gt;
&lt;li&gt;兑换航空公司里程&lt;/li&gt;
&lt;li&gt;每
    
    </summary>
    
      <category term="旅行与生活体验" scheme="http://meijing0114.com/categories/%E6%97%85%E8%A1%8C%E4%B8%8E%E7%94%9F%E6%B4%BB%E4%BD%93%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>dotfiles入门</title>
    <link href="http://meijing0114.com/2016/08/11/tool002/"/>
    <id>http://meijing0114.com/2016/08/11/tool002/</id>
    <published>2016-08-11T01:38:57.000Z</published>
    <updated>2016-09-18T02:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于程序员来说，开发效率是非常重要的。当程序员升级自己的机器或新入职的时候，往往要做的第一件事情就是配置开发环境。毕竟工欲善其事必先利其器。而配置开发环境，无非是指如下几个方面：</p>
<ul>
<li>系统配置</li>
<li>软件配置</li>
<li>shell配置</li>
<li>IDE配置</li>
</ul>
<h2 id="为什么要用dotfiles"><a href="#为什么要用dotfiles" class="headerlink" title="为什么要用dotfiles"></a>为什么要用dotfiles</h2><p>使用dotfiles的最主要原因还是快速搭建自己的开发环境，降低迁移开发环境的成本。一些你最熟悉的配置、工具的无缝贴合，能够让你在设备升级的时候高枕无忧。</p>
<p>另外，学习dotfiles能够让你对工具或配置的理解更深入。brew bundle、cask等软件管理的软件，让你从linux的层面理解mac上的桌面软件的安装。同时你也会学会精简不需要的工具，比如sublime在刚开始使用的时候会狂装各类不同的工具，但是会发现很多工具的使用率其实不高。梳理dotfiles能够让你在这一点上做到断舍离。</p>
<p>再次，dotfiles是近距离了解和观察大牛的配置的绝佳机会。github上面有大量开源的，经验积累下来的dotfiles: <a href="https://dotfiles.github.io/" target="_blank" rel="external">https://dotfiles.github.io/</a> 通过学习和fork这些好的dotfiles，你能够有机会不断的丰富自己现有的dotfile，并把它调优到一种最佳的状态。</p>
<p>最后，还是要再强调一下效率。dotfiles给你审视自己开发环境的机会，优化并提升效率。正所谓 工欲善其事必先利其器。对于加班繁多的程序员来说，提交效率，健康生活是非常必要的。</p>
<h2 id="常见的dotfiles有哪些组成部分"><a href="#常见的dotfiles有哪些组成部分" class="headerlink" title="常见的dotfiles有哪些组成部分"></a>常见的dotfiles有哪些组成部分</h2><p>前面已经大致列举出了dotfiles的组成部分，我把它分为 系统配置、软件配置，shell配置，ide配置和松弛配置几个部分。下面会分别进行说明。</p>
<p>保存dotfiles最常见的方式就是使用github进行托管了，上文中大部分的dotfiles也都是这么做的。</p>
<ul>
<li>首先新建github的目录</li>
<li>将你常用的配置放入相应的文件夹</li>
<li>建立软链</li>
</ul>
<p>所以每当你新装机的时候，操作顺序如下：</p>
<ul>
<li>从github上面拉取文件</li>
<li>使用统一的脚本安装install.sh<ul>
<li>脚本包括建立软链、安装软件等一系列的动作。</li>
</ul>
</li>
<li>喝杯咖啡，done</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbjw1f7wf2sxqpij21kw16o7q0.jpg" alt=""></p>
<h2 id="dotfiles的常用配置"><a href="#dotfiles的常用配置" class="headerlink" title="dotfiles的常用配置"></a>dotfiles的常用配置</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>之前对mac的系统配置的了解都是在这个图标层面的。知道我发现了一个关于mac系统的配置，看了之后，惊为天人。没想到mac系统还可以让你这么玩.<a href="https://github.com/mathiasbynens/dotfiles/blob/master/.macos不过这里提醒一下，对于mac系统的专门配置，我不是特别感冒，因为跨系统鸿沟太大，同时我对这个级别的配置也并没有那么多的要求。" target="_blank" rel="external">https://github.com/mathiasbynens/dotfiles/blob/master/.macos不过这里提醒一下，对于mac系统的专门配置，我不是特别感冒，因为跨系统鸿沟太大，同时我对这个级别的配置也并没有那么多的要求。</a></p>
<p>这里列举几个觉得还算有用的配置大家参考一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># 设置计算机名称</div><div class="line">sudo scutil --set ComputerName &quot;tedmac&quot;</div><div class="line"></div><div class="line"># 设置截屏保存位置</div><div class="line">defaults write com.apple.screencapture location -string &quot;$&#123;HOME&#125;/Desktop&quot;</div><div class="line"></div><div class="line"></div><div class="line"># 设置默认的触发角</div><div class="line"># Hot corners</div><div class="line"># Possible values:</div><div class="line">#  0: no-op</div><div class="line">#  2: Mission Control</div><div class="line">#  3: Show application windows</div><div class="line">#  4: Desktop</div><div class="line">#  5: Start screen saver</div><div class="line">#  6: Disable screen saver</div><div class="line">#  7: Dashboard</div><div class="line"># 10: Put display to sleep</div><div class="line"># 11: Launchpad</div><div class="line"># 12: Notification Center</div><div class="line"># Top left screen corner → sleep</div><div class="line">defaults write com.apple.dock wvous-tl-corner -int 10</div><div class="line">defaults write com.apple.dock wvous-tl-modifier -int 0</div><div class="line"># Top right screen corner → mission control</div><div class="line">defaults write com.apple.dock wvous-tr-corner -int 2</div><div class="line">defaults write com.apple.dock wvous-tr-modifier -int 0</div><div class="line"># Bottom left screen corner → lauchpad</div><div class="line">defaults write com.apple.dock wvous-bl-corner -int 11</div><div class="line">defaults write com.apple.dock wvous-bl-modifier -int 0</div><div class="line"></div><div class="line"># Bottom right screen corner → desktop</div><div class="line">defaults write com.apple.dock wvous-br-corner -int 4</div><div class="line">defaults write com.apple.dock wvous-br-modifier -int 0</div></pre></td></tr></table></figure>
<p>其他的配置大概看了下，没有了解的欲望，所以感兴趣的话还是去看上面的这个链接吧。</p>
<h3 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h3><p>说到软件配置，mac上的homebrew肯定是绕不开，它是基于ruby的类yum/apt-get 软件管理工具，如果你还没用过，非常建议你<a href="http://brew.sh/" target="_blank" rel="external">在这里</a>试用一下。</p>
<p><img src="http://ww4.sinaimg.cn/
mw690/67ad48bbjw1f7wf79n2xzj21j40pc124.jpg" alt=""></p>
<p>homebrew主要针对的是系统或者是终端软件，而针对桌面软件，则是另一个工具cask的天下。这里简单给一个demo，详细了解的话可以到<a href="https://caskroom.github.io/" target="_blank" rel="external">官网</a>。</p>
<p>homebrew bundle提供了类似于composer或者npm一样的包管理功能，通过这个，你就能方便的管理你mac上面安装的软件了。</p>
<p>比如我在set-up一台机器的时候，就会用到下面的brew bundle的配置Brewfile，来进行常用的软件管理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"># Taps,指定相应的brew的源</div><div class="line">tap &apos;caskroom/cask&apos;</div><div class="line">tap &apos;caskroom/fonts&apos;</div><div class="line">tap &apos;caskroom/versions&apos;</div><div class="line">tap &apos;homebrew/bundle&apos;</div><div class="line">tap &apos;homebrew/dupes&apos;</div><div class="line">tap &apos;homebrew/php&apos;</div><div class="line"></div><div class="line"># Make sure apps get installed in system Applications dir</div><div class="line"># 确保所有的app都安装在Applications目录之下</div><div class="line">cask_args appdir: &apos;/Applications&apos;</div><div class="line"></div><div class="line"># Install ZSH</div><div class="line"># 安装 ZSH</div><div class="line">brew &apos;zsh&apos;</div><div class="line">brew &apos;zsh-completions&apos;</div><div class="line"></div><div class="line"># Install GNU core utilities (those that come with OS X are outdated)</div><div class="line"># 安装GNU的相关功能</div><div class="line">brew &apos;coreutils&apos;</div><div class="line"></div><div class="line"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed</div><div class="line"># 安装GNX中的 `find` `locate` `updatedb` `xargs`</div><div class="line">brew &apos;findutils&apos;</div><div class="line"></div><div class="line"># Install Bash 4</div><div class="line"># 安装 BASH 4</div><div class="line">brew &apos;bash&apos;</div><div class="line"></div><div class="line"># Install more recent versions of some OS X tools</div><div class="line"># 安装OS X工具的最近版本</div><div class="line">brew &apos;homebrew/dupes/grep&apos;</div><div class="line"></div><div class="line"># Install Binaries</div><div class="line"># 安装一些常用的终端运行软件</div><div class="line">brew &apos;awscli&apos;</div><div class="line">brew &apos;git&apos;</div><div class="line">brew &apos;hub&apos;</div><div class="line">brew &apos;tree&apos;</div><div class="line">brew &apos;mackup&apos;</div><div class="line">brew &apos;node&apos;</div><div class="line">brew &apos;trash&apos;</div><div class="line">brew &apos;wget&apos;</div><div class="line">brew &apos;svn&apos;</div><div class="line">brew &apos;httpie&apos;</div><div class="line">brew &apos;autojump&apos;</div><div class="line">brew &apos;lua&apos;</div><div class="line">brew &apos;cmake&apos;</div><div class="line">brew &apos;openssl&apos;</div><div class="line">brew &apos;ctags&apos;</div><div class="line">brew &apos;curl&apos;</div><div class="line">brew &apos;python&apos;</div><div class="line">brew &apos;python3&apos;</div><div class="line"></div><div class="line"># 安装开发环境</div><div class="line">brew &apos;php70&apos;, args: [&apos;with-debug&apos;, &apos;without-apache&apos;]</div><div class="line">brew &apos;php56&apos;, args: [&apos;with-debug&apos;, &apos;without-apache&apos;]</div><div class="line">brew &apos;mariadb&apos;</div><div class="line"></div><div class="line"># cask安装桌面的软件</div><div class="line">cask &apos;aerial&apos;</div><div class="line">cask &apos;flux&apos;</div><div class="line">cask &apos;alfred&apos;</div><div class="line">cask &apos;atom&apos;</div><div class="line">cask &apos;dash&apos;</div><div class="line">cask &apos;evernote&apos;</div><div class="line">cask &apos;fluid&apos;</div><div class="line">cask &apos;goofy&apos;</div><div class="line">cask &apos;google-chrome&apos;</div><div class="line">cask &apos;google-drive&apos;</div><div class="line">cask &apos;iterm2&apos;</div><div class="line">cask &apos;mysqlworkbench&apos;</div><div class="line">cask &apos;rescuetime&apos;</div><div class="line">cask &apos;screenhero&apos;</div><div class="line">cask &apos;sequel-pro&apos;</div><div class="line">cask &apos;slack&apos;</div><div class="line">cask &apos;sublime-text3&apos;</div><div class="line">cask &apos;textual&apos;</div><div class="line">cask &apos;tower&apos;</div><div class="line">cask &apos;transmit&apos;</div><div class="line">cask &apos;vagrant&apos;</div><div class="line">cask &apos;virtualbox&apos;</div><div class="line">cask &apos;virtualbox-extension-pack&apos;</div><div class="line">cask &apos;vlc&apos;</div><div class="line">cask &apos;istat-menus&apos;</div><div class="line"></div><div class="line"># Quicklook</div><div class="line">cask &apos;qlcolorcode&apos;</div><div class="line">cask &apos;qlmarkdown&apos;</div><div class="line">cask &apos;quicklook-json&apos;</div><div class="line">cask &apos;quicklook-csv&apos;</div><div class="line">cask &apos;qlstephen&apos;</div><div class="line"></div><div class="line"># 常用字体</div><div class="line">cask &apos;font-sauce-code-powerline&apos;</div><div class="line">cask &apos;font-source-code-pro&apos;</div><div class="line">cask &apos;font-source-sans-pro&apos;</div><div class="line">cask &apos;font-source-serif-pro&apos;</div></pre></td></tr></table></figure>
<p>如果有你需要的软件，只需要向里面添加，然后维护就可以了。在新的机器上，只需要<code>brew bundle</code>一下，就可以快速地完成所有软件的安装了。</p>
<h4 id="Introduce-mackup"><a href="#Introduce-mackup" class="headerlink" title="Introduce mackup"></a>Introduce mackup</h4><p>在完成了软件的安装，之后需要完成的就是对于软件的配置的管理了。对我来说，最需要管理的就是ide的配置了，使用的ide就是sublime3. 在这种应用场景之下，就需要针对Mackup进行配置的管理了。</p>
<p>Mackup主要做的就是把你在~/Library中的配置进行拷贝到同步的目录，然后通过建立软链的方式在机器之间共享。每次安装新机器的时候，只需要只需要拷贝你同步的目录，然后执行<code>mackup restore</code>.</p>
<h3 id="shell配置"><a href="#shell配置" class="headerlink" title="shell配置"></a>shell配置</h3><p>我选用的shell是在mac厦门大名鼎鼎的zsh，它有着十分强大的特性。诸如自动填充、共享命令历史、带主题的命令行等等。</p>
<p>但是一开始zsh并不是特别的用户友好，所以后来出现了神器oh-my-zsh，mactalk的池老师也曾经推荐过。github地址如下：</p>
<p>oh-my-zsh把zsh进行了一些层面的抽象，使得使用起来更加方便一点。包括可以选取不同的命令行主题，可以配置各种不同的zsh插件，以及常用的alias和export。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 选取一个主题</div><div class="line">ZSH_THEME=&quot;agnoster&quot;</div><div class="line"></div><div class="line"># 配置powerline，这又是一个神奇的东西</div><div class="line">. /Users/liangchen/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh</div><div class="line"></div><div class="line"># 配置神奇的插件</div><div class="line"># autojump 从此找文件夹不用cd 直接一个j命令搞定，超强联想</div><div class="line">[[ -s `brew --prefix`/etc/autojump.sh ]] &amp;&amp; . `brew --prefix`/etc/autojump.sh</div><div class="line"># 其他有用的插件</div><div class="line">plugins=(git textmate ruby autojump osx mvn gradle zsh-syntax-highlighting)</div><div class="line"></div><div class="line"># 个人专有配置</div><div class="line">alias cls=&apos;clear&apos;</div><div class="line">alias ll=&apos;ls -l&apos;</div><div class="line">alias la=&apos;ls -a&apos;</div><div class="line">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</div><div class="line">alias grep=&quot;grep --color=auto&quot;</div><div class="line">alias dotfiles=&quot;~/dev/github/dotfiles&quot;</div><div class="line"></div><div class="line"># 指定php文件都以sublime的方式打开，非常方便，可以支持多种不同的文件后缀和打开的方式。</div><div class="line">alias -s c=vim</div><div class="line">alias -s gz=&apos;tar -xzvf&apos;</div><div class="line">alias -s tgz=&apos;tar -xzvf&apos;</div><div class="line">alias -s zip=&apos;unzip&apos;</div><div class="line">alias -s bz2=&apos;tar -xjvf&apos;</div><div class="line">alias  -s php=&apos;subl&apos;</div></pre></td></tr></table></figure>
<h3 id="IDE配置"><a href="#IDE配置" class="headerlink" title="IDE配置"></a>IDE配置</h3><p>现在主要在用的ide是sublime，有优点也有不少缺点。优点在于：</p>
<ul>
<li>编辑的效率更高，比如支持vim模式。</li>
<li>开放的插件体系，很多人贡献了很多不错的开源插件，如果你不满意，也可以自己修改</li>
<li>很好的代码模板功能</li>
</ul>
<p>缺点同样也很明显，但是最致命的就是对php的语法检查， 没有一个很好的插件能够做到。最基本的尽管有，但是对$符的检查和支持就没有phpstorm那么到位了。这块之后想办法再去优化一下插件吧。</p>
<p>针对sublime的php开发配置，可以另开一篇文章了，这里只是先列举一下我常用的sublime的插件：</p>
<ul>
<li>php开发专用：<ul>
<li>codeintel：进行php专用的代码提示，可以配置不同的php执行的版本，这里选择的是php5.5；但是一直被人诟病不稳定性；</li>
<li>sublimelinter：php基本语法依赖检查</li>
<li>sublimePHPCS: 代码探测和PSR2校验</li>
<li>php companion: 类的自动导入，包括对命名空间的识别和导入</li>
<li>Bracket hightling: 语法高亮</li>
<li>Codebug：类似PHPstrom 对xdebug的集成</li>
<li>php completion: 代码自动补全</li>
<li>php NinJa Manuel：热心人折腾的php中文文档，挺实用的</li>
</ul>
</li>
<li>实用工具：<ul>
<li>svn</li>
<li>git</li>
<li>vcs gutter: 版本控制自动识别与提示</li>
<li>markdown preview</li>
<li>CodeFormatter：代码美化</li>
<li>prettyjson: json美化</li>
<li>snippet：代码块自定义与自动生成</li>
<li>evernote插件</li>
</ul>
</li>
<li>心情愉悦：<ul>
<li>boxy theme： 2016 sublime最佳主题之一</li>
</ul>
</li>
</ul>
<p>看了这么多的配置，不知你是否也有兴趣尝试一下？快快行动起来，提高你的工作效率吧！</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f6p22b5u1hj20hj09n756.jpg" alt=""></p>
<h2 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h2><p><a href="https://driesvints.com/blog/getting-started-with-dotfiles/" target="_blank" rel="external">https://driesvints.com/blog/getting-started-with-dotfiles/</a><br><a href="https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/" target="_blank" rel="external">https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/</a><br><a href="http://www.anishathalye.com/2014/08/03/managing-your-dotfiles/" target="_blank" rel="external">http://www.anishathalye.com/2014/08/03/managing-your-dotfiles/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于程序员来说，开发效率是非常重要的。当程序员升级自己的机器或新入职的时候，往往要做的第一件事情就是配置开发环境。毕竟工欲善其事必先利其器。而配置开发环境，无非是指如下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统配置&lt;/li&gt;
&lt;li&gt;软件配置&lt;/li&gt;
&lt;li&gt;shell配
    
    </summary>
    
      <category term="程序员效率" scheme="http://meijing0114.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%88%E7%8E%87/"/>
    
    
      <category term="程序员效率" scheme="http://meijing0114.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>漫谈php框架之中间件</title>
    <link href="http://meijing0114.com/2016/08/08/php001/"/>
    <id>http://meijing0114.com/2016/08/08/php001/</id>
    <published>2016-08-08T15:17:54.000Z</published>
    <updated>2016-08-11T01:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f6p22evywlj20zk0np42f.jpg" alt="题图" title="题图"></p>
<p>市面上常见的php框架有很多，最近因为有技术需求，所以对常见的php框架的中间件进行了一些了解。各个框架尽管在目标上对php框架的定义大同小异，但是在实现方式上却各有不同，且看下文：</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>首先什么是php的中间件？</p>
<p>根据zend-framework中的定义：</p>
<blockquote>
<p>所谓中间件是指提供在请求和响应之间的，能够截获请求，并在其基础上进行逻辑处理，与此同时能够完成请求的响应或传递到下一个中间件的代码。</p>
</blockquote>
<p>这一介绍十分的简洁，但却略显抽象，接下来我们通过例子来一个个看。</p>
<h2 id="处在原始时代的CI"><a href="#处在原始时代的CI" class="headerlink" title="处在原始时代的CI"></a>处在原始时代的CI</h2><p>首先来看CI框架，php star数 12830.<br>作为一款非常简洁的框架，CI被吐槽的不少，但是也有很多人喜欢。首先来看它官方给出的一张请求时序图：</p>
<p><img src="http://7rfkw4.com1.z0.glb.clouddn.com/appflowchart.png" alt="CI框架请求时序" title="CI框架请求时序"></p>
<p>根据上文中对中间件的定义，那么对于CI框架来说，唯一称得上是内置中间件的：Security模块</p>
<p>Security模块是在请求进入controller之前实现的逻辑：</p>
<ul>
<li>请求在完成路由之后，进入controller之前；</li>
<li>CI框架支持通过配置的方式，决定是否启用包括“URI安全、XSS过滤、CSRF保护”在内的功能模块；</li>
<li>一旦框架初始化时探测到模块启用，那么优先进行模块逻辑；</li>
<li>触发安全模块，请求即告终止。</li>
</ul>
<p>乍看起来，CI框架的中间件十分的局限，但是其实它却提供了无限的可能性。。因为CI中还提供了一个叫做Hooks的功能。即钩子。</p>
<p>下面来看两个个hooks的例子：</p>
<p>定义一个在controller逻辑之前的钩子，并指定钩子的参数、类名或函数名信息：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$hook[<span class="string">'pre_controller'</span>] = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'class'</span>    =&gt; <span class="string">'MyClass'</span>,</div><div class="line">    <span class="string">'function'</span> =&gt; <span class="string">'Myfunction'</span>,</div><div class="line">    <span class="string">'filename'</span> =&gt; <span class="string">'Myclass.php'</span>,</div><div class="line">    <span class="string">'filepath'</span> =&gt; <span class="string">'hooks'</span>,</div><div class="line">    <span class="string">'params'</span>   =&gt; <span class="keyword">array</span>(<span class="string">'beer'</span>, <span class="string">'wine'</span>, <span class="string">'snacks'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>定义一个在controller逻辑之后的钩子，并直接给出其实现：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$hook[<span class="string">'post_controller'</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* do something here */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>为什么说CI没提供什么像样的中间件但是又很灵活呢，就是因为它可以在如下的多个阶段进行挂钩子的操作。细数过来有7种之多。</p>
<p>从后文中可以看出，很多其他的框架可能也就会涵盖两三种阶段，因此，从这个角度上来说，CI的钩子组合而成的中间件的确很灵活。</p>
<ul>
<li><strong>pre_system</strong>阶段： 在系统执行的早期调用，这个时候只有 基准测试类 和 钩子类 被加载了， 还没有执行到路由或其他的流程；</li>
<li><strong>pre_controller</strong>阶段： 在你的控制器调用之前执行，所有的基础类都已加载，路由和安全检查也已经完成；</li>
<li><strong>post_controller_constructor</strong>阶段： 在你的控制器实例化之后立即执行，控制器的任何方法都还尚未调用；</li>
<li><strong>post_controller</strong>阶段： 在你的控制器完全运行结束时执行；</li>
<li><strong>display_override</strong>阶段： 覆盖 _display() 方法，该方法用于在系统执行结束时向浏览器发送最终的页面结果； 这可以让你有自己的显示页面的方法。注意你可能需要使用 <code>$this-&gt;CI =&amp; get_instance()</code>方法来获取 CI 超级对象，以及使用 <code>$this-&gt;CI-&gt;output-&gt;get_output()</code>方法来 获取最终的显示数据；</li>
<li><strong>cache_override</strong>阶段： 使用你自己的方法来替代 输出类 中的 _display_cache() 方法，这让你有自己的缓存显示机制。</li>
<li><strong>post_system</strong> 在最终的页面发送到浏览器之后、在系统的最后期被调用。</li>
</ul>
<p>总结来看，CI中的中间件：</p>
<ul>
<li>有很大的自由度</li>
<li>同时支持在多个阶段对请求进行嵌入（对比下来是最全面的）</li>
<li>钩子函数的使用成本高；</li>
<li>支持各种diy：<ul>
<li>请求来时http校验、权限校验、额外的安全策略</li>
<li>请求去时上报数据</li>
</ul>
</li>
</ul>
<h2 id="大红大紫的Laravel"><a href="#大红大紫的Laravel" class="headerlink" title="大红大紫的Laravel"></a>大红大紫的Laravel</h2><p>github star 24997<br>作为最近两年大红大紫的Laravel，的确也是有必要对其中间件机制进行了解：</p>
<p>首先Laravel提供了一个很好的中间件自动生成工具：<br><code>php artisan make:middleware OldMiddleware</code><br>由Laravel的命令行完成，这种看似简单的命令行工具其实可以对框架的扩展起到非常重要的作用。</p>
<p>再来看一个Laravel中典型的请求过滤器：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldMiddleware</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 运行请求过滤器。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</div><div class="line">     * <span class="doctag">@param</span>  \Closure  $next</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($request-&gt;input(<span class="string">'age'</span>) &lt;= <span class="number">200</span>) &#123;</div><div class="line">            <span class="keyword">return</span> redirect(<span class="string">'home'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $next($request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过滤器，filter，是中间件中使用最广泛的一种，很多框架里甚至filter就等同于中间件。意如其名，即是对请求Request进行某种过滤，这个过滤可以是参数上的限制、安全策略的限制、http协议的限制，只要是请求中带来的属性，都可以据此进行过滤。</p>
<p>同时这里也可以看到，Laravel使用闭包的方式进行请求的传递，真正践行的优雅的中间件串联的方式，只需要调用next函数，请求即可被按照预先定义的规则传递到下一个中间件中。</p>
<p>Laravel支持全局的中间件和根据具体路由规定的中间件两种，同时优先级又以定义顺序为准。做到全局与具体情况的兼顾。同时它显示的支持前置、后置和Terminable三种中间件，覆盖了大部分的中间件场景，是一种相对不错的设计。</p>
<p>但美中不足或者说场景覆盖不够友好的地方在于它以路由的方式组织中间件，会与controller有些脱节，每次定义controller中action行为的时候，还需要转换为路由进行配置，略有些不方便。</p>
<p>总结来看</p>
<ul>
<li>Laravel践行了让controller更纯粹的思想，中间件交给路由，controller只做它该做的事；</li>
<li>中间件与路由组灵活结合，能够满足应用场景；</li>
<li>前置、后置与Terminable支持了现有大部分的中间件需求；</li>
<li>自动生成十分方便扩展中间件，开发友好；</li>
<li>但对一个controller内多个action需要统一加入或统一不加入中间件的场景，支持不友好。</li>
</ul>
<h2 id="老生常谈yii-2-0"><a href="#老生常谈yii-2-0" class="headerlink" title="老生常谈yii 2.0"></a>老生常谈yii 2.0</h2><p>github star 4668</p>
<p>yii框架首先是中国人开发的，star数虽然不是很多，但是功能也算丰富。<br>yii框架从1.1到2.0，经过了一个比较大的升级，支持了很多新的特性，如果不支持，只怕是要落伍了。</p>
<p>在yii框架1.1中，中间件干脆就叫filters了，十分的直白，分为pre-filter和post-fiter两种，即前文中说的，在进入controller之前的过滤逻辑，和完成controller处理之后的过滤逻辑。</p>
<p>但是到了yii2.0之后，filters经过了一层升级，到了behaviors，明确了一点：重心放在了每一个controller的行为上，而不是像Laravel一样controller很傻很单纯。</p>
<p>yii框架的behaviors可以在controller或application中配置。</p>
<p>这里是一个访问控制的filter，具体进行什么样的访问控制由className定义，同时对controller中的action支持“only”关键字，还有“”关键字，能够支持排除法的功能，这个在一些场景下还是很有用的。同时“roles”也能够支持你预先定义好的角色的概念，比如学生无法访问教师后台，而教师无法访问学生论坛等。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">AccessControl</span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'access'</span> =&gt; [</div><div class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(),</div><div class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'create'</span>, <span class="string">'update'</span>],</div><div class="line">            <span class="string">'rules'</span> =&gt; [</div><div class="line">                <span class="comment">// allow authenticated users</span></div><div class="line">                [</div><div class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</div><div class="line">                ],</div><div class="line">                <span class="comment">// everything else is denied by default</span></div><div class="line">            ],</div><div class="line">        ],</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，在Yii中你也可以自定义filter：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_startTime;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($action)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction($action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">($action, $result)</span></span></div><div class="line">    &#123;</div><div class="line">        $time = microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;_startTime;</div><div class="line">        Yii::trace(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction($action, $result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里明显可以看出，这个filter针对action，分别在“beforeAction”和“afterAction”两个阶段进行了逻辑处理，完成了请求的计时工作。</p>
<p>所以总的来看，Yii框架中的中间件：</p>
<ul>
<li>支持前置和后置两个阶段的自定义；</li>
<li>提供了基本的访问控制中间件；</li>
<li>配置侵入到controller中，完成对controller行为的深度控制；</li>
<li>无法自动生成中间件，自定义成本略高。</li>
</ul>
<h2 id="大家伙-ZendFramework"><a href="#大家伙-ZendFramework" class="headerlink" title="大家伙 ZendFramework"></a>大家伙 ZendFramework</h2><p>ZendFramework是由zend公司推出的php框架，其目标就是建立一套大而全的php框架。以满足企业应用开发的目标。<br>ZendFramework由很多不同的模块构成，使用者可以通过相互组合的方式来实现自己想要的功能，同时也能够不一次加载大而全的框架，十分的灵活。<br>比如有负责授权的”zend-authentication”,或者是负责验证码的”zend-captcha”等等。</p>
<p>其中”zend-stratigility” 负责提供中间件以及中间件执行流的功能。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Zend</span>\<span class="title">Stratigility</span>\<span class="title">MiddlewarePipe</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Zend</span>\<span class="title">Diactoros</span>\<span class="title">Server</span>;</div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</div><div class="line"></div><div class="line">$app    = <span class="keyword">new</span> MiddlewarePipe();</div><div class="line">$server = Server::createServer($app, $_SERVER, $_GET, $_POST, $_COOKIE, $_FILES);</div><div class="line"></div><div class="line"><span class="comment">// Landing page</span></div><div class="line">$app-&gt;pipe(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($req, $res, $next)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (! in_array($req-&gt;getUri()-&gt;getPath(), [<span class="string">'/'</span>, <span class="string">''</span>], <span class="keyword">true</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> $next($req, $res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $res-&gt;end(<span class="string">'Hello world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Another page</span></div><div class="line">$app-&gt;pipe(<span class="string">'/foo'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($req, $res, $next)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $res-&gt;end(<span class="string">'FOO!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$server-&gt;listen();</div></pre></td></tr></table></figure>
<p>这里的代码给出了两个中间件的例子。第一个是落地页，监听了root路径，如果命中了这一路由规则，那么请求会被提前结束，返回给用户“Hello world！”。<br>而第二个中间件去匹配foo这一路径，模糊匹配的方式，如果命中了，会返回FOO并结束请求。</p>
<p>与Laravel类似，这里同样支持使用next（可调用的变量）的方式将请求继续向下传递。而这里中间件配置的方式也跟Laravel比较像，是统一在一个地方根据路由进行配置的，这样完全可以按照如下的方式根据不同的路由定义不同的中间件处理逻辑：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$app-&gt;pipe(<span class="string">'/api'</span>, $apiMiddleware);</div><div class="line">$app-&gt;pipe(<span class="string">'/docs'</span>, $apiDocMiddleware);</div><div class="line">$app-&gt;pipe(<span class="string">'/files'</span>, $filesMiddleware);</div></pre></td></tr></table></figure>
<p>总结来看，ZendFramework的中间件：</p>
<ul>
<li>主要侧重在请求前置阶段，淡化了请求后置或其他阶段</li>
<li>通过路由的方式统一配置中间件，支持串行</li>
<li>并未预先定义中间件</li>
</ul>
<h2 id="我心目中的中间件设计"><a href="#我心目中的中间件设计" class="headerlink" title="我心目中的中间件设计"></a>我心目中的中间件设计</h2><p>首先按照不同的类别列举一下常见的中间件：</p>
<ul>
<li>前置中间件：<ul>
<li>cookie验证：验证用户的cookie</li>
<li>用户角色验证：定义不同的用户角色并验证</li>
<li>用户权限验证：配置不同的用户权限，并验证</li>
<li>安全相关，如CSRF校验：CSRF校验中间件</li>
<li>http方法过滤：过滤特定的GET POST请求</li>
<li>http或者page cache：对指定路径的页面进行缓存</li>
<li>跨域中间件：不用在nginx配置，而是通过框架的方式，针对某些域名或某些请求，提供跨域的服务。</li>
</ul>
</li>
<li>后置中间件：<ul>
<li>共同数据输出：针对统一业务的公共数据，在后置中统一输出</li>
</ul>
</li>
<li>请求返回浏览器之后的中间件：<ul>
<li>打印日志</li>
<li>更新session（Laravel）</li>
</ul>
</li>
</ul>
<p>所以一个php框架最好能够：</p>
<ul>
<li>定义核心可用中间件；</li>
<li>提供在不同阶段扩展中间件的能力，不能太多，支持前置和后置即可覆盖大部分场景；</li>
<li>统一配置中间件，方便管理所有的中间件，让controller单纯一些；</li>
<li>提供中间件自动生成与方便扩展功能。</li>
</ul>
<p>以上</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f6p22b5u1hj20hj09n756.jpg" alt="小白学web" title="小白学web"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/67ad48bbgw1f6p22evywlj20zk0np42f.jpg&quot; alt=&quot;题图&quot; title=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;市面上常见的php框架有很多，最近因为有技术需求，所以对常见的ph
    
    </summary>
    
      <category term="php" scheme="http://meijing0114.com/categories/php/"/>
    
    
      <category term="中间件,框架" scheme="http://meijing0114.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>读评《web全栈工程师的自我修养》</title>
    <link href="http://meijing0114.com/2016/06/06/book010/"/>
    <id>http://meijing0114.com/2016/06/06/book010/</id>
    <published>2016-06-06T15:06:43.000Z</published>
    <updated>2016-08-08T00:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本书年初的时候在班车上面翻了一遍。刚开始的时候对其中很多观点不以为然，认为太浅。不过后来再翻一次的时候，不少东西还是很有启发意义，因此加以推介，涉及到作者观点、大纲，有兴趣的同学可以自行阅读，加以判断。非常适合对全栈感兴趣，但对某一细分技术还不甚了解的同学。</p>
<h2 id="什么是全栈工程师"><a href="#什么是全栈工程师" class="headerlink" title="什么是全栈工程师"></a>什么是全栈工程师</h2><p>现在，技术其实变得越来越简单。云服务就在提供水和电。<br>所以你需要充分的去了解PAAS服务的平台，amazon的服务，github的服务，让技术不再成为门槛，让事情聚焦在提供专业的价值上面。这也就是世界级的IT支持了，你再也不用担心“只差一个程序员”了。</p>
<p>LAMP的技术栈<br>MEAN的技术栈</p>
<p>作者提出全栈工程师或者说工程师的前景：</p>
<ul>
<li>一专多长</li>
<li>解决问题而不是醉心技术</li>
</ul>
<p>其实全栈工程师，跟我在taobao十年里面看到的工程师可能是不相符合的。很多淘宝的大型系统，需要非常专业的工程师进行很多的优化才可以实现。</p>
<h2 id="如何成为全栈工程师"><a href="#如何成为全栈工程师" class="headerlink" title="如何成为全栈工程师"></a>如何成为全栈工程师</h2><p>我们都是普通人，“一万小时定律”是绕不过去的。所以要成为有竞争力的专业人员，必须要投入大量的时间。</p>
<p>对于招聘来说，要的不仅仅是满足要求，很多时候非常希望候选人能够超出预期。你必须要有一些额外的亮点，也就是竞争力才行。</p>
<p>对于成为全栈工程师这件事情，作者提供了一些建议：</p>
<ul>
<li>围绕商业目标：转型是每时每刻都存在的，每个人，不仅仅是公司，都应该围绕商业目标。商业目标是稳定的，比技术更为稳定。<ul>
<li>对于直接制作产品，给用户使用的团队，就需要对外关注如何提高产品质量、降低产品成本；对内应该关注如何优化流程、减少错误率、如果团队输出的结果是公司内其他部门需要的原材料，就要关注下游的需求，研究如何更好地输出结果，如何在流程上使得输出产品的过程更加顺畅。</li>
<li>关注用户体验<ul>
<li>不爽的地方不要习惯，而是要去改变。<ul>
<li>专注目标，以目标的维度去思考，不要让别人费事的去猜。</li>
<li>做自己会用的产品</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="从学生到工程师"><a href="#从学生到工程师" class="headerlink" title="从学生到工程师"></a>从学生到工程师</h2><p>本章主要论述了从学生进行校园招聘到入职实习后作者的一些感悟，对于未毕业的学生还是可以一看的。已经工作的同学，就略过吧~~</p>
<h2 id="野生程序员的故事"><a href="#野生程序员的故事" class="headerlink" title="野生程序员的故事"></a>野生程序员的故事</h2><blockquote>
<p>这一章是这本书争议比较大的地方，甚至在csdn上面也引起了广泛的讨论。主要的争议点在于作者的“野生程序员”观点，引起了小公司技术者的反弹。</p>
</blockquote>
<p>除了对野生程序员的讨论，本章中另一有益的讨论是针对大公司和创业公司。<br>大公司可以给你的：</p>
<ul>
<li>较小的风险</li>
<li>技术最佳实践</li>
<li>垂直专精的技能</li>
<li>服务海量用户的经验</li>
<li>软技能</li>
<li>人脉</li>
<li>心态</li>
</ul>
<p>由此而见，作者本人是比较喜欢大公司的。不过根据《黑客与画家》中的观点，大公司会让你的公司没有可放大性与可衡量性。究竟如何选择，就是仁者见仁，智者见智了。</p>
<h2 id="工程师事业指南"><a href="#工程师事业指南" class="headerlink" title="工程师事业指南"></a>工程师事业指南</h2><p>对技术人员而言，职业生涯的发展非常重要。《您就是极客》中提出了对软件工程师而言最重要的三点：技术、成长和声望。</p>
<p>为啥架构师那么火？就是因为他看起来对所有的问题都知道答案。如果你是团队中这样的角色，那么可以说你非常重要。所以首先对你来说就是成为那个什么都懂得家伙。</p>
<p>其次对你来说重要的是积累你的作品集。作品集其实是想别人（老板、潜在老板、志同道合者）的展示窗口。github显然是程序员最重要的作品集之一。而对于高逼格的设计师来说，dribble则是更好的选择。同时github提供的静态页面托管服务对于不想费力租赁机器搭建网站的人来说，也是一个很好的选择。</p>
<h2 id="全栈工程师眼中的HTTP"><a href="#全栈工程师眼中的HTTP" class="headerlink" title="全栈工程师眼中的HTTP"></a>全栈工程师眼中的HTTP</h2><p>http协议是web开发绕不开的关键点，但是前后台对其理解都有不同。<br>Http版本，现存最多的还是http1.1，而大部分的浏览器和服务器server都已经支持http/2了。<br>从前端的角度来看，有很多http的优化方式:</p>
<ul>
<li>减少请求</li>
<li>合并同域请求</li>
<li>减少同域内请求以规避达到同域并发上线</li>
<li>传输内容缩减</li>
<li>雪碧图</li>
<li>代码、html gzip压缩</li>
<li>静态资源单独部署</li>
<li>各类缓存（cdn、浏览器缓存）</li>
</ul>
<p>而从后台来看则是另外的一种场景：</p>
<ul>
<li>关注服务器最大连接数</li>
<li>关注服务器网络模型</li>
<li>必须防范DDos攻击</li>
</ul>
<p>BigPipe：提供针对一次http请求，服务器返回多次的结果，从而规避过多的建立连接过程。事实上大数据时候，http server本来就会分块传输。</p>
<h2 id="高性能网站的关键：缓存"><a href="#高性能网站的关键：缓存" class="headerlink" title="高性能网站的关键：缓存"></a>高性能网站的关键：缓存</h2><p> 本章主要是从基本概念的维度介绍了一下缓存，从服务器缓存到浏览器缓存两大门类。<br>服务器缓存则分为：</p>
<ul>
<li>数据库缓存（读多写少的场景）</li>
<li>memcache：闻名的web缓存，支持分布式，但不支持无痛扩展。</li>
<li>文件缓存</li>
<li>静态化：叫缓存可能不准确了，更多是加速。</li>
</ul>
<p>浏览器缓存：</p>
<ul>
<li>expires：设置过期时间，无须交互</li>
<li>last-modified：需要和服务器简单交互一次，304</li>
<li>cache-control：新的倒计时式的缓存</li>
</ul>
<p>作者推荐的浏览器缓存最佳实践：</p>
<ul>
<li>对于动态生成的HTML页面使用Https头：Cache-control：no-cache</li>
<li>对于静态HTML页面使用HTTPS头：Last-modified</li>
<li>其他文件类型设置Expires头，并在文件内容修改时，更改Query String(现在的前端构建都是通过修改文件名的方式了。)。</li>
</ul>
<h2 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h2><p>作者在本章提出了大前端的概念，这也是最近在前端业界被提的比较多的一点。<br>比较有参考价值的是作者提出的前端知识体系：<br>初级工程师：</p>
<ul>
<li>对浏览器兼容性的了解</li>
<li>对HTML/CSS/JavaScript语法和原理的理解</li>
<li>对编辑器和插件的熟悉程度</li>
<li>对调试工具的了解程度</li>
<li>对版本管理软件的熟悉和应用经验</li>
<li>对前端库/框架的使用</li>
<li>标准/规范</li>
</ul>
<p>中级工程师：</p>
<ul>
<li>对代码质量、代码规范的理解</li>
<li>对Javascript单元测试的熟悉</li>
<li>对性能优化的应用和理解</li>
<li>对SEO的应用和理解</li>
<li>代码部署</li>
<li>移动web</li>
</ul>
<p>高级工程师：</p>
<ul>
<li>代码架构</li>
<li>安全</li>
<li>对自动化测试的理解</li>
</ul>
<p>一家之言，不过大家需要的可以自行对照参考。</p>
<h2 id="向移动端转型"><a href="#向移动端转型" class="headerlink" title="向移动端转型"></a>向移动端转型</h2><p>移动端转型是大势所趋，因为大家在手机上花费的浏览时间越来越长了。<br>移动端可以参与的主要有：</p>
<ul>
<li>IOS原生App</li>
<li>Android原生App</li>
<li>Windows Phone原生App</li>
<li>Web App</li>
<li>混合模式App（最近热的发烫的reactor）</li>
</ul>
<p>本章在讨论移动端的同时也强调了一个观点：</p>
<blockquote>
<p>让市场认可你的能力，而不是让老板认可，因为老板会变，老板的标准不一致，而市场是一致的。</p>
</blockquote>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>对于服务端和前端开发而言，由于没有客户端和移动app端的集成开发环境，比较难打通包括版本控制、包管理、依赖关系、持续集成在内的流程。</p>
<p>版本控制软件中，SVN与GIT难解难分。本质上是集中管理å分布式代码管理之争。这里不展开，但是提供一些版本控制的最佳实践：</p>
<ul>
<li>鼓励频繁的提交</li>
<li>确定分支流程：feature分支和bug修复分支是必须的</li>
<li>定义主干原则：主干必须可以随时上线</li>
<li>不要把逻辑修改和代码格式化混在一起</li>
<li>不想干的代码分开提交</li>
<li>保持工作代码库干净：适当的ignore</li>
</ul>
<p>包管理中，node的npm做的非常出色。经历过java的maven那一套的都能理解npm做的有多好，多简单。同时作者还推介了bower作为新的包管理工具，这适用于有很多前端版本js库的情况。</p>
<p>最后本章讨论了构建工具：</p>
<ul>
<li>首先必须有良好架构</li>
<li>具备合适的分离粒度，区分全局、局部组件</li>
<li>最小知识原则：组件和对象不应暴露细节</li>
<li>DRY：特殊功能不应存在多个副本</li>
<li>最小化预先设计：选择器这类组件，必须留下自定义空间，不限死排列</li>
<li>一致且可执行的命名规则</li>
<li>完成了良好架构，接下来就是grunt、gulp等javascript构建工具的登场</li>
</ul>
<h2 id="理解编程语言"><a href="#理解编程语言" class="headerlink" title="理解编程语言"></a>理解编程语言</h2><p>本章更多是以一种白话的方式老生常谈了程序界经常讨论的问题：是语言重要还是对算法和系统的理解更重要。<br>当然最终作者没有也无法给出答案，这个只能读者自己来思考了。</p>
<h2 id="全栈游乐场"><a href="#全栈游乐场" class="headerlink" title="全栈游乐场"></a>全栈游乐场</h2><p>全栈工程师的游乐场是VPS，随着阿里云、腾讯云、AWS的大力推广，现在获取VPS的成本也越来越低了。<br>获取自己的VPS并搭建自己网站最大的好处就在于它可以给你一览网站的全貌，而不再是局限在自己的技术栈中。<br>作者在本章也给出了使用VPS的一般入门，有兴趣的同学可以关注下。</p>
<h2 id="软件设计方法"><a href="#软件设计方法" class="headerlink" title="软件设计方法"></a>软件设计方法</h2><p>本章作者主要介绍了常见的设计模式，比较有料的是介绍了Web开发中的MVC这种架构模式。同时也列举了一些不同语言中常见的MVC框架：</p>
<ul>
<li>Javascript mvc framework：AngularJS、backbone.js</li>
<li>Php：CakePHP、Yii、Codeigniter</li>
<li>Objective-C: Cocoa</li>
<li>Ruby mvc framework：Ruby on Rails</li>
<li>Nodejs：Sail.js Total.js Express</li>
</ul>
<h2 id="高效工程师"><a href="#高效工程师" class="headerlink" title="高效工程师"></a>高效工程师</h2><p>效率在现在快节奏的职场中越来越重要。对于工程师来说，必须做到：</p>
<ul>
<li>不断学习</li>
<li>阅读英文资料</li>
<li>加入技术社区</li>
<li>善用搜索引擎</li>
<li>时间管理</li>
<li>时间管理四象限：要忙，但是不要瞎忙</li>
<li>消除重复的工作：善用脚本，善用工具</li>
<li>给自己留出专注的时间</li>
<li>番茄工作法</li>
<li>跨界思考</li>
<li>智商头脑风暴</li>
</ul>
<h2 id="学习设计"><a href="#学习设计" class="headerlink" title="学习设计"></a>学习设计</h2><p>对工程师来说，了解设计，对设计有感觉非常的重要。<br>作者这里推荐了一本《写给大家看的设计书》，着重强调了设计的四大基本理论：</p>
<ul>
<li>亲密性</li>
<li>对齐</li>
<li>重复</li>
<li>对比</li>
</ul>
<p>对这些理论的理解能够让我们在coding的同时，也能停下来看看自己的产品究竟做的如何。</p>
<h2 id="全栈思维"><a href="#全栈思维" class="headerlink" title="全栈思维"></a>全栈思维</h2><blockquote>
<p>一个人的价值，体现在他能够承担的责任。</p>
</blockquote>
<p>市场越成熟，这句话应该就越对。<br>同时作者强调了沟通能力在全栈能力中的重要作用：</p>
<ul>
<li>针对目标听众</li>
<li>诉诸对方的利益</li>
<li>找到方法</li>
<li>金字塔原则：任何事情都可以归纳出一个中心论点。</li>
<li>向上表达自己的想法:</li>
<li>立场足够简单，围绕这一立场沟通</li>
</ul>
<h2 id="书单汇总"><a href="#书单汇总" class="headerlink" title="书单汇总"></a>书单汇总</h2><p>《专业主义》<br>《重来》<br>《精益创业》<br>《写给大家看的设计书》<br>《打造facebook》<br>《您就是极客》<br>《代码整洁之道》<br>《精益创业》<br>《黑客与画家》<br>《卓有成效的管理者》<br>《编程的本质》<br>《图解HTTP》<br>《高性能网站建设进阶指南》<br>《从0到1：开启商业与未来的秘密》<br>《代码的未来》<br>《禅与摩托车维修艺术》<br>《只是为了好玩：Linux之父林纳斯自传》<br>《卓有成效的程序员》<br>《软件随想录》<br>《金字塔原理》<br>《卓有成效的管理者》<br>《安静：内向性格的竞争力》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书年初的时候在班车上面翻了一遍。刚开始的时候对其中很多观点不以为然，认为太浅。不过后来再翻一次的时候，不少东西还是很有启发意义，因此加以推介，涉及到作者观点、大纲，有兴趣的同学可以自行阅读，加以判断。非常适合对全栈感兴趣，但对某一细分技术还不甚了解的同学。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>书影 | 管中窥豹，读《淘宝技术这十年》 上</title>
    <link href="http://meijing0114.com/2016/02/21/book009/"/>
    <id>http://meijing0114.com/2016/02/21/book009/</id>
    <published>2016-02-21T09:22:02.000Z</published>
    <updated>2016-08-07T09:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本书断断续续，竟然读过了一个新年的时间跨度。并非是要找借口，但自己的感觉：这种书其实读起来蛮累的，碎片化的时间加上作者东一耙，西一铲的叙述，还有以下两点：</p>
<ul>
<li>首先如果你把它当一本励志故事书来看的话，这本书可没那么轻松，间或夹杂着马云爸爸、淘宝初创人员的励志与猎奇的故事，但是还没等你那碗鸡汤入口，一个不小心，就是技术细节了。</li>
<li>而如果你把它当一本技术书来看的话，这本书更不轻松。淘宝技术的十年发展，从一个人的眼中望去，就像多汁但难以消化的顶级牛排，很多地方浅尝辄止，一口咬下去，得消化半天。观者一方面是开了眼界，觉得这些技术简直不是一般的牛，细节都不敢想。另一方面，想再深入了解一些的时候，却发现少了一些深度，留下了太多的开放式问题，让你觉得不知道简直不好意思。双重折磨之下，只好抓嘴挠腮，只恨自己在技术上的积累太少。</li>
</ul>
<p>所以说，如果你既想要看故事，又想要了解细节。<a href="http://book.douban.com/subject/2343878/" target="_blank" rel="external">《阿里巴巴神话》</a> 和<a href="http://book.douban.com/subject/25723064/" target="_blank" rel="external">《大型网站技术架构》</a> 是两道非常不错的佐料。想看故事的人，搭配第一本，这样高层和底层都看到了。想看技术的人，把《架构》这本书当做工具书，不懂翻一下，收益也是颇多。</p>
<p>淘宝网从买来的网站框架起步，到如今这样的一个复杂的架构。经历了好几轮的重构和优化。对于想了解其中波折的人来说，值得一看。但对技术同学来说，对其过往需要的是理顺，知其所以然，但更应该把重心放在现有的淘宝比较成熟的架构的研究上面来，考虑如何取其精华，为我所用。</p>
<p>纵观整个淘宝的发展历程，启示颇多：</p>
<h2 id="首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。"><a href="#首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。" class="headerlink" title="首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。"></a>首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。</h2><p>淘宝网也不是一天建成的，架构在最初也无法做到最合理，技术应该以满足业务为第一要务，以适应业务发展为加分项，以盲目追求技术为大忌。</p>
<p>03年，刚开始做淘宝的时候，考虑的一个因素就是快。所以网站的第一版是买来的“php auction”。那些参与第一版的开发人员，每个人都是技术牛人，从实力上来说，都可以独立写出php auction，但不这么做的原因，是这样只会拖累业务发展的后腿。我个人感觉这是淘宝技术的第一阶段，叫做业务撵着技术走。技术可以说是疲于奔命，速度第一，埋下不少坑是肯定的，但是关键顶住了。<br>这个阶段同时也包括淘宝的硬件升级，从mysql到oracle，硬盘和小型机，各种商用，怎么贵怎么来。这个阶段，兵来将挡水来土掩，技术上算是顶住了。</p>
<p>但是随着业务的发展，单纯的累加已经不起作用了，必须从底层改造。这才触及了第一次到Java网站的升级。这次升级更多是语言层面的，复用了非常多优秀的java组件。技术在业务的压力下被迫忍痛切换，但是这却为之后的扩展打下了坚实的基础。这个阶段，技术不再那么滞后于业务，而是迎头赶上了。优秀的DBA，优秀的MVC架构，都是在这个阶段打下的，逻辑层可以说已经能够完全支持到业务了。</p>
<p>而现行的阶段，则是技术不断突破，创造自己的技术，并且在很多方面走到了业务的前面。这个阶段我们看到大量优秀的技术创新组件出现了。如淘宝文件系统TFS，淘宝KV缓存系统Tair。同时，分布式电子商务操作系统的理念也被提出。通过服务化的设计，辅以高性能中间件的支撑，开始给业务发展提供动力。</p>
<p>从这几个阶段可以看出，不断发展的业务和技术必须相辅相成，很难说是哪一方造就了哪一方。但是对我们来说，从中汲取的更应该是在技术选型和架构时的思考和审慎。好的架构不应拖业务后腿，而应不断提供向前的助力。</p>
<h2 id="其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。"><a href="#其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。" class="headerlink" title="其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。"></a>其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。</h2><p>比如开发和引入了LVS的章文蒿博士，他的贡献在于对高性能、高扩展性、高可用和低成本的基础平台的打造。尤其是他提出的GreenCompute项目，以节省能源为目的来不断的提升整个系统方方面面的性能，从CDN到低功耗到高性能，不得不说令人耳目一新。</p>
<p>而提出了开放平台的淘宝首席架构师王文彬，为淘宝的针对B侧市场的开发助力很多。他并发第一个提出，但却践行的非常好。一个开放平台，脏活累活很多。一方面需要对接大量的内部业务，说服、推动他们开放，有时候甚至要思考让他们如何开放。另一方面，则是开放到外部之后，稳定性和安全性比其他任何的业务都要更加保证。面对流水般的api调用，一旦稳定性不好，大量第三方应用都会挂掉。一旦安全性没保障，大量用户数据可能泄露。这都对开放的决心和技术提出了很高的挑战。进来风头比较劲的微信开放平台，也是如走钢丝一般，逐步开放自己的体系。可以说开放共赢创建生态是大势，而技术必须要为之保驾护航。</p>
<p>不得不提的还有顶住压力引入规范研发流程的空闻大师。从硅谷空降而来的他践行了持续集成、自动化测试和回归的研发流程。很多时候在业务的催促之下，会产生很多烂代码。但与其让不稳定的代码污染线上，造成往复的开发，还不如从一开始就杜绝。能够承担这种业务的压力，并做到这么果断的，确实值得佩服。看似业务的上线时间在短期因此而被延长了，但可靠性却大大提高了。这是个典型的，“长痛不如短痛”的例子。</p>
<p>这也说明了不断吸取新的思想多么重要，固守老的流程往往会拖业务的后腿。不敢尝试新的技术也会让技术停滞不前。</p>
<h2 id="从产品的创新性上来看，淘宝更多是顺应时势。"><a href="#从产品的创新性上来看，淘宝更多是顺应时势。" class="headerlink" title="从产品的创新性上来看，淘宝更多是顺应时势。"></a>从产品的创新性上来看，淘宝更多是顺应时势。</h2><p>2004年，成功的阿里巴巴，马云产生了做淘宝的想法。而在ebay和易趣激战正酣的时候通过技术人员封闭开发推出淘宝网，足以显示其快准狠的特性。尽管大网站被ebay封杀，但中小网站投放的广告策略、灵活的决策和与ebay的重重审批流程相比而言高效的执行效率，最终杀出了淘宝这么一匹黑马。从创新上而言，淘宝做了一些适应国内情况的优化，比如商家不收费，允许买卖双方沟通、交易，这些都是煽风点火，促使淘宝网不断发展壮大。</p>
<p>而在salesforce风头正劲的时候提出“work at Alibaba”的工作平台。并且一旦认准了之后，大力投入。现在淘宝的生态体系中，B侧开发的商家和企业非常之多，他们利用了淘宝提供的各种各样的数据，组合出用户需要的各式功能，充分丰富了整个生态，这也是淘宝让人感觉无可撼动的重要原因之一。</p>
<p>总体而言，淘宝发展亦步亦趋，始终不离大势，不犯大错，在牛掰技术的支撑下最终形成现在这样的一个庞大、复杂、但流转顺畅的生态系统。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书断断续续，竟然读过了一个新年的时间跨度。并非是要找借口，但自己的感觉：这种书其实读起来蛮累的，碎片化的时间加上作者东一耙，西一铲的叙述，还有以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先如果你把它当一本励志故事书来看的话，这本书可没那么轻松，间或夹杂着马云爸爸、淘宝初创人
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>译术 | SQL vs NoSQL：异同比较</title>
    <link href="http://meijing0114.com/2016/01/17/translate001/"/>
    <id>http://meijing0114.com/2016/01/17/translate001/</id>
    <published>2016-01-17T15:46:38.000Z</published>
    <updated>2016-01-17T15:28:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者按：SQL与NoSQL之争近年来十分受到关注，既存在“SQL吃遍天下”这种理念，也不乏“NoSQL一定代表着先进生产力”这种谬误。争者往往不求甚解，为弄潮而争，忽略了本质。这篇文章原文地址：<a href="http://www.sitepoint.com/sql-vs-nosql-differences/" target="_blank" rel="external">http://www.sitepoint.com/sql-vs-nosql-differences/</a> 作者对SQL与NoSQL在多个层面进行了细致的比较。值得一读。</p>
</blockquote>
<p>SQL（结构化查询语言）数据库成为主流的数据存储机制已经存在了80余年。在1990年代末，随着web应用和诸如MySQL、PostgreSQL和SQLite这类开源项目的兴起，SQL随之得到爆发式应用。</p>
<p>NoSQL数据库产生于1960年代，但是最近才出现了一些类似于MongoDB、CouchDB、Redis和Apache Cassandra这样的流行选择。</p>
<p>你可能会看到很多探讨如何使用SQL或NoSQL的某个特性的文章。对如何从中二选一的讨论却并不多见。我希望能填补这个空白。这篇文章中，我们会覆盖到最基本的差异。而接下来会有一篇文章针对典型的场景讨论数据存储的最优选择。</p>
<p>大多数例子适用于流行的MySQL SQL数据库和MongoDB NoSQL数据库。其他的SQL/NoSQL数据库是类似的，但是在特性和语法上可能略有不同。</p>
<h2 id="SQL与NoSQL的神圣战争"><a href="#SQL与NoSQL的神圣战争" class="headerlink" title="SQL与NoSQL的神圣战争"></a>SQL与NoSQL的神圣战争</h2><p>在进一步讨论之前，让我们先来修正一些普遍的谬误：</p>
<h3 id="谬误：-NoSQL比SQL更好-差"><a href="#谬误：-NoSQL比SQL更好-差" class="headerlink" title="谬误： NoSQL比SQL更好/差"></a>谬误： NoSQL比SQL更好/差</h3><p>有些项目更适合使用SQL数据库。有些则更适合NoSQL。 还有些则能配合使用。这篇文章不是想在两者之间决出一个胜者，因为你不可能在所有的场景下都应用同样的假设。</p>
<h3 id="谬误：-NoSQL和MySQL之间有着清晰的鸿沟"><a href="#谬误：-NoSQL和MySQL之间有着清晰的鸿沟" class="headerlink" title="谬误： NoSQL和MySQL之间有着清晰的鸿沟"></a>谬误： NoSQL和MySQL之间有着清晰的鸿沟</h3><p>这不一定是对的。有些SQL数据库正在加入NoSQL的特性，反之亦然。这两者的界限很可能会越来越模糊。而新的混合数据库能在未来提供有趣的选择。</p>
<h3 id="谬误：编程语言-框架-决定了数据库"><a href="#谬误：编程语言-框架-决定了数据库" class="headerlink" title="谬误：编程语言/框架 决定了数据库"></a>谬误：编程语言/框架 决定了数据库</h3><p>我们越来越习惯各种各样的技术栈：</p>
<ul>
<li>LAMP: linux, Apache, MySQL(SQL), PHP</li>
<li>MEAN: MongoDB(NoSQL), Express, Angular, Node.js</li>
<li>.NET, IIS和SQL Server</li>
<li>Java, Apache和Oracle</li>
</ul>
<p>这些技术栈产生可以归于应用的，历史上的和商业上的原因，但别被限死了。 你当然可以在你的PHP或.NET项目使用MongoDB的NoSQL数据库。你也可以在Node.js里面连接MySQL或SQL SERVER。可能你没法找到那么多教程和资源，但是你的需求本身应该决定数据库的类型，而不是编程语言。<br>（这意味着，别给自己故意挖坑！原则一个不常见的技术组合或SQL和NoSQL的混合式可能的，但是在寻求帮助和找到有经验的开发者方面会遇到不少困难<br>）<br>记住了这些，让我们来看看异同的比较。</p>
<h2 id="SQL的表-vs-NoSQL的文档"><a href="#SQL的表-vs-NoSQL的文档" class="headerlink" title="SQL的表 vs NoSQL的文档"></a>SQL的表 vs NoSQL的文档</h2><p>SQL数据库提供了一族相关的数据表。举例来说，如果你在运营一个线上的书店，书的信息可以被加入到一个叫<strong>book</strong>的表。</p>
<table>
<thead>
<tr>
<th>ISBN</th>
<th style="text-align:center">title</th>
<th style="text-align:right">author</th>
<th style="text-align:right">format</th>
<th style="text-align:right">price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9780992461225</td>
<td style="text-align:center">JavaScript: Novice to Ninja</td>
<td style="text-align:right">Darren Jones</td>
<td style="text-align:right">ebook</td>
<td style="text-align:right">29.00</td>
</tr>
<tr>
<td>9780994182654</td>
<td style="text-align:center">Jump Start Git</td>
<td style="text-align:right">Shaumik Daityari</td>
<td style="text-align:right">ebook</td>
<td style="text-align:right">29.00</td>
</tr>
</tbody>
</table>
<p>每一行都是一条不同的书德尔记录。这种设计是比较苛刻的，你没法使用同样的表去存储不同的信息或者在是数字类型的字段插入字符串。</p>
<p>NoSQL数据库存储类JSON的键值对文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00</div><div class="line">                    &#125;</div></pre></td></tr></table></figure>
<pre><code>相似的文档可以被存储进一个**集合**，这跟SQL表十分类似。但是，在文档里面你可以存储任何形式的数据，NoSQL数据库并不会抱怨：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                year: 2014, </div><div class="line">                    format: &quot;ebook&quot;, </div><div class="line">                        price: 29.00, </div><div class="line">                            description: &quot;Learn JavaScript from scratch!&quot;, </div><div class="line">                                rating: &quot;5/5&quot;, </div><div class="line">                                    review: [ </div><div class="line">                                            &#123; name: &quot;A Reader&quot;, text: &quot;The best JavaScript book I&apos;ve ever read.&quot; &#125;, </div><div class="line">                                                    &#123; name: &quot;JS Expert&quot;, text: &quot;Recommended to novice and expert developers alike.&quot; &#125; </div><div class="line">                                                        ]</div><div class="line">                                                        &#125;</div></pre></td></tr></table></figure>

                                                        SQL表创建的是严格的数据模板，所以你很难犯错。而NoSQL更加灵活，但是能够在任何地方存储数据可能会导致持续的问题。

                                                        ## SQL架构 vs NoSQL去架构
                                                        在一个SQL数据库中，在你确定表和字段类型这些架构之前是无法添加数据的。SQL架构还可能包括其他的信息：
                                                        * primary keys: 主键，就像ISBN一样标示了唯一的一条记录
                                                        * indexs: 索引，经常被查询的字段会被加上索引来提高检索速度
                                                        * relationships: 关系，数据字段之间的逻辑联系
                                                        * 诸如存储过程和触发器这样的机制

                                                        你的数据架构一定要在实现任何操作数据的应用逻辑之前被设计和实现出来。尽管之后再修改是可行的，但是大量的变更会非常复杂。

                                                        在NoSQL数据库中，数据可以被非常灵活的添加。并不需要事先进行字段设计和表的设计。比如说，在MongoDB中，下面的命令会在**book**表中创建一条新的记录，如果**book**表不存在，那它也会被同时创建：
                                                        <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.book.insert(</div><div class="line">    ISBN: 9780994182654, </div><div class="line">        title: &quot;Jump Start Git&quot;, </div><div class="line">            author: &quot;Shaumik Daityari&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00</div><div class="line">                    );</div></pre></td></tr></table></figure>

                                                                            (MongoDB会自动在表中添加一条唯一的_id字段，随后你也可以对索引进行定义。)

                                                                            一个NoSQL数据库可能更适合初始数据形式很难确定的项目中。但这并不意味着，你可以因此而偷懒：在项目开始的时候忽视设计正确的数据表，可能会在之后引入问题。

                                                                            ## SQL 中心化 vs NoSQL去中心化
                                                                            假定我们需要往book数据库中添加出版社信息。在SQL数据库中，一个出版社会包含多个标题，我们创建了一张新的**publisher**表：

                                                                            | id | name | country | email | 
                                                                            | ------------- |:-------------:| -----:| -----:| 
                                                                            | SP001 | SitePoint | Australia | feedback@sitepoint.com | 

                                                                            我们可以在**book**表里面添加一个**publisher_id**字段，来作为**publisher.id**的外键。

                                                                            | ISBN | title | author | format | price | publisher_id|
                                                                            | ------------- |:-------------:| -----:| -----:| -----:| ----:|
                                                                            | 9780992461225 | JavaScript: Novice to Ninja | Darren Jones | ebook | 29.00| SP001|
                                                                            | 9780994182654 | Jump Start Git | Shaumik Daityari | ebook | 29.00| SP001|

                                                                            这使得数据冗余被最小化，我们不必为每本书重复出版社的信息--只需要创建外键就行了。这种技术被称为中心化，而且也确实很有益处。我们可以在不用修改**book**的数据的前提下更新出版社信息。

                                                                            在NoSQL中我们也可以使用中心化的技术。看一下在**book**集合中得一条文档：
                                                                            <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00, </div><div class="line">                        publisher_id: &quot;SP001&quot;</div><div class="line">                        &#125;</div></pre></td></tr></table></figure>

                                                                                                    -- 引用了一条在**publisher**集合中得一条文档：
                                                                                                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    id: &quot;SP001&quot; </div><div class="line">        name: &quot;SitePoint&quot;, </div><div class="line">            country: &quot;Australia&quot;, </div><div class="line">                email: &quot;feedback@sitepoint.com&quot;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>

                                                                                                                    然而这有的时候却并不实际。更希望的是能够把数据去中心化，对每一个**book**重复冗余的**publisher**.

                                                                                                                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00, </div><div class="line">                        publisher: </div><div class="line">                            &#123; </div><div class="line">                                    name: &quot;SitePoint&quot;, </div><div class="line">                                            country: &quot;Australia&quot;, </div><div class="line">                                                    email: &quot;feedback@sitepoint.com&quot; </div><div class="line">                                                        &#125;</div><div class="line">                                                        &#125;</div></pre></td></tr></table></figure>

                                                                                                                                                                            这会使我们查询的更快，但是再多条记录中更新publisher信息，会非常的慢。

                                                                                                                                                                            ## SQL关系型的JOIN vs NoSQL
                                                                                                                                                                            SQL查询提供了强劲的JOIN语法。我们可以使用一条SQL语句在多个数据表中获取关系数据库。举例来说:
                                                                                                                                                                            <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT book.title, book.author, publisher.nameFROM bookLEFT JOIN book.publisher_id ON publisher.id;</div></pre></td></tr></table></figure>

                                                                                                                                                                            这个语句会返回所有的书的标题，作者以及相关的出版人姓名。（假设出版人姓名存在）
                                                                                                                                                                            NoSQL没有相对应的JOIN，这可能对那些熟练使用SQL的人非常不习惯。如果我们使用中心化的NoSQL集合，那我们需要拉取所有的book文档，再获取所有的publisher文档，再手动的通过程序逻辑来把两者联系起来。这也是为什么对NoSQL往往使用去中心化的方式很有必要。


                                                                                                                                                                            ## SQL vs NoSQL 数据完整性
                                                                                                                                                                            大部分的SQL数据库允许你通过外键限制的方式来强制的保证数据完整性。（除非你还在使用MySQL中得陈旧 不再被维护的MyISAM引擎）我们的book数据表能够：
                                                                                                                                                                            * 保证所有的book数据能够有一个合法的对应在pubilisher表中得publisher_id
                                                                                                                                                                            * 如果有book数据引用了publisher信息，那么这条数据不能被删除
                                                                                                                                                                            这种模式强制了数据库应该遵循的规范。对于开发者或者用户而言，无法在可能引入孤儿数据或非法数据的情况下，对数据条目进行编辑或删除。但是在NoSQL中却没有类似的数据完整性保证。你可以不管其他的文档，只存储你想要存储的内容。理想的情况下，一个数据条目应该成为关于一个事物的唯一信息来源。

                                                                                                                                                                            ## SQL vs NoSQL 事务
                                                                                                                                                                            在SQL数据库中，两条或多条更新语句能够在一个事务（保证成功或失败回滚的机制）中被同时执行。举例来说，假设book数据库包含订单和库存两张表。当一本书被订购的时候，我们需要往订单表添加一条数据，然后在库存表中将库存字段减一。如果我们把这两条更新语句独立执行，一条可能失败，另一条可能成功。因此会造成数据的不同步。而把他们通过事务的方式执行，就能保证一起成功或一起失败。
                                                                                                                                                                            在NoSQL数据库中，对单个文档的修改是原子的。也就是说，如果你在文档中更新三个字段，那么要么三个字段同时更新，要么都不变。但是对于多条文档的更新而言却没有事务。不过有一个类事务的选项（http://docs.mongodb.org/manual/core/write-operations-atomicity/）。不过在写这篇文章的时候，这些还都需要你在代码里自行处理。

                                                                                                                                                                            ## SQL vs NoSQL CRUD 语法
                                                                                                                                                                            创建、读取、更新和删除数据是所有数据库系统的基础。本质上来说：
                                                                                                                                                                            * SQL是轻量级的解释性语言。语法强大，并且已经成为了国际标准。尽管大多数系统实现语法的时候略有不同。
                                                                                                                                                                            * NoSQL数据库使用带json参数的类javascript语言一样的查询。基本的操作比较简单，但是对于更复杂的查询来说，嵌套的JSON会非常的繁复。
                                                                                                                                                                            一个快速的对比：

                                                                                                                                                                            | SQL | NoSQL  | 
                                                                                                                                                                            | ------------- |:-------------:| 
                                                                                                                                                                            | SP001 | SitePoint | 
                                                                                                                                                                            |插入一条book记录|
                                                                                                                                                                            |```INSERT INTO book ( `ISBN`, `title`, `author`)VALUES ( &apos;9780992461256&apos;, &apos;Full Stack JavaScript&apos;, &apos;Colin Ihrig &amp; Adam Bretz&apos;);```|```db.book.insert({ ISBN: &quot;9780992461256&quot;, title: &quot;Full Stack JavaScript&quot;, author: &quot;Colin Ihrig &amp; Adam Bretz&quot;});```|
                                                                                                                                                                            |更新一条book记录|
                                                                                                                                                                            |```UPDATE bookSET price = 19.99WHERE ISBN = &apos;9780992461256&apos;```|```db.book.update( { ISBN: &apos;9780992461256&apos; }, { $set: { price: 19.99 } });```|
                                                                                                                                                                            |返回所有$10以上的书的标题|
                                                                                                                                                                            |```SELECT title FROM bookWHERE price &gt; 10;```|```db.book.find( { price: { &amp;gt;: 10 } }, { _id: 0, title: 1 });```第二个JSON对象就是所谓的**projection**: 它设置了哪些字段要被返回 (_id字段是被默认返回的，所以需要覆盖它).|
                                                                                                                                                                            |计算所有SitePoint网站的书的数量|
                                                                                                                                                                            |```SELECT COUNT(1) FROM bookWHERE publisher_id = &apos;SP001&apos;;```|```db.book.count({ &quot;publisher.name&quot;: &quot;SitePoint&quot;});```这条语句假定使用了NoSQL的去中心化设计|
                                                                                                                                                                            |返回book的格式类型的数量|
                                                                                                                                                                            |```SELECT format, COUNT(1) AS `total`FROM bookGROUP BY format;```|```db.book.aggregate([ { $group: { _id: &quot;$format&quot;, total: { $sum: 1 } } }]);```这就是所谓的聚合：一个新的文档集合从原始的文档集合计算出来。|
                                                                                                                                                                            |删除所有的SitePoint书|
                                                                                                                                                                            |```DELETE FROM bookWHERE publisher_id = &apos;SP001&apos;;```|```db.book.remove({ &quot;publisher.name&quot;: &quot;SitePoint&quot;});```|

                                                                                                                                                                            ## SQL vs NoSQL 性能表现
                                                                                                                                                                            或许这是最有争议性的比较。NoSQL通常被认为势必SQL更快的。这并不奇怪。NoSQL更简单的去中心化存储允许你在单词请求中获取一个条目的所有信息。因此并不需要相关的JOIN或复杂的SQL查询。
                                                                                                                                                                            也就是说，你的项目设计和数据库设计的影响很大。一个被设计的很好的SQL数据库肯定比设计的很差的NoSQL数据库性能好很多，当然反之亦然。

                                                                                                                                                                            ## SQL vs NoSQL 扩容
                                                                                                                                                                            随着你数据的增加，你可能会觉得有必要把负载分布到多台服务器。对于基于SQL的系统来说，这有时候没那么容易。你如何分配相关的数据呢？集群化可能是最简单的选项；多个服务器访问相同的中心化存储 -- 但是即使这样也会有挑战。
                                                                                                                                                                            NoSQL简单地数据模型会使得扩容简单一些，很多NoSQL数据库一开始就自建了扩容的功能。不过当你遇到实际问题的时候，还是最好寻求专家的建议。

                                                                                                                                                                            ## SQL vs NoSQL 实用性
                                                                                                                                                                            最终，来考虑下安全和系统的问题。最流行的NoSQL数据库已经有几年了。不过它们相比于成熟的SQL产品，问题还是较多。不过大多数被报告的问题，还是因为一个原因：*知识不足*.
                                                                                                                                                                            开发者和系统管理者对新的数据库系统经验不足，因此不免会犯错误。如果因为NoSQL比较新鲜或者因为你想避免最终必会发生的范式设计而使用它，那么之后你很可能会遇到问题。

                                                                                                                                                                            ## SQL vs NoSQL 总结
                                                                                                                                                                            SQL和NoSQL数据库用不同的方式做着同样的事情。在刚开始选择一种，之后在进行切换时完全可行的，但是预先设计肯定会节省时间和金钱。
                                                                                                                                                                            **适用于SQL的项目：**
                                                                                                                                                                            * 可以被预先确定的逻辑相关的离散数据
                                                                                                                                                                            * 数据完整性是必须的
                                                                                                                                                                            * 需要具有丰富开发者经验和支持的标准技术的项目

                                                                                                                                                                            **适用于NoSQL的项目:**
                                                                                                                                                                            * 非关系型的、模糊的或是不断演进的数据存储需求
                                                                                                                                                                            * 简单、宽松的项目目标，能够快速的开始编程
                                                                                                                                                                            * 速度和可扩展性很有必要

                                                                                                                                                                            在
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者按：SQL与NoSQL之争近年来十分受到关注，既存在“SQL吃遍天下”这种理念，也不乏“NoSQL一定代表着先进生产力”这种谬误。争者往往不求甚解，为弄潮而争，忽略了本质。这篇文章原文地址：&lt;a href=&quot;http://www.sitepoi
    
    </summary>
    
      <category term="译术" scheme="http://meijing0114.com/categories/%E8%AF%91%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>读《大型网站架构》</title>
    <link href="http://meijing0114.com/2015/11/23/book008/"/>
    <id>http://meijing0114.com/2015/11/23/book008/</id>
    <published>2015-11-23T03:14:09.000Z</published>
    <updated>2016-08-11T01:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>大型网站技术架构这本书，囤积已久，最近终于有时间，从头到尾浏览了一遍。看这本书的原因，颇有一些功利性，说白了，就是冲着书名去的。大型网站架构一直心向往之，读完之后，收获也是颇多，值得向大家推荐。</p>
<p>曾经看到一本冯唐的零散文集，其中有篇文章印象颇深。他在文章的开头，提出了一个问题：如何写好一首诗。大唐盛世300年，诗人不计其数，但最终留下唐诗300首。这么个简单地问题，可以说上的上是让古往今来的诗人们前赴后继了。答案也很简单，先学，学到什么程度呢？从模仿开始，读遍前人之作，看遍前人所感，触类旁通，一步一个脚印。就好比攀爬终南山，不沿着前人的脚印，怎么爬到山顶一览众山小呢？</p>
<p>本书作者也表达了类似的观点，我想这点在技术上也是想通的。不多看看NB的技术是什么样子的？怎么会有能力做出与之媲美甚至是超越之的完美技术解决方案呢？</p>
<p>本书在思想上，除了这点启发之外，对架构的重视也值得一提。技术上得架构，类比于建筑业可以说是图纸设计，类比于广告业可以说是方案策划。但是不同之处在于，技术架构影响深远，而且由于应对的挑战随行业发展快速变化，因此必须足够灵活多变。这对架构提出了很高的要求，也正是本书吸引我的一点。</p>
<p>但是尽管书名看起来像是程序员专享，但作者仍然点出了，给用户提供有价值的产品和优秀的体验才是关键，这点每个互联网从业者应该都会赞同，至少都在内心有所追求。</p>
<p>技术上而言，这本书给我提供了一套体系。两年前开始接触web开发，零零散散做了不少的事情，也逐步建立了一些自己的体系，但与本书参照了之后，收获仍是颇丰。无本之木不牢，因此技术体系很重要。从MVC的模型，到Restful API，再到web优化的准则。这些体系化的说明，使得我的技术层次更加清晰，也更加脱离闷头乱撞的状态了。不过说到优化，根据自己的经验来看，对于一个编程基础不算太差，人也不笨的程序员来说，优化往往不是什么大问题。主要的问题在于找到优化点。计算机是一门科学，因此任何优化都应该是有理有据的，通过高效的工具和经验找到瓶颈再优化，比奢求瞎猫撞上死耗子，还是要靠谱一些的。而随着技术了解的深入，我们总是希望自己承担一些模块的设计，这也被很多公司认为是区分初级工程师和熟练工程师的分水岭。这件事要我说，跟打德州扑克很相似：你必须对自己的底牌足够了解，才能打得出一手好牌。要设计后端存储，你就必须知道mysql的特性、优化点、系统可能的瓶颈、存储量、redis的应用场景、维护手段。如果这些你都不了解，那做什么设计呢？可以想象的场景就是，面向用户的产品成了你的练兵场，存储不知不觉挂了，你才知道mysql到底该怎么用。除此之外，程序员应该是很懒的一批人，个人认为，技术成长，应该越“懒”越好。为啥上线要手动上传文件到服务器？这个时代还应该存在人肉测试么？新人来了还是要花一天安装和熟悉环境？机器磁盘都要爆了，还要凌晨四点手动清理？每个人的时间有限，作为程序员，真的要让自动化再多一点。与此同时，很多人把产品的发布作为一个里程碑，但却对产品的安全问题视而不见。安全的代码依赖于对漏洞的清晰认知、良好的编程习惯、流程保证与漏洞监测机制。当不安全的代码上线的时候，你就是为自己埋了一个很大很大的坑。。</p>
<p>除却这些技术上的启发和细节，本书在安利个人技术的成长上面，不吝笔墨。第一点应该是在最开始说的：阅尽好的东西，你才能写出接近甚至超越的代码。苹果的联合创始人沃兹在自传中讲述了自己成为电脑专家的过程：对电脑的狂热让他把市面上所有的机型都拆了又装，装了又拆，从熟悉到自己重新设计，他从copy，上升到了design。而第二点，则是不要沉迷于代码，甚至不要沉迷于架构。很多人国人沉迷于某项技术，因此会在不恰当的时候做出背离实际情况的坚持。熟悉web前端优化的同学都知道，CDN是个好东西，那些前端文件、静态资源，大可以通过CDN的方式来解决。但这并不意味着CDN是标准程序。结合成本、实际问题，应该量体裁衣。有时候基本的静态资源服务器，就可以实现网站的需求，并不一定要“奢侈”的接入CDN。就连维基百科，都是多种方式相互结合，而并非完全依靠CDN这个“圣杯”。最后一点，则是说架构师，这个职业方向，承担的责任很多，做的事情也需要更多的思考。有人说架构师最需要代码能力，有人说架构师最需要设计能力，有人说最需要带领团队。但是我最认同一位技术公司首席架构师的说法：架构师说到底，需要具有非常强的problem-solving的能力。这突破了技术的限制，让你能够调动自己所有的脑细胞和能力，来解决你团队遇到的技术、产品、等等问题。</p>
<p>作为一名程序员，遇到这本书十分的开心，接触到很多很赞的技术细节，也见识了作者架构的功力。这也让我更加期待接下来要看的《企业应用架构模式》了。不过在那之前，真诚推荐这本《大型网站技术架构》。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大型网站技术架构这本书，囤积已久，最近终于有时间，从头到尾浏览了一遍。看这本书的原因，颇有一些功利性，说白了，就是冲着书名去的。大型网站架构一直心向往之，读完之后，收获也是颇多，值得向大家推荐。&lt;/p&gt;
&lt;p&gt;曾经看到一本冯唐的零散文集，其中有篇文章印象颇深。他在文章的开头
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>你为谁辩护，谁为你辩护,观《辩护人》</title>
    <link href="http://meijing0114.com/2015/07/26/book007/"/>
    <id>http://meijing0114.com/2015/07/26/book007/</id>
    <published>2015-07-26T07:12:27.000Z</published>
    <updated>2015-07-26T07:13:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在德国，起初他们追杀共产主义者，我没有说话–因为我不是共产主义者； 接著他们追杀犹太人，我没有说话–因为我不是犹太人；後来他们追杀工会成员，我没有说话–因为我不是工会成员；此後他们追杀天主教徒，我没有说话–因为我是新教教徒；最後他们奔我而来，却再也没有人站起来为我说话了。</p>
</blockquote>
<p>朋友推荐这部片子的时候，心里十分好奇，到底这是一部什么样的片子。值得如此推荐。</p>
<p>看完之后，心中久久不能平复，加之最近个人事务缠身，因此对时代、社会和个人之间的关系，更有了一层感触和思考。</p>
<p>主人公宋佑硕是一个小人物奋斗的典型。白手起家，从只有高中毕业穷困潦倒的备考司法考试学生，到历尽艰辛的通过司法考试，再到另辟蹊径，通过代理房产登记发家致富，进而在律师界占有一席之地。这简直是一个赤裸裸的“韩国梦”的现实版。在别人看来，开豪车，住大房子，玩游艇，人生大反转的宋律师必须是一个成功人士和自己学习的典范。在一次同学会上，膨胀的宋律师完全无法理解被审查下的记者同学的苦闷，反而不断的输出自己老实人好好生活就好的价值观。最后的结果只能是，话不投机，打成一团。</p>
<p>但是一个契机却改变了他的整个人生。朋友的儿子因为参与了进步读书会，而被视为赤色分子。无路可走的母亲苦苦寻觅两个月，甚至探访了停尸间，都没找到自己的儿子。被苦苦哀求的宋律师，一开始却也不是全然应承，因为他不理解这个逻辑，不理解为什么会发生犯人不能被探视、抓了两个月却毫无消息的情况。同时的他也面临着职业生涯最大的机会，与全国第十的集团合作税务法律咨询。</p>
<p>抱着帮朋友找回儿子的心态，他要去试一试，要去当一下辩护律师，这个整个釜山律师界没人敢碰，避之不及的位置。结果一试不得了，整个世界观崩塌了。</p>
<p>第一次会面的困难重重；十二本禁书发现竟是随处可以买到的书籍；明显的刑讯逼供被视而不见；64公斤进去的小伙两个月只剩下50公斤；另一位律师的打算一开始竟是协商刑期，而不是是否有罪；。这样一波波的冲击，让宋律师愤怒，无助，歇斯底里，被一次次拉出法庭。但他也开始觉醒，思考，这一切究竟是为什么。无知者无畏，正是他不知道所谓这类“国安法案”都有约定俗成的解决套路，而是坚定的以卵击石，奋力抗争，才使得他尤其的可贵。其实麻木并不可怕，可怕的是在知道所有的真相之后，却习惯了麻木而无动于衷。不出所料的是，到手的项目没了，工作室被查税，家人被威胁，入法庭前被扔鸡蛋。但他的步伐却依然坚定，甚至比那些原本的进步人士更为坚定。因为他真正意识到了法律，法治的重要性。个人赚钱是一方面，但是个人在社会中，是无法剥离在大时代之外的。律师所的合伙人告诉他，“当你放弃了这个项目，你就是把自己安逸的生活一脚踢开了。”，但是他却没有后悔和退缩，因为“我不想让自己的孩子也生活在这样的社会中，我想你的孩子也是一样。”。对社会和家人更大的责任让他超越了对个人金钱和理想的追求。</p>
<p>可以说，他不是一个特别聪明的人，但是他有自己的门道，而且能够一直坚持。他是想要对社会有所贡献的，也希望这个社会越来越好，但他仅限于个人的价值和家人的幸福。而一切终结于这次辩护，他更了解了自己，也更了解了他所处在的社会。倾巢之下，安有完卵？正是这种正义感和使命感催使着他走着这条别人看来是不归路，但自己看来确是必须要迈出的一步。在看这部影片的时候，也顺便翻了一下影片中提到的光州事件，那真是黑暗的一页，相比之下，这部影片的结尾要温和一些。当宋律师因为一次集会被捕了之后，整个釜山的142名律师中，99位站出来为他辩护，这真是感人的一幕。</p>
<p>以前总觉得大时代，大事件都离自己很远很远。但恐怕这是因为自己闭塞的原因了。当你关心，投入其中的时候，你会发现个人与时代和社会，密不可分。个人有价值，社会有使命。人得一生路很长，也会经历很多。当需要你“辩护”的时候，可千万不要退缩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在德国，起初他们追杀共产主义者，我没有说话–因为我不是共产主义者； 接著他们追杀犹太人，我没有说话–因为我不是犹太人；後来他们追杀工会成员，我没有说话–因为我不是工会成员；此後他们追杀天主教徒，我没有说话–因为我是新教教徒；最後他们奔我而来，却再也
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>我读清醒思考的艺术 three</title>
    <link href="http://meijing0114.com/2015/05/26/book006/"/>
    <id>http://meijing0114.com/2015/05/26/book006/</id>
    <published>2015-05-26T02:44:02.000Z</published>
    <updated>2016-08-07T09:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我读《清醒思考的艺术》three"><a href="#我读《清醒思考的艺术》three" class="headerlink" title="我读《清醒思考的艺术》three"></a>我读《清醒思考的艺术》three</h1><p>应读者反馈，每次十条貌似有些太长了。因此减少至每次六条。同时标注，所用之图，均来自《清醒思考的艺术》原书。</p>
<h3 id="选择的悖论-—-为什么更多反而是更少"><a href="#选择的悖论-—-为什么更多反而是更少" class="headerlink" title="选择的悖论 — 为什么更多反而是更少"></a>选择的悖论 — 为什么更多反而是更少</h3><p>现代社会与以前完全不同了，其中重要的一点是，大部分人无需为了果腹而东奔西走。当你在原始丛林中面对烤肉和饥饿，选择是很容易做出的。但是当你打开大众点评，看到八大菜系和一众东西方料理，这时候感受到的，是一种痛苦。。</p>
<p>尽管有选择让我们幸福，但是太多的选择会降低生活质量，这称为“选择的悖论”。太多的选择给我们带来的第一个影响就是让我们无所适从。商场里琳琅满目，但是很可能导致我们挑花了眼，最终空手而归。</p>
<p>第二个影响则是选择范围大，导致我们做出更差的决定。假如你问一个小伙子他的择偶标准，那可能从思想到品德，从气质到人品，当然还有长相。但是接触到的女性太多，又无法一一了解，为了省力，所以只好归为单一的标准：好身材。</p>
<p>第三个影响则是，选择范围大让我们不满。不满的原因是，选择后的后悔。</p>
<p>为了克服这些影响，我们必须明白，永远作不出完美的选择。想要作出在事后看来无懈可击的选择是非理性的，因为事情的发展永远有无数种可能性。你必须定好一个标准，然后坚持它。是最好的才适合你么？恐怕不是，因为适合你的，才是最好的。</p>
<h3 id="讨喜偏误-—-你行为不理性，是因为你想讨别人喜欢"><a href="#讨喜偏误-—-你行为不理性，是因为你想讨别人喜欢" class="headerlink" title="讨喜偏误 — 你行为不理性，是因为你想讨别人喜欢"></a>讨喜偏误 — 你行为不理性，是因为你想讨别人喜欢</h3><p>讨喜偏误很应景最近的流行词：“这是一个看脸的世界”。 因为：</p>
<blockquote>
<p>某人越讨喜，我们就越倾向于从这个人那儿买点东西或者帮助他。</p>
</blockquote>
<p>这种偏误是一种心态，同时也被广泛的用于各类销售技巧中。那么什么是讨喜呢？</p>
<ol>
<li>颜值高</li>
<li>在出身、个性和兴趣上与我们相似</li>
<li>他觉得我们讨人喜欢</li>
</ol>
<p>广告中对此偏误的使用比比皆是。为什么偏偏“你值得拥有”，因为这会讨你的喜。恭维是种神奇的武器，“复制”对方的行为，也是销售中常见的技巧。为什么你会保护大熊猫而不是珍贵的蜘蛛，当然是因为大熊猫更可爱。</p>
<p>政治家对此的应用更加纯熟，他们会在面向不同人群的演讲中强调不同的共性。渲染一样的经历，从而让听众感同身受。“你的投票非常重要”，确实重要，但是微不足道。</p>
<p>所以当我们在判断一笔生意时应该坚持不受卖方影响。请你不要考虑他，更好的办法是：请你想象他是个不讨人喜欢的家伙。</p>
<h3 id="禀赋效应-—-请不要死抱着某种东西不放"><a href="#禀赋效应-—-请不要死抱着某种东西不放" class="headerlink" title="禀赋效应 — 请不要死抱着某种东西不放"></a>禀赋效应 — 请不要死抱着某种东西不放</h3><p>禀赋效应听起来可能有点绕口，但是这个效应在这个物质的年代无时无刻不包围着我们：“我们感觉我们拥有的东西比我们没有拥有的更有价值”。直白点说，结合最近看房子的经历，房东标价200万卖出去，那90%的可能他自己作为买主肯定不舍得出这个价！</p>
<p>所以呢，因为拥有，故而珍贵。房东在房价上加上了自己情感的价值，这显然是并不合理的。为什么最近“断舍离”这么风靡，就是因为大家都意识到了这个问题。买东西容易，但是要丢东西，难上加难！</p>
<p>发明拍卖的人，一定是天才。那些竞价到最后的人，因为感觉到马上要获得，所以增加了额外的情感因素，忽视了拍卖品的真实价值。所以很多时候，清醒过来之后，往往后悔不迭。</p>
<p>当我们应聘工作的时候，简历被筛掉和面试到最后一轮被pk给我们的感觉是完全不同的。但仔细想想，我们失去的其实是同一次的工作机会。所以请不要死抱着某种东西不放，请将你拥有“断舍离”的精神，这样能够更加轻松自如。</p>
<h3 id="奇迹-–-不可能事件的必然性"><a href="#奇迹-–-不可能事件的必然性" class="headerlink" title="奇迹 – 不可能事件的必然性"></a>奇迹 – 不可能事件的必然性</h3><p>我们时常会听到各种各样的奇迹，比如奇迹生还，奇迹般地心灵感应之类的。这些事情听来令人惊叹，感染力极大。尤其如果是宗教中涉及此类事件，一定是大书特书。</p>
<p>但是不可思议的意外事件就是虽然少见但完全可能发生的事情。它们的发生不是因为奇迹，而是因为我们忽略了同样情况下它们不发生的概率，因为那样就太正常了，也就没啥可宣扬的了:)</p>
<h3 id="团体迷思-—-共识为什么有可能是危险的"><a href="#团体迷思-—-共识为什么有可能是危险的" class="headerlink" title="团体迷思 — 共识为什么有可能是危险的"></a>团体迷思 — 共识为什么有可能是危险的</h3><p>从小到大我们参与了无数个会议，但我肯定你有过在会议上克制自己，不说出你的意见的时候。原因可能有很多，你可能缺少在公众前发言的经验和勇气，你可能不想做那个出头鸟，你可能单纯的就在发呆。同时还有一个重要原因是：“别人都不傻，他们都没意见，我怎么有意见？”</p>
<p>这种情况非常容易导致团体迷思：一群智慧的人做出愚蠢的决定。这种失败的案例非常多，而且都是精英做出的错误决定。团队很容易出现这样的弱点，而且凝聚力越强的团队，越容易。每个人都为属于一个团队而高兴，异议则有可能意味着被隔离在团队之外，这是我们从原始社会开始就努力规避的风险。万一酋长不带我打猎了。。估计就饿死了。。</p>
<p>假若你的工作是智囊团，那么最好你要讲出你的看法，即使并不中听。假若你领导了一支团队，最好有个敢于唱反调的人，可能他不是团队最受欢迎的人，但是却有可能是最重要的人。一往无前是重要的，但是方向比向前，重要的多。</p>
<h3 id="忽视概率偏误-—-累计奖金为什么会越来越多"><a href="#忽视概率偏误-—-累计奖金为什么会越来越多" class="headerlink" title="忽视概率偏误 — 累计奖金为什么会越来越多"></a>忽视概率偏误 — 累计奖金为什么会越来越多</h3><p>人士感性的，同时又有些盲目。这在概率偏误中，得以体现。面对1000万的奖金和1万的奖金，更多的人选择购买第一种的彩票。即使第二中概率看起来更大。我们不管概率，管得是中了1000万之后，给我们的生活带来的翻天覆地的变化。</p>
<p>很多人会在投资热中选择创立一家公司，美好的蓝图近在眼前，利润仿佛唾手可得。但是我们忘了，或者懒得去查一家初创企业获得预期利润的概率。类似错误的决定数不胜数，这会导致我们的选择不堪推敲。</p>
<p>我们心理上很难区分各种不同程度的风险，除非风险为0. 因此由于直觉帮不了我们，我们必须尽可能的区估计和计算风险，这能帮我们更好的规避他们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我读《清醒思考的艺术》three&quot;&gt;&lt;a href=&quot;#我读《清醒思考的艺术》three&quot; class=&quot;headerlink&quot; title=&quot;我读《清醒思考的艺术》three&quot;&gt;&lt;/a&gt;我读《清醒思考的艺术》three&lt;/h1&gt;&lt;p&gt;应读者反馈，每次十条貌似有些
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>我读清醒思考的艺术 四</title>
    <link href="http://meijing0114.com/2015/05/26/book005/"/>
    <id>http://meijing0114.com/2015/05/26/book005/</id>
    <published>2015-05-26T02:41:27.000Z</published>
    <updated>2015-05-26T02:42:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我读《清醒思考的艺术》-four"><a href="#我读《清醒思考的艺术》-four" class="headerlink" title="我读《清醒思考的艺术》 four"></a>我读《清醒思考的艺术》 four</h1><p>其实上次的文章发出来之后，还有读者反馈，6条太少了。T T 所以做一个简单地投票，权当丰富了内容啦！</p>
<h2 id="27-零风险偏误-–-你为什么会为零风险支付过多"><a href="#27-零风险偏误-–-你为什么会为零风险支付过多" class="headerlink" title="27. 零风险偏误 – 你为什么会为零风险支付过多"></a>27. 零风险偏误 – 你为什么会为零风险支付过多</h2><p>曾出现在无数电影中的经典桥段就是俄罗斯轮盘赌。一个左轮手枪，如果你可以付钱将4颗上膛的子弹拿出两颗，或者把唯一的一颗子弹拿出来。那么相信大多数人都会选择对第二种情况付出更多。尽管从概率上来看，第一种把你死亡的概率降低的更多。但是管他呢，选了第二种，就肯定不会死。</p>
<p>人类确实很难区分各种风险。风险越大的时候，其中包含的感情成分越多，而风险单纯从概率上得降低给我们的安慰也越小。北京的雾霾致病率假如是50%还是1%，都会让人觉得担忧不已。但是如果是0%，那么立刻就是另一种感受。</p>
<p>但事实上，零概率是很难达到的，而且多数时候是不现实的。我们可能会为了零风险付出很多，但是到最后才会意识到，“没有什么是安全的”。无论是积蓄、健康、婚姻、友谊、敌人还是土地。但是请满足于至少有东西让你保持相对稳定并体验自身的快乐。其实不管发生什么事，快乐的人照样快乐，不快乐的人依旧如此，这在后文中会有更深刻的讨论。</p>
<h2 id="28-稀少性谬误-–-为什么饼干越少越好吃"><a href="#28-稀少性谬误-–-为什么饼干越少越好吃" class="headerlink" title="28. 稀少性谬误 – 为什么饼干越少越好吃"></a>28. 稀少性谬误 – 为什么饼干越少越好吃</h2><p>“物以稀为贵”，这句话无论从古至今，还是西方东方，都是颠不破的真理。从受邀请才能加入的谷歌邮箱，到房产中介频频放出的此房热门马上要被抢购的消息，还有那万年不变的“清仓大处理”甩卖。无一不在透露着这个信息。</p>
<p>尤其是，当我们的一个物品被夺走了，更显得它的珍贵。“失去的，才知道珍惜”。有趣的时，这在心理学里被称为“罗密欧朱丽叶效应”。越是反对，就越要在一起。</p>
<p>我们对稀少性的典型反应，就是丧失了清晰思考的能力。价值的观点被混淆，满目里都被稀少蒙蔽，所以呀，让我们只按照价格和作用来评判一样东西吧，它少不少，跟你又有什么关系呢？</p>
<h2 id="29-忽视基本概率-–-当你在怀俄明州听到马蹄声、见到白色条纹时。。。"><a href="#29-忽视基本概率-–-当你在怀俄明州听到马蹄声、见到白色条纹时。。。" class="headerlink" title="29. 忽视基本概率 – 当你在怀俄明州听到马蹄声、见到白色条纹时。。。"></a>29. 忽视基本概率 – 当你在怀俄明州听到马蹄声、见到白色条纹时。。。</h2><p>忽视基本概率，是最常见的思维错误之一。原因就在于，我们很容易被精确的描述误导。举个例子，马克是个男人，他爱听莫扎特，戴着眼镜，那么哪种概率大？</p>
<ol>
<li>他是卡车司机</li>
<li>他是法兰克福的文学教授</li>
</ol>
<p>乍一看是2，但是事实上，卡车司机比法兰克福的文学教授要多得多。这就是一种基本概率。这在医学中比比皆是，发烧可能是病毒感染或者恶性肿瘤导致的，但是一个合格的医生，肯定不会先帮你进行全身的肿瘤扫描。他必须认识到基本概率，并且对症下药。</p>
<p>基本概率是清晰的，基本概率是残酷的。那么多公司在互联网的浪潮中异军突起，但是谷歌只有一个。从概率上来看，很多人或者大部分人，根本无法达到这样的高度。忽视基本概率的投资人，肯定会变成乱投医的冤大头。</p>
<p>对基本概率的忽视，在象牙塔中比比皆是。每个未出校门的大学生都是志向高远，瞄准董事。而单从概率上来看，他们成为中年中层大叔的概率，远大于此。</p>
<h2 id="30-赌徒谬误-–-为什么没有一种平衡命运的力量"><a href="#30-赌徒谬误-–-为什么没有一种平衡命运的力量" class="headerlink" title="30. 赌徒谬误 – 为什么没有一种平衡命运的力量"></a>30. 赌徒谬误 – 为什么没有一种平衡命运的力量</h2><p>如果你是个赌徒，或者你喜欢看关于赌徒的电影。你会知道，赌徒总是输多赢少。而且输得越多，他们越相信，根据硬币一体两面的概率，他们一定会赢回来。但是可惜的是，概率只有在大统计样本的前提下才有意义，对于赌徒尝试的那些次来说，还没达到那么多的抽样样本，他们就输的底裤都没了。。。</p>
<p>当然，只有一种情况，那就是回归均值的时候。连续的极端天气之后，肯定会缓和。这是趋向均值的表现。不过大部分情况下，请不要迷信于概率论中得独立事件概率的论述，趁你还没输光之前。</p>
<h2 id="31-锚定效应-–-数字轮盘如何搞得我们晕头转向"><a href="#31-锚定效应-–-数字轮盘如何搞得我们晕头转向" class="headerlink" title="31. 锚定效应 – 数字轮盘如何搞得我们晕头转向"></a>31. 锚定效应 – 数字轮盘如何搞得我们晕头转向</h2><p>锚定效应，指的是很多时候我们进行推论的时候，都是基于一定的锚作为标准的。或者就叫做基准。这对我们推论一些不了解的知识非常的有用，但是有的时候要是选错了锚，那可就麻烦了。</p>
<p>如果你在小学中因为几次超长发挥被认定为优秀学生，那么中学的老师在评判你的作文的时候，就可能另眼相待。很多商品上也标满了“建议零售价”，看了之后，似乎我们对付出这个价格，就感觉特别的合理。这是一种心理上得暗示和误导，而且常常用于销售与谈判的技巧中。选中了合适的锚，就能让客户付出超出实际商品价值的价格来。</p>
<h2 id="32-归纳法-–-如何把别人的钱弄进自己的口袋"><a href="#32-归纳法-–-如何把别人的钱弄进自己的口袋" class="headerlink" title="32. 归纳法 – 如何把别人的钱弄进自己的口袋"></a>32. 归纳法 – 如何把别人的钱弄进自己的口袋</h2><p>归纳法，乃至于数学归纳法，是我们认知事物的自然过程。因为我们的认知从观察开始，逐渐形成自己的结论，继而变成习惯影响我们。殊不知，很多时候一叶障目，不见泰山，个例被我们归纳成了公理，这就十分危险了。</p>
<p>一只连续暴跌的股票可能被投资者认为跌无可跌，全部身家投进去，结果打了水漂。一个从没出过事故的航空公司，也可能因为特殊因素，而发生悲剧。归纳法是需要的，但是不能忘记“所有确信都是暂时的”，一次例外，就足以毁掉经过上千次证明的理论。</p>
<p>“由于人类一直都是成功的，所以我们也将征服未来的挑战”，听起来不错，但是似乎只有幸存的物种，才能这么说。</p>
<p>今天，仍然是六个思维错误，那么大家在实际的生活中，曾经遇到过哪条，或者说对哪条印象特别深刻呢？可以通过下面的投票反馈一下，或是留言进行分享，一同克服思维错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我读《清醒思考的艺术》-four&quot;&gt;&lt;a href=&quot;#我读《清醒思考的艺术》-four&quot; class=&quot;headerlink&quot; title=&quot;我读《清醒思考的艺术》 four&quot;&gt;&lt;/a&gt;我读《清醒思考的艺术》 four&lt;/h1&gt;&lt;p&gt;其实上次的文章发出来之后，还
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>我读《清醒思考的艺术》 二</title>
    <link href="http://meijing0114.com/2015/03/17/book004/"/>
    <id>http://meijing0114.com/2015/03/17/book004/</id>
    <published>2015-03-17T15:42:28.000Z</published>
    <updated>2015-03-17T15:43:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>思考方式是惯性，是习惯，是一种深深烙印在我们灵魂深处的印记。我们长成的环境，接触的人或事，学到的教训，听取的建议，以及基因的本能，都会深深的影响我们的思维方式。随波逐流容易，清醒思考不易，所以继续上文，来归总《清醒思考的艺术》。</p>
<h3 id="现成偏误-–-你为什么宁可用一张错误的地图，也不愿没有地图"><a href="#现成偏误-–-你为什么宁可用一张错误的地图，也不愿没有地图" class="headerlink" title="现成偏误 – 你为什么宁可用一张错误的地图，也不愿没有地图"></a>现成偏误 – 你为什么宁可用一张错误的地图，也不愿没有地图</h3><p>现成偏误，意思很清楚：人是非常懒的，有的时候也不愿意思考，因此很多结论我们都是拿现成的，或者说我们最容易想到的。 因此我们会高估飞机坠毁的风险，同时大大低估糖尿病带来的风险。但是很显然，外界现实中得某些东西不会因为我们更容易想多而出现的更加频繁。</p>
<p>人都是视觉动物，哪些壮丽、华丽或者大声的，总是要盖过那些无声、无形的一切。我们的大脑更偏重于剧本思维，而不是量化思维。换言之，越是戏剧性，我们越喜欢。</p>
<p>除此之外，人也很容易被影响。那些重复被提及的“不明飞行物”、“生命能量”在新闻里一次次出现，相信不少的人都会信以为真。这就像《乌合之众》里大众的思维方式，完全无理性，而且坚信谬误无疑。为什么我们宁可用一张错误的地图，也不愿意没有地图，因为熟悉，因为这样我们才能找到舒适区域。但是危险的是，过往的经验往往不能适应于所有场景，想要克服之，必须与那些不同的人合作，打开你的思维，jump out of box。</p>
<h3 id="“在好转之前会先恶化”的陷阱-–-如果有人建议你选择一条“先经历痛苦的道路”，你应该敲响警钟"><a href="#“在好转之前会先恶化”的陷阱-–-如果有人建议你选择一条“先经历痛苦的道路”，你应该敲响警钟" class="headerlink" title="“在好转之前会先恶化”的陷阱 – 如果有人建议你选择一条“先经历痛苦的道路”，你应该敲响警钟"></a>“在好转之前会先恶化”的陷阱 – 如果有人建议你选择一条“先经历痛苦的道路”，你应该敲响警钟</h3><p>这种场景，听起来是不是很熟悉？很多人会告诉你，“我对的困难有良方，但是在好之前，肯定会有一段低谷”。这明显是个陷阱，或者说是个trick。如果困难好转，皆大欢喜。如果仍是恶化，那么他的预测又是准确的，真是稳赚不赔。</p>
<p>宗教中颇多这种暗示，末日预言数见不鲜。一旦有了末日，那么一切美好都是上天的馈赠，一切恶化都是命中注定。呜呼哀哉，这样就只能听天由命啦。</p>
<p>当”在好转之前会先恶化”的陷阱出现的时候，仔细考虑，敲响警钟。如果真的存在困难时期，那么一定会有milestone标识着事情的好转，所以要盯着里程碑，而不是寄望于不可靠的上天。</p>
<h3 id="故事偏误-–-为什么就连真实的故事也是骗局"><a href="#故事偏误-–-为什么就连真实的故事也是骗局" class="headerlink" title="故事偏误 – 为什么就连真实的故事也是骗局"></a>故事偏误 – 为什么就连真实的故事也是骗局</h3><p>人民喜欢看故事、听故事，也喜欢讲故事。这在新闻中最有体现。一个交通事故，很多时候大家关心的不是事故本身，而是车主开什么车，是不是富二代。为啥呢？因为有故事。我们喜欢听故事，不喜欢抽象的事实。</p>
<p>因此好的广告，都在讲故事。这比你罗列一大批性能参数要好得多。不信？去看看超级碗的广告就知道了。</p>
<p>我们总是喜欢把一切都变成有意义的故事，即使很多时候事实并非如此。所以尝试把故事去掉，看看事实的本身是什么的。</p>
<h3 id="事后诸葛亮偏误-–-你为什么应该写日记"><a href="#事后诸葛亮偏误-–-你为什么应该写日记" class="headerlink" title="事后诸葛亮偏误 – 你为什么应该写日记"></a>事后诸葛亮偏误 – 你为什么应该写日记</h3><p>当今时代，事后诸葛亮实在是太多啦！！吹牛不必打草稿，专家不用负责任。所以事后诸葛亮如雨后春笋一般冒了出来。从现在的角度来看，很多历史事件都是不可避免的：萨拉热窝引发世界大战、希特勒闪击波兰、2008的经济危机。事实上是吗？翻开当时的预测的舆论，你会发现完全不是这么回事。我们是在事实的基础上，给他们找论据呐！</p>
<p>事后诸葛亮偏误绝对是最顽固的思维错误之一，可以恰如其分地称为“我早知道现象”，即时候回顾时一切都显得是可以理解的，不可避免的。今天大家说，谷歌的成功是不可避免的，但是换到1998年呢？</p>
<p>这种偏误的危险在于，它让我们觉得自己是很好的预言家，而事实上却并非如此，这使得我们傲慢，误导我们做出错误的决定。写日记是一种很好的方式，你可以写下你对政治、事业、体重、股市的预测，然后对比一下，或许能够对自己的预言水平有更深的认识。而读历史的时候，更应该关注历史发生那个时期的记载，这让我们能够更好地感觉到世界的不可预见性。</p>
<h3 id="司机的知识-–-你为什么不可以把新闻播音员说的话当真"><a href="#司机的知识-–-你为什么不可以把新闻播音员说的话当真" class="headerlink" title="司机的知识 – 你为什么不可以把新闻播音员说的话当真"></a>司机的知识 – 你为什么不可以把新闻播音员说的话当真</h3><p>司机的知识，这里指的是普朗克一次演讲，与司机互换角色的故事。司机假装普朗克，却也虎了一批人。有些人具有真正的知识，来自于大量的时间与思考，而有些人只有“司机的知识”，装的好像他们什么都知道。但他们真正了解的，可能只是套话而已。</p>
<p>每个人都会有自己的能力范围，认清自己的能力范围，知道自己什么能做，什么做不了是十分重要的。勇于承认自己“不知道”是认清自己的表现，那些号称无所不知的人，可能就是套话专家。</p>
<h3 id="控制错觉-–-你实际控制的少于你以为的"><a href="#控制错觉-–-你实际控制的少于你以为的" class="headerlink" title="控制错觉 – 你实际控制的少于你以为的"></a>控制错觉 – 你实际控制的少于你以为的</h3><p>控制错觉是指：</p>
<blockquote>
<p>相信我们能够控制或影响某种我们客观上无法控制或影响的东西的倾向。</p>
</blockquote>
<p>这种倾向常常会给我们带来错觉，我们觉得我们可以控制或者改变很多事情。很多电梯中会有“开门”和“关门”的按钮，但是这些按钮事实上与控制器并不相连，但是有和没有，给人的感觉完全不同。当你以为你对这个世界很重要的时候，世界可能刚刚准备好接受你的无知。 所以，将注意力集中在你真正能够影响的少量东西上，坚定不移。其他的，听之任之吧。</p>
<h3 id="激励过敏倾向-–-你为什么不该按实际开销付钱给你的律师"><a href="#激励过敏倾向-–-你为什么不该按实际开销付钱给你的律师" class="headerlink" title="激励过敏倾向 – 你为什么不该按实际开销付钱给你的律师"></a>激励过敏倾向 – 你为什么不该按实际开销付钱给你的律师</h3><p>俗话说得好，无利不起早。激励过敏说的就是这么个有趣的事：人都会对激励做出反应。河内的法国殖民政府曾经颁布过一条法令：没交出一只死老鼠，奖钱。本想控制鼠灾，结果人们都开始养老鼠了。</p>
<p>这样的例子数不胜数，导致的令人啼笑皆非的悲剧也不在少数。究其原因，是这个激励机制的问题。一个好的激励机制能够把目的和激励联系起来。就拿学驾校这件事情来说，一个从学车到考试全包的价格跟按次学车，学成考试的价格，显然是完全不同的。在这种激励下，老师巴不得你一直学呢！“千万别问理发师你是否需要理发”，当然也“千万别问房产中介，房子是不是会涨”。。</p>
<p>当你对某个人或某个组织的行为感到吃惊，可以想想背后隐藏了什么激励机制。估摸着这能够解释90%的行为。。</p>
<h3 id="回归均值-–-医生、顾问、教练以及心理治疗师的作用令人怀疑"><a href="#回归均值-–-医生、顾问、教练以及心理治疗师的作用令人怀疑" class="headerlink" title="回归均值 – 医生、顾问、教练以及心理治疗师的作用令人怀疑"></a>回归均值 – 医生、顾问、教练以及心理治疗师的作用令人怀疑</h3><p>这个标题挺挑事的，一下子得罪了好多群体。不过本条的关键在于，凡事都会回归均值。除去特别好的和特别差的，其他人都可能会浮动。或者换一种说法，叫做触底反弹。这种想法在很多场景下是正确的，凡事都会波动。不管是运动员的状态，天气的气温。问题在于，很多人不能理解这种自然的波动，而是草木皆兵，这样往往会得出错误的结论。</p>
<h3 id="公地悲剧-–-为什么理性的人不去诉诸理性"><a href="#公地悲剧-–-为什么理性的人不去诉诸理性" class="headerlink" title="公地悲剧 – 为什么理性的人不去诉诸理性"></a>公地悲剧 – 为什么理性的人不去诉诸理性</h3><p>公地，就是公共场所，公地的悲剧，就是三个和尚没水喝的故事。要想解决这个问题，靠道德是不牢靠的，大锅饭的时代，可能人人都不想出力。解决之道，要么是加强管理，要么是私有化。</p>
<p>当然，有很多人道德水平很高，会自觉的克制自己。但是在这种自我负责基础上制定政策是非常盲目的，不可能指望人类的道德理性。因此人的略根性，要靠法去约束。</p>
<blockquote>
<p>如果某人的收入取决于不理解某事，要让他理解就会很难</p>
</blockquote>
<h3 id="结果偏误-–-切勿以结果判断决定"><a href="#结果偏误-–-切勿以结果判断决定" class="headerlink" title="结果偏误 – 切勿以结果判断决定"></a>结果偏误 – 切勿以结果判断决定</h3><p>假设有100万只猴子在股市上投机。它们疯狂地、随机的买卖股票。一年之后，会有一半的猴子赚钱，一半亏钱。第二年又是一半。长此以往，十年之后，会有1000只猴子每次都赚。二十年后就剩一只猴子，成了亿万富翁。</p>
<p>这种情况下，媒体会怎么样？他们会冲过去，阐述这只猴子的“成功原理”，也许是他吃的香蕉的品种特别好，也许是他捉虱子思考的时间很长，不管怎么样，他肯定拥有成功的秘诀！</p>
<p>结果偏误，说明我们倾向于以结果判断决定，而不是当时做决定的过程。日本偷袭珍珠港，现在看来，线索条条清晰，当时为什么不知道呢？因为当时还有无数的线索，说明他们不会偷袭。因此，我们更应该分析过程，而不是一味的只看结果。结果差并不意味着当时所做的觉得不对，反之亦然。我们最好能够仔细研究胰腺癌做出决定的原因，而不是吐槽一个被证明是错误的决定，或者为一个也许是纯熟偶然成功的决定而庆幸。如果你的决定是理性的，请继续坚持，勿以结果论英雄。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思考方式是惯性，是习惯，是一种深深烙印在我们灵魂深处的印记。我们长成的环境，接触的人或事，学到的教训，听取的建议，以及基因的本能，都会深深的影响我们的思维方式。随波逐流容易，清醒思考不易，所以继续上文，来归总《清醒思考的艺术》。&lt;/p&gt;
&lt;h3 id=&quot;现成偏误-–-你为什
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>我读《清醒思考的艺术》 one</title>
    <link href="http://meijing0114.com/2015/03/08/book003/"/>
    <id>http://meijing0114.com/2015/03/08/book003/</id>
    <published>2015-03-08T14:50:57.000Z</published>
    <updated>2015-03-08T14:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个人每时每刻都在思考，但是由于各种各样的原因，比如个人见识，环境影响，大脑结构，进化选择等等的原因。我们思考所得到的结果总是不完美的，不理性的，总是要让我们自己后悔一番的。到底是选择咸的豆腐脑还是甜的豆腐脑？挑女朋友是看脸看身材，还是看智慧看贤惠？这份工作要做么？还是寻找新的机会。这些问题，每个人心中都有一个答案。在得到这个答案的历程中，都会有一个思考的过程。我们无时无刻不在遭遇和解决问题，但是那些思考的谬误却常常让我们顾此失彼，后悔不迭。</p>
<p>因此作者以极大的智慧，客服了这些常见的思维谬误，并且如庖丁解牛般将之呈现在我们的眼前。看完第一条就已经有“一拍大腿”的恍然大悟之感。读了一半，只见大腿早已被拍得通红。每一条思维谬误，都能让你想到自己曾经犯过的错误，这是多么难能可贵的。医者说“对症下药”，一般而言，如果一般书50%的内容对你有用，读书的效率应该已经相当高了。现在这本《清醒思考的艺术》中几乎每一条思考技巧都有启发，简直是老鼠掉进了蜜罐里，因此不得不说这是一本值得一读，而且常看常新的书。</p>
<p>作者对思维错误做了如下描述:</p>
<blockquote>
<p>我在这里使用的思维错误的概念，是指系统性地偏离理性，偏离最理想的、合乎逻辑的、理智的思考和行为。</p>
</blockquote>
<h3 id="幸存偏误，为什么你该去逛逛墓地"><a href="#幸存偏误，为什么你该去逛逛墓地" class="headerlink" title="幸存偏误，为什么你该去逛逛墓地"></a>幸存偏误，为什么你该去逛逛墓地</h3><p>这一章批判了赤裸裸地成功学。在我们的身边总有数不清的成功与励志故事。令人振奋，让人头脑发热。幸存偏误是指”由于日程生活中更容易看到成功，看不到失败，因此你一定会系统性地高估成功的希望”。俗话说的是，一将功成万古枯，但是历史中却只会提及出将入相者的故事。而从已经成功者的角度来看，最可怕的就是“成功因素”，从成功者的角度来总结，总能够发现很多通向成功的康庄大道。我想说，成功不是没有方法，但是在贸然做出决定之前，还是可以先通过那些失败的公司、项目或者投资中找找案例让自己冷静下来比较好。</p>
<h3 id="游泳选手身材错觉，哈佛是好大学还是烂大学？我们不清楚"><a href="#游泳选手身材错觉，哈佛是好大学还是烂大学？我们不清楚" class="headerlink" title="游泳选手身材错觉，哈佛是好大学还是烂大学？我们不清楚"></a>游泳选手身材错觉，哈佛是好大学还是烂大学？我们不清楚</h3><p>这章所提出的观点不但发人深思，而且有趣。有一种非常常见的错觉：游泳职业运动员充分的锻炼导致了他们体型完美；使用了某种化妆品之后的模特看起来特别漂亮；读过哈佛大学的学生毕业都来都是杠杠的。在某些场景下，这么说没问题。但是大多数的时候，这混淆了“选择标准”与“结果”的关系。那些体型好的人，才会被选为游泳运动员。那些天生丽质的，才被选为做化妆品广告。那些更可能成功的人，才会进入哈佛大学。因此，当某个机构，某个商店，某个投资产品告诉你类似的结论的时候，你可一定要小心了。但凡有人讴歌某种东西值得追求–强健肌肉、美貌、高收入、长寿、影响力、快乐，你都要看仔细。必须诚实的对待自己和自己的目标，我们才能过得更加快乐。</p>
<h3 id="过度自信效应-–-你为什么会系统性地高估自己的学识和能力"><a href="#过度自信效应-–-你为什么会系统性地高估自己的学识和能力" class="headerlink" title="过度自信效应 – 你为什么会系统性地高估自己的学识和能力"></a>过度自信效应 – 你为什么会系统性地高估自己的学识和能力</h3><p>首先，承认自己存在这个效应，就需要一定的勇气。:)其次，对于专家来说，承认存在这个效应，更是需要巨大的勇气！每年都会有无数的经济学家预测经济的各种走势，成功的和失败的一样多，而且成功的其中有多少是出于专业知识，也有存疑。另一个例子是令人啼笑皆非的对法国男人性能力的调查，84%的人声称自己高于平均，但是平均，必然只有50%。当你坚信自己不在“统计范围”之内的时候，很可能你就已经进入了这个陷阱。所以啊，请对所有预测持怀疑态度，尤其是当这些预测是由所谓的专家们作出的。请你在策划任何事情时都从悲观的角度出发，作最坏的打算。这样你才会真正有机会，更现实一些地判断形势。</p>
<h3 id="从众心理-–-就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举"><a href="#从众心理-–-就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举" class="headerlink" title="从众心理 – 就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举"></a>从众心理 – 就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举</h3><p>从众心理，来自于我们的血液里，来自于我们的基因中。想象一下，原始丛林中，当你的同伴突然四散逃跑的时候，你是选择原地不动思考人生，还是同样撒腿就跑呢？但是现如今，这种心理却并不明智。这种心理被广告、煽动性演讲、邪教广泛利用，个人屈从于群体，隐匿其中并且无论群体如何张牙舞爪都不反抗的实例比比皆是。看看《乌合之众》，就能对这种行为有更深的认识。总而言之，现在已经不是原始社会了，让自己独立地思考吧！</p>
<h3 id="纠缠于沉没成本-–-你为什么应该忽视过去"><a href="#纠缠于沉没成本-–-你为什么应该忽视过去" class="headerlink" title="纠缠于沉没成本 – 你为什么应该忽视过去"></a>纠缠于沉没成本 – 你为什么应该忽视过去</h3><p>当做一件事情的唯一理由或者大部分理由都变成“现在已经做了这么多了，停了多不划算”的时候，就是应该立刻停止做此事的时候。中国人是非常典型纠缠于沉没成本的，可能是性格上不太对抗，有的时候会忍气吞声。所以在旅游的时候，面对挤爆的景点、差劲的餐饮、脏乱的旅馆和谈钱的导游，一句风轻云淡的“来都来了“，完完全全地体现了对沉没成本的纠结会多么影响我们的生活品质。当然旅游是小事，但是沉没成本耽误的往往不止这些。</p>
<blockquote>
<p>每个决定，不管是私人的还是业务上的，始终是在不确定的情况下做出的。我们的设想，有可能兑现，也有可能落空。任何时候我们都可能离开选取的小道，并承担后果，比如中断项目。这种不确定情形下地权衡是理性行为。然而，在我们已经投入特别多的时间、金钱、能量、爱等因素之后，沉没成本令人难以放手，难以释怀。于是已经投资的钱就成了继续做下去的理由，即使客观来看坚持下去毫无意义。</p>
</blockquote>
<p>造成这种现象的主要的原因就是不想放弃，我们想看起来坚韧一些。让我们继续做一件事情的理由很多，希望不是“我已经这么做了”。</p>
<h3 id="互惠偏误-–-你为什么不该让别人请你喝饮料"><a href="#互惠偏误-–-你为什么不该让别人请你喝饮料" class="headerlink" title="互惠偏误 – 你为什么不该让别人请你喝饮料"></a>互惠偏误 – 你为什么不该让别人请你喝饮料</h3><p>不管国内国外，大家都一样，都无法忍受亏欠！所谓来而不往非礼也，如果你不想亏欠，就别轻易接受别人的恩惠。:)</p>
<h3 id="确认偏误-–-遇到“特殊情况”这个词时，你要格外小心"><a href="#确认偏误-–-遇到“特殊情况”这个词时，你要格外小心" class="headerlink" title="确认偏误 – 遇到“特殊情况”这个词时，你要格外小心"></a>确认偏误 – 遇到“特殊情况”这个词时，你要格外小心</h3><p>“确认偏误”是所有思维错误之父！因为有了它，我们就过滤掉那些与我们现有观点相矛盾的新信息。毫无疑问，这很危险。很多时候，一旦做出了一个决定之后，会发现几乎所有证据都指向这个决定无比的英明。但是世界不会变，变得只是你的心。所以，遇到“特殊情况”的时候，还是得仔细倾听那些与你的结论向左的论调。忠言逆耳利于行，一个可靠的理论的建立，必须是在无法找到反驳证据的情况，而不是简简单单的举几个正面的例子就可以了。<br>那些慈善家的论调，占星学家的占卜，经济学家的预测，以及数不清的宗教与哲学观念中，由于太过于模糊的存在，导致确认偏误层出不穷。很多记者写文章时，也是论断在前，寻找证据在后，几番拼凑就是一篇水文。当你坚定某个信念的时候，你总能发现新的证据。因此只有挑战自己的想法和信条，才能找到更可靠，更坚定的道路。</p>
<h3 id="权威偏误-–-你为什么该藐视权威"><a href="#权威偏误-–-你为什么该藐视权威" class="headerlink" title="权威偏误 – 你为什么该藐视权威"></a>权威偏误 – 你为什么该藐视权威</h3><p>权威和砖家是网上经常被狂喷的群体之一。原因就是他们经常语出惊人，并且从不负责任。不过犯错不可怕，人人都会。可怕的是，面对权威的时候我们会将独立思考调低一级。我们会选择盲目听信而非独立思考，这在很多社会学的实验中都有验证。面对权威，很多人会选择做出不理性甚至疯狂地行为。作者提出的例子非常有趣：航空公司已经发现权威偏误很久了，副机长会在机长做出错误决定的时候出于相信权威而不敢指出来。要克服这点，就必须学习坦率，迅速指出毛病。当你对权威的批判性越强，你就越自由，就越相信自己有更多的能力。</p>
<h3 id="对比效应-–-你为什么最好别找模特儿等级的朋友一起出门"><a href="#对比效应-–-你为什么最好别找模特儿等级的朋友一起出门" class="headerlink" title="对比效应 – 你为什么最好别找模特儿等级的朋友一起出门"></a>对比效应 – 你为什么最好别找模特儿等级的朋友一起出门</h3><p>人比人，气死人，这个效应尽人皆知。比较之下，绝对值完全不再可信。当你200万买房的时候，2万买个沙发好像也没啥，但是跟2块一个的包子比，可能立刻就清醒了。在股票市场，一只股票被腰斩之后，很多会推荐，因为它相比之前便宜了好多。但是更理性的投资方法，显然是评估股票的真实价值。由此可见，如何选伴娘，也是一门学问呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个人每时每刻都在思考，但是由于各种各样的原因，比如个人见识，环境影响，大脑结构，进化选择等等的原因。我们思考所得到的结果总是不完美的，不理性的，总是要让我们自己后悔一番的。到底是选择咸的豆腐脑还是甜的豆腐脑？挑女朋友是看脸看身材，还是看智慧看贤惠？这份工作要做么？还是寻找
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>一次关于“Markdown”的分享</title>
    <link href="http://meijing0114.com/2015/03/02/tool001/"/>
    <id>http://meijing0114.com/2015/03/02/tool001/</id>
    <published>2015-03-02T14:29:41.000Z</published>
    <updated>2016-08-24T12:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享大纲"><a href="#分享大纲" class="headerlink" title="分享大纲"></a>分享大纲</h2><ul>
<li>语法掠影</li>
<li>常用工具</li>
</ul>
<h2 id="语法掠影"><a href="#语法掠影" class="headerlink" title="语法掠影"></a>语法掠影</h2><p><strong>源代码</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)</div><div class="line">&gt; 连续的引用也会放到一起去</div></pre></td></tr></table></figure>
<p><strong>展示效果</strong>：</p>
<blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基百科</a></p>
<p>连续的引用也会放到一起去</p>
</blockquote>
<hr>
<p><strong>源代码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)</div></pre></td></tr></table></figure></p>
<p><strong>展示效果</strong>：<br>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="external">链接</a></p>
<hr>
<p><strong>源代码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">还有一些其他的功能：</div><div class="line">* 邮件：An email &lt;example@example.com&gt; link. 点击直接呼起邮件应用。</div><div class="line">* 图片：![Alt text](./tumblr_nh9atbj52G1sf1m92o1_500.jpg)</div><div class="line">    * 支持嵌套</div><div class="line">        *  daf</div><div class="line">1. adf</div><div class="line">2. adf</div><div class="line">3. adf</div><div class="line"></div><div class="line">咯咯咯咯，华丽的分割线</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p><strong>展示效果</strong>：</p>
<p>还有一些其他的功能：</p>
<ul>
<li>邮件：An email <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#109;">&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#99;&#111;&#109;</a> link. 点击直接呼起邮件应用。</li>
<li>图片：<img src="http://ww4.sinaimg.cn/mw690/a0788e3bgw1f74swdtnbrj20iw0doq4y.jpg" alt="Alt text"><ul>
<li>支持嵌套<ul>
<li>daf</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>adf</li>
<li>adf</li>
<li>adf</li>
</ol>
<p><strong>咯咯咯咯，华丽的分割线</strong>：</p>
<hr>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>使用``包围的是代码段，使用三个`包围的是代码块。</p>
<p><code>test</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="meta">... </span>prompt'''</div></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>源代码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:|</div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      |   $12 |</div><div class="line">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure></p>
<p><strong>展示效果</strong>：</p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><ul>
<li>sublime – windows and mac and free</li>
<li>mou – mac下free,方便撰写，本地存储，客户端体验非常好。</li>
</ul>
<ul>
<li>简书 – web+手机，free，号称最好的中文体验</li>
</ul>
<ul>
<li>马克飞象 – 年费79，与evernote深度契合，高级语法。web+chrome extension（离线客户端）</li>
</ul>
<h2 id="通用性"><a href="#通用性" class="headerlink" title="通用性"></a>通用性</h2><ol>
<li>语法简单，容易编写。</li>
<li>使用html的通用标准格式，方便分享：</li>
</ol>
<ul>
<li>km文章直接通过html源代码的方式分享，不用再关心格式。</li>
<li>outlook的方式，通过复制浏览器打开的的html内容，直接贴入outlook的正文中。</li>
</ul>
<h2 id="马克飞象号外推介："><a href="#马克飞象号外推介：" class="headerlink" title="马克飞象号外推介："></a><strong>马克飞象号外推介</strong>：</h2><p>正如上文中所说，马克飞象除了基本的markdown语法之外，还提供了很多额外的高级语法。通过这些语法生成的诸如公式、流程图、时序图之类的，会在生成的时候以图片的方式存在。从而不必担心发生任何的格式不兼容或者错乱的问题。</p>
<h3 id="LaTex-公式"><a href="#LaTex-公式" class="headerlink" title="LaTex 公式"></a>LaTex 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p>
<p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><strong>源代码</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">```flow</div><div class="line">st=&gt;start: Start</div><div class="line">e=&gt;end</div><div class="line">op=&gt;operation: My Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**展示效果**：</div><div class="line">```flow</div><div class="line">st=&gt;start: Start</div><div class="line">e=&gt;end</div><div class="line">op=&gt;operation: My Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="以及时序图"><a href="#以及时序图" class="headerlink" title="以及时序图:"></a>以及时序图:</h3><p><strong>源代码</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">```sequence</div><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**展示效果**:</div><div class="line">```sequence</div><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="页内链接"><a href="#页内链接" class="headerlink" title="页内链接"></a>页内链接</h3><p>马克飞象同样提供了页内链接的功能，只需要在文章的起始写下<code>[TOC]</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分享大纲&quot;&gt;&lt;a href=&quot;#分享大纲&quot; class=&quot;headerlink&quot; title=&quot;分享大纲&quot;&gt;&lt;/a&gt;分享大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法掠影&lt;/li&gt;
&lt;li&gt;常用工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;语法掠影&quot;&gt;&lt;a href=&quot;#语法
    
    </summary>
    
      <category term="程序员效率" scheme="http://meijing0114.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>读《解忧杂货铺》</title>
    <link href="http://meijing0114.com/2015/02/26/book002/"/>
    <id>http://meijing0114.com/2015/02/26/book002/</id>
    <published>2015-02-26T11:22:36.000Z</published>
    <updated>2015-02-26T11:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>东野圭吾先生一反常态，写出解忧杂货铺以鐁读者，实在是让人眼前一亮。</p>
<p>小说的设定围绕在东京边的一个小镇上的过气杂货铺“解忧杂货铺”。此间卖得东西倒无甚特别，但是妙就妙在有一个认真地店主爷爷，无论你有什么烦恼或是忧愁，他都会帮你认真回答。开始或许只是小朋友们问一问如何拿到100分这类看似小儿科的问题，后来就慢慢出现咨询情感问题、人生抉择等问题。但是无论问题所问为何，店主始终抱着一颗设身处地，努力思考的心态来认真回答。久而久之，小店小有名气，甚至被杂志报道。但是冯唐易老，时光飞逝，人们都慢慢忘了这家店，但是那些来问过问题的人们，似乎都在心里留下了不可磨灭的印记。。</p>
<p>在作者的设定下，解忧杂货铺的窗口在店主爷爷去世三十年后重新打开，连接了过去和现在，三个全不相关的人，竟拥有了回答过去人问题的能力。曾经在社会底层挣扎的人们却能为各色人等指点迷津，本身就引人入胜。同时，这三人的当下的命运与那些过去咨询问题的人们的命运相互交割，藕断丝连。作为侦探小说大家的作者，对这错综复杂的线索联系把控的恰到好处，令人叫绝。所以整部书最适合一起读完完全不休息也不能有任何的间隔，才能酣畅淋漓。</p>
<p>尽管情节十分引人，但我却觉得。此书更值得看的是对“解忧问答”或者说“解忧咨询”这个问题的探讨。每个人都会有烦恼，也都会有产生疑问的时候，但是解决的方式却大不相同。有的人就憋在心里，有的人就加以排解，但是也有的人会去寻求一些咨询。向朋友，向家人，向专家，或是在知乎上面向素未谋面的网友。尽管都是解忧的咨询，但是根据不同的情况，问者的心态以及对答者回答的反应都会有完全的不同。在第一个咨询的例子中，一位渴望参加奥运会的运动员在比赛训练和照顾弥留之际的男友之间摇摆不定，是继续训练冲击奥运资格，还是陪伴男友度过最后一段路，这确实非常纠结。但是问题在于随着问答的深入，却发现真正使得问者纠结的并不是两者之间的选择，而是她内心对参加奥运选拔的恐惧导致她将照顾男友作为逃避的理由，从而摇摆不定。正是通过问答，她最终才能直面自己的内心，并且做出最正确的决定。而问答开始时的第一封信，现在看来竟全是不实之词。所以，第一条，<strong>要获取正确的答案，你必须说出并直面自己内心真是的想法，这也是最重要的。</strong>正是如此，这位选手获得了自己想要的答案，这个答案来自于她得内心，却被答者的话所激发。也许很多时候在咨询时，我们想要的并不是建议，而是需要通过别人的声音，说出自己的想法，来使得自己更加坚定。所以，不要悲伤，也不要犹豫，倾听自己内心的声音。ps：最后这届莫斯科奥运会被日本抵制了。</p>
<p>第二个咨询的人是一个地地道道的文艺失业青年，一心追随音乐的道路，却将家中老店和老父置之不理，是社会责任还是个人理想，我想这个问题随着越来越多的空巢老人的出现横亘在很多青年的面前。可怜天下父母心，他们这代人拼搏不容易，同时又生活在七大姑八大姨各种push的环境下。你让他们不催你结婚，不催你成家立业，他们的压力也是很大的。这种成长环境、观念与生活环境的差异构成了一条深深的鸿沟。能够化解它的，也就只有亲情与相互理解了。这位青年在父亲最终的遗愿与杂货店的建议之下，选择了继续音乐的道路，但这是一个更接近真实地故事，而不是励志的故事。所以他最终没被人记住，但他的歌曲以某种方式流了下来，供人传唱。</p>
<p>人的命运随着时代的命运起起伏伏，这在第三个故事中尤其得到了体现。日本经济战后迅速复苏，并借朝鲜战争的东风经济强势增长，到七十年代增速保持9%。但是七十年代中期经济慢速增长。85年之后由于美国限制开始经济泡沫，房价一涨再涨，直到破裂。整个九十年代都被拖累。这个故事正是发生在七十年代中期。经济增长变缓，家庭的巨变导致浩介必须面临是否与破产父母一同逃亡的抉择，尽管向杂货铺咨询之后他决定相信父母，一同逃亡。但是裂痕在一出发时就已注定，绝境下的父母却毫无知觉。就这么，浩介离开了父母，过上了一个人的生活，自以为做出了正确的决定。但是多年后却得知父母自杀以帮他掩盖身份的事实。悔恨涌上心头，那时的他已不相信真情。或许我们大多数人都只看表面，不看内心。为冲动所蒙蔽，小裂缝以至于无法挽回，最终悔之晚矣。</p>
<p>人真的是矛盾的集合体，咨询时靠别人，却在没获得自己想要答案时怪别人。依赖别人的建议，却又可能在做出决定后将别人曾经有过的指导置之脑后。但是不管怎么样，不管有什么样的烦恼，书中说：<strong>店主的回答之所以能发挥作用，原因不是别的，而是问者自己都很努力。如果自己不想积极人长得生活，不管得到什么样的答案都没用。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;东野圭吾先生一反常态，写出解忧杂货铺以鐁读者，实在是让人眼前一亮。&lt;/p&gt;
&lt;p&gt;小说的设定围绕在东京边的一个小镇上的过气杂货铺“解忧杂货铺”。此间卖得东西倒无甚特别，但是妙就妙在有一个认真地店主爷爷，无论你有什么烦恼或是忧愁，他都会帮你认真回答。开始或许只是小朋友们问一问
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>我在鹅厂这一年</title>
    <link href="http://meijing0114.com/2015/02/19/feel001/"/>
    <id>http://meijing0114.com/2015/02/19/feel001/</id>
    <published>2015-02-19T14:39:52.000Z</published>
    <updated>2015-02-19T14:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>掐指算来，自从四月份入职，我在鹅厂已经待了将近一年啦。羊年将近，心中有不少的感悟，不吐不快。<br>这一年的时光可以用几个关键词来概括：成长、职场、家庭、理想、影响力。</p>
<p><img src="http://40.media.tumblr.com/f01468689b6e02c65bf84beb4676eb7f/tumblr_njzwh7dsUx1rel1ijo1_500.jpg" alt=""><br><strong>成长</strong>肯定是多方面的，公司在个人发展方面分的很细，我觉得很好，也可以拿来做一下对照。我选取出其中一些个人认为比较重要的部分做讨论：</p>
<ul>
<li>学习能力：对个人来说，学习能力有一定的增长，但并不太多。主要的提高在于更新了自己的方法论，重新从零开始，意识到很多学习时常见的谬误并且在日常学习中尽量避免之。一方面是方法上的，触类旁通以及从基本的开始学，追本溯源，不断深化。令一方面是情绪上的，更加开放自己的心态，坦然面对分歧，以共赢的态度进行探讨。同时注意不要让错误蔓延，及时制止之。</li>
<li>创新能力：本来一直想写个专利，有了不少想法，但是在起初的两个被毙掉之后，之后的都没有深入去讨论。在创新能力方面，应该说没有太多进步。更多的是一种保持。工作中小微的创新比较多，能够用到创造力的地方也不太多，更多的是一种按部就班的工作。回顾起来，脑洞大开最多的时候是在做mini-project的时候，那真是招之即用，发挥自己最大的想象力，而且优化起来动力足，无止境。这种感觉是最佳状态，但是可惜很难在工作中复制这种感觉，这需要我和同事都具有更高的水平和更多的投入感。</li>
<li>运营运维能力：通过运维一个老的项目，充分意识到了文档、注释、代码可维护性以及成熟的运营工具对老项目的重要性。同时也充分的意识到，一个赶出来的项目，一定是不够好的，需要多次优化的项目。很多时候，这种维护成本取决于程序员的自觉，对代码和项目的责任心，以及吃过暗亏之后不想让别人再吃暗亏的国际主义精神。。</li>
<li>业务能力，后台开发：业务能力肯定是有大幅度提高的，前后端分离、接口约定的合理性、代码的质量、数据库设计、自测用例的完善性、解耦是否彻底、工具使用，这些应该都从属于后台能力。从这个角度上来看的话，在这个方面进步应该是最大的。</li>
<li>项目管理能力：在这一年间，有几个子项目作为Feature Owner进行了一些初步的统筹和管理的事宜。收获很多，至少保证能够做到，对这个项目最了解的人是我。同时也深深的感受到项目统筹的辛苦和繁琐，一个项目的成功，必须依赖于可靠而又核心的人员。这些人员应该具有的特质是负责任、能力强、善于解决问题并且有足够的耐心。通过这些骨干人员，各个团队才能够串联起来，团队的氛围也会非常向上，通力合作，最终把一个项目成功的做起来。但是这其实并非个人兴趣所在，更希望的是能够和聪明人合作，这样就能够最大程度的减少这些沟通上面花费的时间。更多的把精力放在自己感兴趣的地方。</li>
<li>解决问题能力：解决问题的能力是全方位的，不仅仅是技术问题的解决。一些与外部门的沟通问题，或者是产品上面的一些问题都考验着自己。其中印象最深的是与外部门的一次沟通，对方态度很差，出言不逊。但是还好hold住了，从解决问题的角度出发，比较耐心的沟通了一下，事情解决的还算好。很多时候都是非常需要相互理解的，换位思考之后，去了心结，沟通和解决问题也会更加顺畅。</li>
<li>知识传承：主要是通过分享的方式进行知识的一种分享，一直说要写一篇新人必备的文档，梳理一下，应该是非常适合新人的。</li>
<li>高性能与高可用性：这一个阶段还主要停留在简单实现出来，并没有考虑太多性能与可用性方面的因素。因为看到的系统不够多，所以对瓶颈和实用性并没有特别深入的影响。这个是硬实力，自己一定要好好加强。<br><img src="http://41.media.tumblr.com/e5b7d8e8fb2c96fa27da4bf1cfb11a7c/tumblr_nh9atbj52G1sf1m92o1_500.jpg" alt=""><br>进入<strong>职场</strong>短短一年的时间，的确有很多体会。与同事、领导之间的相处，一些职业的礼仪和规范、公众前演讲的能力、得体的衣着打扮，对我来说都是很新的领域。在这一年中，碰到最欣赏的同事是那种比较聪明，但不钻牛角尖，负责任，就事论事的人。最讨厌的就是自作聪明，不会思考，脾气暴躁代码质量极差的那种。不过职场中，各种人都有，相处中时时自省，当做鞭策自己的动力吧。作为IT部门，大家都比较随意一点，不过倒也符合自己性格。另外，最近对衣服搭配也稍有兴趣，多尝试一下，穿的得体，让自己和他人都舒服才是最好的。</li>
</ul>
<p>工作之后，与<strong>家庭</strong>的关系和学生时代完全不同。进入社会之后，更能够理解父母的辛苦，也会多想想能够为家里做些什么。同时年龄越来越大，谈婚论嫁之事也不可避免的来到了。这样一种新的时期下，会更多更实际的去想一些事情的可行性。而不是停留在以前的那种纸上谈兵。这对自己是好事，因为只有认真地考虑了之后，你才会知道自己到底有没有准备好。<br><img src="http://40.media.tumblr.com/1c71f5f827260f74b77c168c0e91239c/tumblr_njrn9fmsgU1qaatj7o1_500.jpg" alt=""><br><strong>理想</strong>很丰满，现实也不算太骨感。在这样一种情况下，就很容易温水煮青蛙了。当你对自己的反思不够的时候，太多的停留在comfort zone会让你失去一些前进的动力。误打误撞的进入互联网行业之后，当初push自己进入的原动力：“用技术创造出真正改善人们生活的产品”，是否已经都忘记了呢？你的追求卓越之路，是否停顿的太久了？要加油啊。</p>
<p><strong>影响力</strong>是一个让我非常困惑的点，在部门内我的理解是技术上更多的影响他人，能够发出自己的声音并被最终采纳。公司内的影响力应该是你所做的组件能否被更多的人所采纳，这点其实做的不太好，没有利用好现有的code平台，而且部门内似乎也没有去做过类似的推动。至于业界的影响力，从身边的人看来应该是结交更多的人，将自己的解决方案打包推广出去，或者在某个领域为大多数人所熟知。这一年，第一点做的还不错，后两点几乎没什么进展，这可能会让自己变得有些狭隘。所做的东西只适用于一处，拿着肯定不是一个足够优雅和通用的方案。新的一年，希望能够在后两点有所突破。</p>
<p>总结来看，我还是觉得自己承担的不够多，进步的不够快，但是误打误撞之下，取得了一些成绩，新的一年就要到了，给自己加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;掐指算来，自从四月份入职，我在鹅厂已经待了将近一年啦。羊年将近，心中有不少的感悟，不吐不快。&lt;br&gt;这一年的时光可以用几个关键词来概括：成长、职场、家庭、理想、影响力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://40.media.tumblr.com/f0146868
    
    </summary>
    
      <category term="生活随感" scheme="http://meijing0114.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%84%9F/"/>
    
    
  </entry>
  
</feed>
