<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meijing0114的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meijing0114.com/"/>
  <updated>2017-04-11T13:52:51.000Z</updated>
  <id>http://meijing0114.com/</id>
  
  <author>
    <name>meijing0114</name>
    <email>525937005@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Redis入门指南》之基本的数据结构</title>
    <link href="http://meijing0114.com/2017/04/11/redis001/"/>
    <id>http://meijing0114.com/2017/04/11/redis001/</id>
    <published>2017-04-11T13:44:10.000Z</published>
    <updated>2017-04-11T13:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《redis入门指南》这本书入门不错，值得推荐，每一章都有些干活。这里分别加以总结，并增加了自己的一些理解。</p>
<h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>这是最常见的key-value的结构，但是现在的no-sql远不止于此：</p>
<p>我们来看看四个使用字符串类型的场景：</p>
<ul>
<li>INCR num： 进行文章的访问pv统计；</li>
<li>INCR num： 生成自增ID，类似于mysql的auto_increment；</li>
<li>SET key value：存储序列化的json或其他数据结构；</li>
<li>GETBIT key offset: 通过bit位来记录大批量用户的单个状态，如性别，方便快速读取和修改，占用空间小，性能高。必须采用预分配+用户id映射，避免不必要的内存消耗；</li>
</ul>
<h3 id="散列类型"><a href="#散列类型" class="headerlink" title="散列类型"></a>散列类型</h3><p>散列类型略微复杂一些，对应的是mysql中的列数据，但是有对比，才有伤害：</p>
<p>假设双方都要存储一张Person表，具有如下的属性：</p>
<ul>
<li>性别</li>
<li>身高</li>
<li>拥有车的品牌</li>
</ul>
<p>这就尴尬了，不是每个人都有车，哪来品牌呢？mysql一定要有冗余的字段，但是redis的散列类型就不需要。<br><code>hset richwang sex male height 180 carbrand bmw</code><br><code>hset poolgeorage set male height 170</code></p>
<p>我们再来看看散列常见的两个场景：</p>
<ul>
<li>HKEYS key | HVALS key | HLEN key : 不在使用结构化的数据来进行key-value存储，而是分字段更灵活的存储，方便单独的修改和更新，每次不需要全量json的更新</li>
<li>HEXISTS key | HSETNX: 存储某一类映射关系，确保一一对应，比如person和身份证，一旦添加之后，无法用相同的身份证再次添加。</li>
</ul>
<p>再提一句，散列是redis中唯一支持数据类型嵌套的类型。</p>
<h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><p>列表类型主要是进行数组的描述，一般常见的操作就是向列表两端添加元素，或者获得列表的某一个片段。</p>
<p>从实现上来讲的话：双向链表实现，头尾插入非常方便，头尾获取也非常快，但是对中间元素的读取和写入都比较慢，所以在使用的时候也应该尤其注意这一点。</p>
<p>另外还有一个值得注意的性能指标，LLEN命令会直接读取现成算好的长度，而不是像mysql那样<code>select count(*)</code>进行遍历数据表。</p>
<p>下面来看看列表类型的场景，还是很多的：</p>
<ul>
<li>新鲜事Feeds，对于一个SNS而言，新鲜事的场景很多，用户每次打开，总是要拉取朋友的新鲜事。对于每个用户而言，使用一个列表存储用户能看到的动态十分方便。每次只要给出当前的index，就可以拉取其新鲜事，而且头尾存储，性能很高。</li>
<li>日志记录：将日志记录到列表中，方便进行头尾查看。</li>
<li>ID列表，通过固定顺序将id存储列表类型，使用 LRANGE numbers 0 2 进行分页读取，缺点在于已有顺序不太方便调整。结合活动中心的案例，如果是一枪头发布，使用这个方案没有问题，但是如果活动有上线下线的过程，那么最好还是不要使用这个。</li>
<li>队列循环：RPOPLPUSH source destination，如果source和dest相同的话，那就是一个循环。非常适合进行url的监控，循环的同时还可以不断的加入新的网址。整个系统容易扩展，允许多个客户端同时处理队列；</li>
<li>评论列表：如果评论一经发布不可修改，那么也比较适合序列化之后，存入列表，进行插入和拉取。</li>
</ul>
<h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><p>对于那些元素不可重复的场景，集合类型是必不可少的。很多时候在一些场景下，容易把集合和列表类型混用，所以最好对其两者特性都能够有所了解。集合的主要应用场景一个是不重复，另一个是集合之间的交集、并集、差集。</p>
<p>一个非常常见的场景就是标签的存储。使用两个集合类型：<br>集合1：标签集合<br><code>SADD labels teacher students worker engineer</code><br>集合2：标签下属人群集合<br><code>SADD teacher tom ted lily</code></p>
<p>通过这样的设计可以实现如下的几个功能特性：</p>
<ul>
<li>通过labels集合保存所有的不重复的标签，方便添加、拉取和删除</li>
<li>不同的标签对应了不同的下属人群，那么标签之间非常常见的交集、并集、差集操作，都可以很方便的利用集合的SDIFF DINTER SUNION来实现</li>
</ul>
<p>针对第二种情况，如果是使用mysql存储的话，就会涉及到一个非常复杂的join的过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT p.name FROM person_labels pl, person p, labels l WHERE pl.label_id=l.label_id AND (l.label_name IN (‘teacher’, ‘worker’)) AND p.person_id=pt.person_id GROUP BY p.person_id HAVING COUNT(p.person_id)=3;</div></pre></td></tr></table></figure></p>
<p>所以在这种场景之下，redis的集合类型还是非常的实用的。</p>
<h3 id="有序集合列表"><a href="#有序集合列表" class="headerlink" title="有序集合列表"></a>有序集合列表</h3><p>有序集合列表我个人感觉应该是为了互联网的榜单而生，它将每个元素都关联了一个分数。从上文中知道，redis中的列表类型使用了双向链表，获取开头和结尾的元素都是比较容易的，而有序集合则使用了散列表和跳跃表，其中跳跃表就是为了实现查找的log(N)效率而进行的实现。有了优点，不可避免的，它比列表类型更加费内存一些。</p>
<p>我们来看一个文章按照点击量来排序的实例，新建一个有序集合<code>article:pageview</code>，其中存储的是<code>articleId</code>，而其score就是文章的点击量。<br>每有一篇文章增加了点击，我们就可以使用<code>ZINCRBY article:pageview 1 $articleId</code>，来进行对应的操作。<br>按照访问量来获取所有的文章列表，就可以直接使用<code>ZRANGE article:pageview 0 -1 withscores</code>  加以实现。</p>
<p>另外一个比较常见的应用就是按照score归档数据，比如score定义为时间戳，那么就可以使用<code>ZREVRANGEBYSCORE articles 六月的timestamp 五月的timestamp limit 0 3</code> 这样就可以获得在六月和五月之间的前三篇文章了。</p>
<p>同时有序集合也是支持一些集合的操作的。举一个例子，上海市教育局想看看黄浦区的教育水平如何，选取了大同中学和大境中学两个学校，分别对应了两个有序列表：datongScore和dajingScore，分别存储其每个学科的平均分。学科的id是完全一样的。那么想看看黄浦区的学科平均分，但是由于两个学校的考题难度不一样，又需要一定的加权处理的时候，这时候就需要执行：<br><code>ZINTERSCORE huangpuScore 2 datongScore dajingScore WEIGHTS 1 0.8</code></p>
<p>再获取一下其中的结果：<br><code>ZRANGE huangpuScore 0 -1 WITHSCORES</code> 即可获得想要的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《redis入门指南》这本书入门不错，值得推荐，每一章都有些干活。这里分别加以总结，并增加了自己的一些理解。&lt;/p&gt;
&lt;h2 id=&quot;常见数据结构&quot;&gt;&lt;a href=&quot;#常见数据结构&quot; class=&quot;headerlink&quot; title=&quot;常见数据结构&quot;&gt;&lt;/a&gt;常见数据结构
    
    </summary>
    
      <category term="redis" scheme="http://meijing0114.com/categories/redis/"/>
    
    
      <category term="存储" scheme="http://meijing0114.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>读《途客圈创业记-不疯魔，不成活》</title>
    <link href="http://meijing0114.com/2017/03/12/book015/"/>
    <id>http://meijing0114.com/2017/03/12/book015/</id>
    <published>2017-03-12T11:47:23.000Z</published>
    <updated>2017-03-12T11:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img1.doubanio.com/lpic/s28482679.jpg" alt=""></p>
<p>创业维艰，这句话我们听来似轻描淡写，但对本书作者而言，体会不可谓不深不痛。从字里行间，都可见他对“途客圈”这个产品、团队和公司的感情。幸好他是一个技术人员，理性的分析和还原，以及对技术的追求让本书有很多值得借鉴的干货。</p>
<p>作者的背景并非互联网，而是很多人不知道的电信行业公司，七年时间，已经进入管理岗位。于此情况创业，风险不可谓不大。但怎么说呢，每个技术人员都有自己打造产品的梦，再加上一枪热爱，就让他踏上了这条路。纵观他在途客圈的整个创业历程，跨度两年，开始于iWeekend创业周末的如履薄冰，结束于产品方向的不可调和矛盾。融资方面，从创始人个人出资，到顺利拿到了创新工场的50万融资，却未能更进一步，最终被世界邦并购结尾。而产品线从网站途客圈1.0的web站点开始，其中历经了旅行计划大赛、当地自助游项目尝试、旅行整理项目、欧铁项目、城市指南项目等多个不同的旅游领域的方向和尝试，变化不可谓不多，这也是被很多人诟病以及作者自己反思的重要一层：太过于分心。</p>
<p>当你很快速的看完这本书的时候，的确会给你很多震撼，笔者自己也参加过一些小型的hackthon项目。一个项目从清晨开始时的大家潮气蓬勃，雄心万丈，到定下需求时的略有纠结，再到开发时的不断调整和产漏补缺，以及深夜攻坚时候的绞尽脑汁，最后出成品时候的纠结、忐忑和一份自信，其过程可以理解为一个微缩版的分娩过程。看着这么多优秀的人，不断的进行一个个项目的尝试，又不断的经历项目和公司变动的起起伏伏，有时辛苦完成的项目在不知情的讨论之下都可能会胎死腹中。不得不说，创业是一条血腥的路，也是一条不断挑战自我的路，对管理者和执行者要求极高的一条路。</p>
<p>作为公司核心的创始人和CTO，最后又黯然退出，作者主观的判断不少。虽说最后有不断的反思，但仍有一叶障目之感。但是作者对技术视野和技术管理的认知，实在是让人获益匪浅。试想从项目一开始，仅仅是django和jquery ui的方式，随着项目不断的开展起来，新的技术人才的引进，新的技术框架的使用，这些变化往往对CTO的冲击很大，但是作者却能始终把握住技术之先。一方面不断的对员工进行技术培训，另一方面在技术选型上做到了提前量和前瞻性，并未出现技术赶不上产品的情况（产品要大发展，却被技术缠住手脚，实为技术人员之耻辱）。同时还能在自己的业余时间进行充分的技术尝试，优化团队的技术架构和建设流程工具，真的是令人钦佩不已。但正如作者自己所言，他的劣势在于技术人脉的缺失，也导致了他招人上的一些障碍。不过这并不妨碍他的技术上能够驱动公司前进。</p>
<p>这本书并不鼓吹，都是十分坦诚的分享，负荆前行的创业路。既有拿到融资的欢欣雀跃，也有从头搭建工作环境的接地气，更有裁人的残酷。两年的时间，不长不短，互联网圈子也同样是风云变化，他们创业那时的我仍在象牙塔中封闭自己，却已有这么多人拼劲全力实现自己的理想。想想此时此刻，也必是如此。这也就不得不促使自己不断精进，蓄势而待发。我想这也是这本书能够带给我们最大的意义之一。</p>
<p>只是可惜的是，产品方向的迷失，让他们始终没有找到成功的那把钥匙。但在技术管理上，作者的不少见解都让人受益匪浅：<br>技术合伙人应该具备的能力</p>
<ul>
<li>开发产品的能力<ul>
<li>定义产品架构，进行留有余地的技术选型<ul>
<li>实现层面，要能招到人</li>
<li>技术层面，能够满足一定时间内的用户增长</li>
</ul>
</li>
<li>自己写代码</li>
<li>全栈，哪儿补哪儿，至少知道问谁</li>
</ul>
</li>
<li>组建团队的能力<ul>
<li>打造技术人脉<ul>
<li>不断强化自己各方面的能力，让别人信服</li>
<li>愿意真心真意的帮助别人</li>
<li>有困难的时候，寻求别人的帮助</li>
</ul>
</li>
</ul>
</li>
<li>领导团队的能力<ul>
<li>关怀必不可少</li>
<li>入职培训<ul>
<li>公司历史、文化、团队、组织结构</li>
<li>公司产品历史、现状、方向</li>
<li>产品技术架构、方案选型、路线图、技术优势和挑战</li>
<li>产品开发流程、内部工具使用</li>
<li>重要组件讲解</li>
<li>代码主线流程的白板演示和代码走查<br>*分享不能停</li>
</ul>
</li>
</ul>
</li>
<li>自我驱动的能力<ul>
<li>必须让自己保持在技术前沿</li>
</ul>
</li>
</ul>
<p>大家有兴趣可以自己撸一遍看看，看自己是否具有这些能力呢？</p>
<p>最后的最后，推荐大家关注作者的公众号：程序人生，干货非常之多，让人羞愧于自己的技术视野，程序员必备。</p>
<p>ps: 我自己的公号：<br><img src="http://wx4.sinaimg.cn/mw690/67ad48bbgy1fdkata0zqwj20zk0g8gnn.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img1.doubanio.com/lpic/s28482679.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;创业维艰，这句话我们听来似轻描淡写，但对本书作者而言，体会不可谓不深不痛。从字里行间，都可见他对“途客圈”这个产品、团队和公司的感情
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>读《精进，如何成为一个很厉害的人》</title>
    <link href="http://meijing0114.com/2017/02/26/book014/"/>
    <id>http://meijing0114.com/2017/02/26/book014/</id>
    <published>2017-02-26T07:10:32.000Z</published>
    <updated>2017-02-26T09:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实开始对这本书带着不好的期待，主要原因是看到了一篇短评，说其充斥着鸡汤，而且作者并不够“成功”来分享“成为很厉害的人”的经验云云。不过，抱着姑且一看的心态，我还是抱着这本书，读了三周左右。读的过程中，我处处警醒，时时提防，生怕落入鸡汤俗套，现今想来，实为可笑，鸡汤无毒，只是看何时何人来饮。你看，我读完之后，加了些佐料，还想为诸君呈上。<br><img src="https://img3.doubanio.com/lpic/s28588315.jpg" alt=""></p>
<p>第一章讲述时间，确实有一些非常实用的技巧。比如人往往有大志，也有当前要面对的小障碍。尽管大志让人心潮澎湃，但是遇到眼前要完成的作业时，却时常拖延症泛滥。如果能切换视角，那么就能更加获得前进动力，且不被眼前困难烦扰。又比如时间的快与慢结合，将所做事情按照不同的价值分为四种，那些“半衰期”长的自然要多做，而“一时爽”的不如少做。而我也据此，分析了一下自己每周，尤其是周末空闲时间所做事情的安排，发现时常自己不是在生活，而是在被生活。很多诸如做饭之类的杂事不知不觉之间占据大部分时间，而真正想做的却是一拖再拖，这点尤其值得反思。那些无产出的事，的确应该快刀斩乱麻，而把真正的精力留给半衰期长，能带来长久满足或效益的事情之上。</p>
<p>随后作者讲述如何“破心障”，身边的人，包括自己，在生活中难免迷惘。心中无大志，每日庸庸碌碌。为了破除心障，则必须给自己更高的标准。一个实用的技巧是回顾你最近的一周、一月、一年最有意义的事，如果找到了，那么你今后也可坚持做这样的事。笔者搜肠刮肚，却十分汗颜的未找到真正“有意义”标准的事。大家也可以仔细想想，一年过去你会为自己写什么样的故事？否则人生苦短，蹉跎无为。远古社会男征女织，烦恼在于无选择。而今社会，选择太多，所以必须经过精细化的思考，才能获得所需。说到这点，我和朋友都有一些体会：我们往往在一些重大的事情上随性随意，而在一些不那么重要的事情上无比纠结。比如买房这件事，从单价而言，在上海可以抵得上很多人数十年的收入，但看房时的我们却十分随意，很多时候并未投入与之相匹配的精力，而往往轻信中介或嘈杂的信息。个人反思之下，此时应该打起十二万分的精神，而非随波逐流。</p>
<p>现在人人都知道行动大于语言，但对行动的理解却浮于表面。面对要做的时期，鸵鸟战术比比皆是，而浅尝辄止更是随处可见。究其原因，作者认为必须目标导向，而不是空空的寄托于意志力。而且行动之时，并不能一成不变，作者举了很好的制作陶器的例子。优秀的制陶者能够体察陶器在泥胎状态下的变化，并且随之而改变力度，做出佳品。这意味着两点，一是你要学习足够的pattern，能够识别陶器的变化，另一方面是你有足够多的技巧和解决方案。做成缺一不可。更为可贵的一点是，敢于颠覆现有的努力，只为更好的结果。要达到这点，没有点追求只怕是不行的。另一个实用的技巧是做事分层，先啃硬骨头，这能让你更轻松些，正如庖丁解牛一般。</p>
<p>说到学习， 很多人非常擅长信息搬运工，包括我有的时候，往往懈怠。搬运到自己的笔记本中之后，就任其积灰。为了避免这一点，你必须做一些横向或纵向的对比，同时必须要输出，写作是一个不错的方式。而技能是更有说服力的表现。如果知识不能转化为技能，那么我认为这只是一种消遣。</p>
<p>曾经有一个挺有名的论述：我们的知识体系是一个圆，圆越大，未知也就越多。我对此深以为然，所以我会关注很多，自己认为是兴趣广泛，但是看完作者的“向未知的无限逼近”，却意识到了贪多而不得。所以我对自己关注的领域进行了如下的梳理：</p>
<ol>
<li>社会新闻：网易</li>
<li>搞笑gif：网易</li>
<li>体育：网易</li>
<li>电影资讯：微信公众号</li>
<li>技术成长：微信公众号</li>
<li>严肃新闻：界面</li>
<li>互联网与科技：湾区日报</li>
<li>其他随机领域：即刻小报 知乎日报</li>
<li>国内外大新闻：网易</li>
<li>建筑与艺术：壁下观播客</li>
<li>朋友动态：朋友圈</li>
<li>汽车：汽车之家app</li>
<li>网文：起点</li>
</ol>
<p>天啊，共有十二个领域之多，我看的过来么！必须加以缩减：</p>
<ul>
<li>技术成长<ul>
<li>osc china</li>
<li>聊聊架构</li>
<li>程序人生</li>
<li>InfoQ</li>
<li>掘金</li>
</ul>
</li>
<li>互联网与科技<ul>
<li>macTalk</li>
<li>滴滴答答</li>
<li>极客公园</li>
<li>虎嗅</li>
<li>大魔王</li>
<li>二爷荐书</li>
</ul>
</li>
<li>古今建筑与艺术<ul>
<li>壁下观</li>
<li>不定期纪录片</li>
</ul>
</li>
<li>旅游<ul>
<li>旅行家杂志</li>
<li>feekr旅行</li>
<li>稻草人旅行</li>
<li>旅行雷达</li>
<li>爱浪客</li>
</ul>
</li>
<li>时尚服装<ul>
<li>杜绍斐</li>
<li>拒绝基本</li>
</ul>
</li>
<li>严肃新闻<ul>
<li>界面</li>
<li>南方周末</li>
<li>人物周刊</li>
</ul>
</li>
</ul>
<p>拼死拼活，终于缩到了六个，真是要人亲命，接下来会缩到五个以下，诸位不妨也试试，体会下酸爽。相信都会有所体会。</p>
<p>科比说：你见过洛杉矶凌晨四点的太阳么？而我说，即使你看过也没用，因为你的优势根本不是打篮球。。智商是一个非常单一，不可预测，标签化，不规范的度量人的能力的标准（我这么说也可能是我不是此标准的受益者=:）。普通人当然也有自己的优势，而且是可以学习的。想到大二的时候有些同学因为花的时间多就被称为“编程天才”，不禁服了人们的“思想惰性”，把一切归为天才，那我就不用努力啦！木桶效应对大家荼毒甚多，高考的各科均衡确实是重大原因之一，而现在，你如果没有“长板”，只怕很难在大城市立足呀。这里推荐一个优势识别器：<a href="http://www.apesk.com/Advantage-detecting/index_hr.asp?hr_email=18670054561" target="_blank" rel="external">http://www.apesk.com/Advantage-detecting/index_hr.asp?hr_email=18670054561</a> 自己做了一下还是比较准，“专注”是我的优势，希望可以发扬光大！</p>
<p>读至书的最后一章，其实我心里有点着急，因为我始终没有找到“如何成为一个很厉害的人”的答案。现代人嘛，功利心态无可厚非，但最后一章没找到答案，反而被作者问住了：</p>
<blockquote>
<p>一个现实的问题是：如果你与大多数人相比，没有什么特殊之处，那么为什么社会要给你超出平均水准的回报？</p>
</blockquote>
<p>愣了一下，作者接着说：</p>
<blockquote>
<p>在现实世界中思考理论问题，在理论世界中思考现实问题，从而构建自己的经验和知识体系</p>
</blockquote>
<p>我仔细想了想，刚开始的自己确实动机有所不纯，以为此书有黄金屋。不过虽然没有找到黄金，启示不少：</p>
<ul>
<li>厉害并非一个标准，财务自由也并非一切幸福的来源或前置条件，它更像一个专一价值观被滥用和宣扬的范例</li>
<li>时间有快有慢，工作时快，家庭时慢，让你的生活更有节奏</li>
<li>专注是品质，现在不是比谁的信息源多，而是比谁的过滤器好</li>
<li>蛮牛一往无前却缺少回环，人生应该更有智慧</li>
<li>行动不一定是意志力，要听从自己心底的声音，发现无趣中的有趣，看看《我在故宫修文物》呗</li>
<li>找到你心中的“巴拿马”，带着梦想上路，且行且珍惜</li>
</ul>
<p>如果有一些触动你，不如，你也去看看？</p>
<p>（附） 荐书<br>《为什么要读经典作品》<br>《哥德尔、爱舍尔、巴赫-集异璧之大成》<br>《创意的生成》<br>《每周快乐指南》<br>《无限的清单》<br>《禅与摩托车维修艺术》<br>《创业维艰》<br>《只是为了好玩》<br>《反叛的科学家》<br>《程序员修炼之道：从小工到专家》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实开始对这本书带着不好的期待，主要原因是看到了一篇短评，说其充斥着鸡汤，而且作者并不够“成功”来分享“成为很厉害的人”的经验云云。不过，抱着姑且一看的心态，我还是抱着这本书，读了三周左右。读的过程中，我处处警醒，时时提防，生怕落入鸡汤俗套，现今想来，实为可笑，鸡汤无毒，只
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="个人成长" scheme="http://meijing0114.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>新西兰-那片上帝自留地</title>
    <link href="http://meijing0114.com/2017/02/19/travel002/"/>
    <id>http://meijing0114.com/2017/02/19/travel002/</id>
    <published>2017-02-19T14:54:00.000Z</published>
    <updated>2017-02-19T14:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>新西兰的热，这两年尤甚。第一次知道新西兰，当然是大名鼎鼎的彼得杰克逊的指环王和霍比特人。总觉得此景只应天上有，人间能得几回闻。也怪不得人家都说，新西兰是上帝的自留地和后花园。再加上去年的时候，黄磊夫妇应邀去新西兰度了蜜月，看了下行程亮点颇多，于是就有了属于我们的新西兰蜜月十二日之旅。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-f908867579c85ea3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阿贝尔塔斯曼国家公园"></p>
<p>十二日的行程，近乎十个城市，超过十二种体验。新西兰让我看到了地球的另一面。在中国如此大人口密度的经验不提，在欧洲也未曾见过如此大气磅礴而又多变的自然景观。一个狭长之岛屿，西海岸看日落，东海岸观鲸，北岛毛利文化神秘诱人，南岛森林公园流连忘返。给我印象最深的，则是前往米尔福德峡湾的94号公路。尽管这里号称新西兰最危险的公路之一，但它同时也是新西兰最美的公路。整条公路从丘陵地带起步，逐步深入深林与大山的中心，雨洗刷着山谷与行车，让人总觉得误入神仙居所。而一条条临时积雨而成的瀑布，就如同山神的护卫，两两成对，守护峡湾。最令人震撼的，就是独行穿过一条三公里的隧道，汽车在其中摸索，只有灯光照亮前路。而刚一出隧道，就可见广阔的天地郁郁葱葱，仿佛世外桃源一般，心情豁然开朗。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-b97d59d16d9c8fd1.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="凯库拉观鲸"></p>
<p>当然了，景色固然是令人心旷神怡，但在这里，更打动我的是他们各种非同寻常的体验。这里没有排长队的参观建筑，也没有上车睡觉，下车拍照的紧迫感[ 旅行团除外:) ]。而是更多的体验至上主义。如果你体力充沛，可以参与森林公园的五日徒步+皮划艇穿越，在林中与鸟儿相伴而眠绝对是难忘的体验。如果你只想散心，那么两个小时的hiking就能让你不太疲惫的同时饱览美景，不虚此行。而如果你爱好极限运动，那你可来对地方了！无论是跳伞、开飞机、滑翔伞，还是蹦极、360度快艇旋转、溪降，总有一款适合你。就算你是宅男属性附身，那直升机饱览震撼冰川，流浪者号巡游峡湾，皇后镇的世界级spa，凯库拉观鲸，还有让你酒酣耳热的葡萄酒之旅足以让你直呼过瘾。凡此种种，不一而足。当我在丛林里随向导穿行徒步冰川时，当我手控飞机直飞蓝天时，还有纵马在指环王拍摄地的山水之间时，心里总有一句“太tm过瘾啦！”。或许这就是新西兰能给你的，独一无二的体验。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-2375bf328aa20b61.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="山中自驾，偶遇红灯"></p>
<p>如此纷繁多样的风景，没有自驾的交通方式，很多都难以到达。由于这里是右舵驾驶，租车前的我不免忐忑不已。而刚拿到车的时候，除了犯下“转弯打雨刮”的低级错误之外，还未改掉自己国内开车的痼疾：不按规则让行。国内转弯和变道，是个无穷无尽的博弈，你快一点，对方就要让你一点，每次下中环我都要屏气凝神，生怕有人插我一脚。不过新西兰规则明确，人人按规则而行，不同优先级行驶规则的严格执行，反倒让我格格不入了。尽管刚开始收到了不少白眼，不过习惯之后，倒觉得更为轻松容易，因为无人破坏，所以可以一路畅行，所谓欲速而不达。<br>有人说自驾旅途冗长无趣，但我却颇为喜欢。行驶在山中雨中，桥上岸上，海边崖边。过一个个湾，看一片片海，翻一座座山，心开始和旅途融为一体。开始谈论平日里不会讨论的话题，开始陷入回忆。有时想到之前的幼稚会心一笑，有时看到眼前的美景阵阵惊叹，秒杀一片菲林。到著名景点的签到赶路固然重要，但与雨中弥漫雾气，溪流湍湍的山谷不期而遇，更是令人难以忘怀！停下休息片刻，听听鸟语，伸伸懒腰，再满怀精神的向目的地进发，这让旅途更为丰富立体，而心灵，似乎也在过程中获得了些许的宁静。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-55298803a072111a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到心中宁静"></p>
<p>作为一个移民国家，殖民国家，拥有原住民的国家，注定是多元与包容的。同时也是极富开创精神的。老子心中的理想社会是“小国寡民”，我并未深入读过，不敢说新西兰是否与他心中所想一致。但的的确确我看到了很多单纯的快乐。比如拥有指环王这一巨大旅游资源的格林诺奇，镇民坚决不肯开掘隧道，只怕一旦落成，接踵而至的旅游大巴破坏小镇宁静。又比如获评9+分的b&amp;b店主太太，对每个宾客都宾至如归，享受交流带来的快乐。似乎你遇到的很多人，都有棱有角，确是非常的发人深思。尽管不可避免的，文化认同、政治正确问题在这个有过殖民、征服、原住民的国家时有发生，但看得到其社会的一种努力的包容，至少在原住民的处理上，这里应该是比北美更好一些的。</p>
<p>在旅途的开始，心里会有紧张与期待并存，总觉得要达到两个人最好的蜜月预期。但随着旅程的渐入佳境，我们似已沉醉其中，从此心中无论如何，都有了这么一块给自己宁静的保留地。</p>
<p>附新西兰行程游记：<a href="http://bbs.qyer.com/thread-2671678-1.html" target="_blank" rel="external">中土世界–新西兰蜜月旅行南岛自驾十二日大环岛环游直播~</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新西兰的热，这两年尤甚。第一次知道新西兰，当然是大名鼎鼎的彼得杰克逊的指环王和霍比特人。总觉得此景只应天上有，人间能得几回闻。也怪不得人家都说，新西兰是上帝的自留地和后花园。再加上去年的时候，黄磊夫妇应邀去新西兰度了蜜月，看了下行程亮点颇多，于是就有了属于我们的新西兰蜜月十
    
    </summary>
    
      <category term="旅行" scheme="http://meijing0114.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>优秀伙伴在哪里？2016年度招聘心得</title>
    <link href="http://meijing0114.com/2017/02/04/work001/"/>
    <id>http://meijing0114.com/2017/02/04/work001/</id>
    <published>2017-02-04T08:40:50.000Z</published>
    <updated>2017-02-04T08:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年三月份第一次跳槽，随即承担起了部分团队的招聘工作，到现在为止，也是十个月的时间。起点面试了非常多的社招候选人，也作为校招宣讲嘉宾和一线面试官跟很多毕业生接触。其中有不少收获、感悟和反思，不吐不快。</p>
<p><img src="http://wx1.sinaimg.cn/mw690/67ad48bbgy1fcej6gp67ij20gi0qogmb.jpg" alt=""></p>
<h2 id="社招，乃是沙子里面淘金子的大工程"><a href="#社招，乃是沙子里面淘金子的大工程" class="headerlink" title="社招，乃是沙子里面淘金子的大工程"></a>社招，乃是沙子里面淘金子的大工程</h2><p>这一年下来，面试了大概十几个社招的同学。总结下来，有这么几种类型：</p>
<ul>
<li>本身毕业1-2年左右，在一家公司遇到了各种各样的瓶颈，包括但不限于公司解散、业务变化、工作内容无挑战等；</li>
<li>毕业3-5年，有一定的积累，但是并无非常明确的技术方向，对业务有较多了解，但对技术钻研不深，希望看看大公司的情况；</li>
<li>毕业5-10年，在某一方面业务非常熟练，但是思维模型过于固定；</li>
</ul>
<p>这三种不同类型的分布呢，中间最多，第一种次之，第三种再次之。</p>
<p>优秀的应聘者总是有一些相似的特点，但是坑爹的应聘者却各有各的不同。对于第一类应试者，很多人带有一种大学时期的迷茫的延续。随着大流上了大学，随后随着大流到了某家公司，看到什么热都去追一追，无论是生活上还是技术上。这类同学我一般都会拒绝。 人生在不同的阶段都有迷茫，包括现在的我也是一样。但是不能忘记的是追求答案的渴望，以及这种渴望所对应出来的实际行动。很多人都说自己对某某技术特别感兴趣，但是在简历和行动上却没有任何的体现。这在一二年工作经验的迷茫同学的身上尤为明显。</p>
<p>而对于第二类应聘者，往往需要非常仔细的考察。因为第二类同学具有非常强的反面试能力。所谓反面试能力，就是在面试的时候，表现出超乎预期的能力，非常熟悉面试的套路，而在实际工作中却成为了团队的“拖油瓶”。所以针对这类同学，一定要挖掘他们的深入和应变的能力。对于程序员来说，show me the code是一句金句。可惜在很多国内公司的面试中，完全不看重实际的code能力，而只看重一些系统和业务的能力，尽管这在一定程度上面是适应国内IT发展现状的。但是却会导致程序员的严重偏科，最终妨碍自己的发展。而且很多程序员，对面试写程序这件事情嗤之以鼻，不得不说是种偏见。那么对这类程序员的考察，深度是非常重要的，经过三年的积累，对某个领域应该有自己独到的见解与认识，在不被他牵着鼻子走的同时，要能够不断的质疑和提出新的问题让他回答。这种应变的能力，在互联网公司尤为重要！</p>
<p>第三类应聘者我碰到的很少，自己现在的阅历确实也无法hold住。但是和几个经历类似的同事有所接触，不得不说，是一种非常痛苦的经历。5-10年，管理岗会分流一部分，转岗项管、产品分流一部分，剩下的，除了大神小神，就是神坑了。其缺点主要在于 拒绝接受新生事物，不论是新的技术还是新的技术理念；缺乏求真知的精神，正常的讨论会演化成对他能力的质疑，每次讨论的结果貌似都是脸红脖子粗；效率不高，这点或许是因为工作模式陈旧的原因。我敢说，任何一个团队，只要有这样的同学在，那绝对是一个大大的悲剧。其他同学就等着深夜填坑吧！所以招聘太重要了:)</p>
<p>最近几年互联网大热，林林总总涌入不少培训班型的人才，其中不乏佼佼者。但总体来看，大浪淘沙，能淘到金子的概率少之又少，这也是为什么我更偏好于校招的原因。</p>
<h2 id="校招，则是石头里面挑玉石的细致活"><a href="#校招，则是石头里面挑玉石的细致活" class="headerlink" title="校招，则是石头里面挑玉石的细致活"></a>校招，则是石头里面挑玉石的细致活</h2><p>每年的九月开始，就是热热闹闹的校招。今年有幸参加了校招的大部分过程，从校园实地宣讲，到校招现场面试，以及最终的offer跟进。整个过程一波三折，想招到理想的校招生，真的不太容易。</p>
<p>校招的时候，我最看重的几个点。一是教育背景，大部分都是工作白纸，你的学校决定了你的智商和努力程度，这也是最近几年公司都在交大举行宣讲会的原因。二是实践经历，大家都迷茫，你自己杀出去接触社会，至少这个勇气就是值得鼓励的。三是计算机底子，有底子的人，见过几个，那是真不一样，看问题的角度都不一样，作为半路出家的程序员。我深知里面的痛，补课补到现在都还没补完。最后是思维能力，标题把应届生比喻成石头，也不无道理。作为一家非一线的互联网公司，对应届生的吸引并不足够，那么能够挑选到塔尖的玉石的可能性并不高。但是石头的优势在于可雕琢和培养。而且大家起点天资差别并不大，所以能够找到好的苗子，耐心培养一下，绝对是可堪大任的。</p>
<p>招聘校招面试的过程中，有几个候选人的例子倒是足以为戒。第一个同学一看就是技术尖子，对技术很有sense，但是性格太过于孤僻，沟通意愿和沟通能力严重不足。虽然我比较喜欢，但是leader pass掉了，这点如果不注意的话， 确实以后会非常制约他的发展和团队的合作。第二个同学研究生是最近非常火热的可视化的方向，这个方向有很多做头，但是他却总是藏着掖着，该展示的时候不能很快的展示出来，要么就是不明智，要么就是肚子里没货。从我的询问情况来看，第二种的可能性更多一点。哎，没有金刚钻，莫揽瓷器活。这点还是非常有普适性的。第三个同学教育背景不强，但是十分踏实，可谓一步一个脚印，同时也能够应答自如，非常可靠。这种同学是一种比较被青睐的类型。</p>
<p>自己作为一个理性的人，我很少相信感觉，除了喝醉和谈恋爱的时候。我坚信对人能力的判断的方法论，不过尽管如此，根据之前腾讯公司的统计，还是有至少一半的合格被招聘者进入公司后被评价为“低于预期”。所谓魔高一尺，道高一丈，唯有不断磨砺自己的技术，开阔技术视野，多与候选人打交道，才能练就一味，火眼金睛，与君共勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年三月份第一次跳槽，随即承担起了部分团队的招聘工作，到现在为止，也是十个月的时间。起点面试了非常多的社招候选人，也作为校招宣讲嘉宾和一线面试官跟很多毕业生接触。其中有不少收获、感悟和反思，不吐不快。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.
    
    </summary>
    
      <category term="职场修炼" scheme="http://meijing0114.com/categories/%E8%81%8C%E5%9C%BA%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="招聘 职场" scheme="http://meijing0114.com/tags/%E6%8B%9B%E8%81%98-%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于php的共享内存的使用和研究之深入剖析swoole table</title>
    <link href="http://meijing0114.com/2017/02/01/php004/"/>
    <id>http://meijing0114.com/2017/02/01/php004/</id>
    <published>2017-02-01T10:14:26.000Z</published>
    <updated>2017-02-01T10:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说回来，究竟swoole的底层是怎么做到了使用行锁，来实现进程访问冲突解决与高性能的呢？这里确实值得研究一下。</p>
<p>首先来看一下swooletable中用来存储的基本数据结构swTableRow：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">typedef struct _swTableRow</div><div class="line">&#123;</div><div class="line">    sw_atomic_t lock;// 原子锁，所谓的效率更高的行锁，这个要等下看看了。</div><div class="line">    /**</div><div class="line">     * 1:used, 0:empty</div><div class="line">     */</div><div class="line">    uint8_t active;//是否启用状态</div><div class="line">    /**</div><div class="line">     * next slot</div><div class="line">     */</div><div class="line">    struct _swTableRow *next;//链表结构</div><div class="line">    /**</div><div class="line">     * Hash Key</div><div class="line">     */</div><div class="line">    char key[SW_TABLE_KEY_SIZE];//大小64，意味着单哈希key的长度</div><div class="line">    char data[0];//真实数据</div><div class="line">&#125; swTableRow;</div></pre></td></tr></table></figure>
<p>然后是用来遍历行的索引数据结构<code>swTable_iterator</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">    uint32_t absolute_index;</div><div class="line">    uint32_t collision_index;</div><div class="line">    swTableRow *row;</div><div class="line">&#125; swTable_iterator;</div></pre></td></tr></table></figure>
<p>然后是包含了多行内容的swTable:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">    swHashMap *columns;// 一个table，包含多列中的列信息</div><div class="line">    uint16_t column_num;</div><div class="line">    swLock lock;</div><div class="line">    uint32_t size;</div><div class="line">    uint32_t mask;</div><div class="line">    uint32_t item_size;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * total rows that in active state(shm)</div><div class="line">     */</div><div class="line">    sw_atomic_t row_num;</div><div class="line"></div><div class="line">    swTableRow **rows;// 一列包含多行，所以是个二维的数组</div><div class="line">    swMemoryPool *pool;</div><div class="line"></div><div class="line">    uint32_t compress_threshold;</div><div class="line"></div><div class="line">    swTable_iterator *iterator;</div><div class="line"></div><div class="line">    void *memory;</div><div class="line">&#125; swTable;</div></pre></td></tr></table></figure>
<p>用来存储swooletable中每一列信息的swTableColumn:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">   uint8_t type; // 结构类型，可选是int、浮点、字符串</div><div class="line">   uint32_t size; // 声明的大小，</div><div class="line"></div><div class="line">   swString* name;</div><div class="line">   uint16_t index;</div><div class="line">&#125; swTableColumn;</div><div class="line"></div><div class="line">// 此结构体即为执行$_swooleTable-&gt;column(&apos;ip&apos;,\swoole_table::TYPE_STRING, 64)时设置结构体中内容</div></pre></td></tr></table></figure>
<p>几个对外暴露的api如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">swTable* swTable_new(uint32_t rows_size);</div><div class="line">int swTable_create(swTable *table);</div><div class="line">void swTable_free(swTable *table);</div><div class="line">int swTableColumn_add(swTable *table, char *name, int len, int type, int size);</div><div class="line">swTableRow* swTableRow_set(swTable *table, char *key, int keylen, sw_atomic_t **rowlock);</div><div class="line">swTableRow* swTableRow_get(swTable *table, char *key, int keylen, sw_atomic_t **rowlock);</div></pre></td></tr></table></figure>
<p>先来看看创建swooletable的时候会发生什么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">swTable* swTable_new(uint32_t rows_size)</div><div class="line">&#123;</div><div class="line">    // 隐含限制，单个swoole table 最大128M，还是挺狠的</div><div class="line">    if (rows_size &gt;= 0x80000000)</div><div class="line">    &#123;</div><div class="line">        rows_size = 0x80000000;</div><div class="line">    &#125;</div><div class="line">    // 16进制转换，这应该也是文档里面说的，创建需要2的倍数的原因，比较好处理一些</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        uint32_t i = 10;</div><div class="line">        while ((1U &lt;&lt; i) &lt; rows_size)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        rows_size = 1 &lt;&lt; i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 统一申请内存</div><div class="line">    swTable *table = SwooleG.memory_pool-&gt;alloc(SwooleG.memory_pool, sizeof(swTable));</div><div class="line">    if (table == NULL)</div><div class="line">    &#123;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    // 给table创建锁，独一无二</div><div class="line">    if (swMutex_create(&amp;table-&gt;lock, 1) &lt; 0)</div><div class="line">    &#123;</div><div class="line">        swWarn(&quot;mutex create failed.&quot;);</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    // 预创建迭代器</div><div class="line">    table-&gt;iterator = sw_malloc(sizeof(swTable_iterator));</div><div class="line">    if (!table-&gt;iterator)</div><div class="line">    &#123;</div><div class="line">        swWarn(&quot;malloc failed.&quot;);</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line">    // 预创建存储列信息的哈希表，这里同样隐含了，最多32列的限制条件，同时制定了析构函数</div><div class="line">    table-&gt;columns = swHashMap_new(SW_HASHMAP_INIT_BUCKET_N, (swHashMap_dtor)swTableColumn_free);</div><div class="line">    if (!table-&gt;columns)</div><div class="line">    &#123;</div><div class="line">        return NULL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 结构体变量初始化</div><div class="line">    table-&gt;size = rows_size;</div><div class="line">    table-&gt;mask = rows_size - 1;</div><div class="line"></div><div class="line">    bzero(table-&gt;iterator, sizeof(swTable_iterator));</div><div class="line">    table-&gt;memory = NULL;</div><div class="line">    return table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我个人比较关注关于锁的这一块，所以看了下<code>swMutex_create</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">int swMutex_create(swLock *lock, int use_in_process)</div><div class="line">&#123;</div><div class="line">    int ret;</div><div class="line">    bzero(lock, sizeof(swLock));</div><div class="line">    lock-&gt;type = SW_MUTEX;</div><div class="line">    pthread_mutexattr_init(&amp;lock-&gt;object.mutex.attr);</div><div class="line">    if (use_in_process == 1)</div><div class="line">    &#123;</div><div class="line">        pthread_mutexattr_setpshared(&amp;lock-&gt;object.mutex.attr, PTHREAD_PROCESS_SHARED);</div><div class="line">    &#125;</div><div class="line">    if ((ret = pthread_mutex_init(&amp;lock-&gt;object.mutex._lock, &amp;lock-&gt;object.mutex.attr)) &lt; 0)</div><div class="line">    &#123;</div><div class="line">        return SW_ERR;</div><div class="line">    &#125;</div><div class="line">    lock-&gt;lock = swMutex_lock;</div><div class="line">    lock-&gt;unlock = swMutex_unlock;</div><div class="line">    lock-&gt;trylock = swMutex_trylock;</div><div class="line">    lock-&gt;free = swMutex_free;</div><div class="line">    return SW_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了posix thread中的用于线程同步的mutex函数来创建和初始化互斥锁。参照<a href="http://blog.sina.com.cn/s/blog_4176c2800100tabf.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4176c2800100tabf.html</a> 中的说明，这里swoole应该创建的是<code>PTHREAD_MUTEX_TIMED_NP</code> 普通锁，当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。</p>
<p>同时创建锁也给出了一个参数<code>use_in_process</code>, 如果是在进程间使用，那么意味着锁在进程间共享，这也就对应了swooletable的第一种使用方式：在server启动之前创建，否则就是我们上文中的使用方式：在每个进程中单独的使用。</p>
<p>注意，这里swoole table使用了互斥锁，这是阻塞的，当某线程无法获取互斥量时，该线程会被直接挂起，该线程不再消耗CPU时间，当其他线程释放互斥量后，操作系统会激活那个被挂起的线程，让其投入运行。由于table之间加锁的频率比较低，所以使用互斥锁是划算的。</p>
<p>再看下指定了swooletable中的列信息之后，进行<code>swTable_create</code>时发生了什么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int swTable_create(swTable *table)</div><div class="line">&#123;</div><div class="line">    // 数据初始化</div><div class="line">    ...</div><div class="line"></div><div class="line">    // 真正申请了共享内存，计算出了最终需要的大小</div><div class="line">    void *memory = sw_shm_malloc(memory_size);</div><div class="line">    if (memory == NULL)</div><div class="line">    &#123;</div><div class="line">        return SW_ERR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 变量初始化</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后看一下我们最关注的，对于行内容的get、set、del：</p>
<p>先看get方法，每次get，都更新一下自旋锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">swTableRow* swTableRow_get(swTable *table, char *key, int keylen, sw_atomic_t **rowlock)</div><div class="line">&#123;</div><div class="line">    //参数校验</div><div class="line">    ...</div><div class="line"></div><div class="line">    // 根据哈希算法获取相应的行</div><div class="line">    swTableRow *row = swTable_hash(table, key, keylen);</div><div class="line">    // 获取行中存储的初始的原子锁</div><div class="line">    sw_atomic_t *lock = &amp;row-&gt;lock;</div><div class="line">    // 对应swSpinLock_create方法，其中调用pthread_spin_init进行自旋锁初始化</div><div class="line">    sw_spinlock(lock);</div><div class="line">    // 自旋锁赋值</div><div class="line">    *rowlock = lock;</div><div class="line"></div><div class="line">    // 遍历table，找对应的列中的行</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再看set方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">swTableRow* swTableRow_set(swTable *table, char *key, int keylen, sw_atomic_t **rowlock)</div><div class="line">&#123;</div><div class="line">    //参数校验</div><div class="line">    ...</div><div class="line"></div><div class="line">    // 更新自旋锁</div><div class="line">    swTableRow *row = swTable_hash(table, key, keylen);</div><div class="line">    sw_atomic_t *lock = &amp;row-&gt;lock;</div><div class="line">    sw_spinlock(lock);</div><div class="line">    *rowlock = lock;</div><div class="line"></div><div class="line">    if (row-&gt;active)</div><div class="line">    &#123;</div><div class="line">        for (;;)</div><div class="line">        &#123;</div><div class="line">            if (strncmp(row-&gt;key, key, keylen) == 0)</div><div class="line">            &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            else if (row-&gt;next == NULL)</div><div class="line">            &#123;</div><div class="line">                //!!! 锁住table</div><div class="line">                table-&gt;lock.lock(&amp;table-&gt;lock);</div><div class="line">                swTableRow *new_row = table-&gt;pool-&gt;alloc(table-&gt;pool, 0);</div><div class="line">                // !!! 创建完成，解锁table</div><div class="line">                table-&gt;lock.unlock(&amp;table-&gt;lock);</div><div class="line"></div><div class="line">                if (!new_row)</div><div class="line">                &#123;</div><div class="line">                    return NULL;</div><div class="line">                &#125;</div><div class="line">                //add row_num</div><div class="line">                bzero(new_row, sizeof(swTableRow));</div><div class="line">                // 多线程全局变量自加，确保行数全局唯一，对应__sync_fetch_and_add方法！！</div><div class="line">                sw_atomic_fetch_add(&amp;(table-&gt;row_num), 1);</div><div class="line">                row-&gt;next = new_row;</div><div class="line">                row = new_row;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                row = row-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        // 多线程全局变量自加，确保行数全局唯一，对应__sync_fetch_and_add方法！！</div><div class="line">        sw_atomic_fetch_add(&amp;(table-&gt;row_num), 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    memcpy(row-&gt;key, key, keylen);</div><div class="line">    row-&gt;active = 1;</div><div class="line">    return row;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>del方法也比较类似的，这里就不讲了，仔细看看还是很有意思。核心点在于：</p>
<ul>
<li>对互斥锁、自旋锁的灵活使用</li>
<li>对多线程下的全局变量处理</li>
<li>对共享内存的把控与操作</li>
<li>对内存的分配与正确回收</li>
</ul>
<p>swoole的源码的确有很多可取之处，涉及到了很多系统和存储的基本的只是，非常值得学习。<br>那么，关于php使用本机存储系列，也就到此为止吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说回来，究竟swoole的底层是怎么做到了使用行锁，来实现进程访问冲突解决与高性能的呢？这里确实值得研究一下。&lt;/p&gt;
&lt;p&gt;首先来看一下swooletable中用来存储的基本数据结构swTableRow：&lt;/p&gt;
&lt;figure class=&quot;highlight pla
    
    </summary>
    
      <category term="php" scheme="http://meijing0114.com/categories/php/"/>
    
    
      <category term="存储" scheme="http://meijing0114.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于php的共享内存的使用和研究之外部存储</title>
    <link href="http://meijing0114.com/2017/02/01/php003/"/>
    <id>http://meijing0114.com/2017/02/01/php003/</id>
    <published>2017-02-01T09:54:58.000Z</published>
    <updated>2017-02-01T10:01:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>上文中提到了针对php的共享内存方案的尝试，最终发现它并不适用于我的场景，如果想要兼容多进程或多线程并发读写的情况下可靠，一定要有适当的机制来保证资源的唯一性。</p>
<p>加锁肯定是想到的第一选择，对于每次共享内存的时候，先获取一个锁，只有获取成功了之后才允许进行读和写，这应该是最简单的方案，但是同步锁对性能的损耗也是比较大的。APC的user data cache的存储机制对数据要求严格正确，锁比较多，它的效率与本地的memcache相当。既然这样，不如把眼光投向业界，看看大牛们使用什么样的方案来解决这个问题。</p>
<h2 id="YAC"><a href="#YAC" class="headerlink" title="YAC"></a>YAC</h2><p>原文链接：<a href="http://www.laruence.com/2013/03/18/2846.html" target="_blank" rel="external">http://www.laruence.com/2013/03/18/2846.html</a></p>
<p>laurance为了解决如下的两个问题，设计出了这个cache：</p>
<ul>
<li>想让PHP进程之间共享一些简单的数据</li>
<li>希望非常高效的缓存一些页面</li>
</ul>
<p>同时也是基于如下的经验假设：</p>
<ul>
<li>对于一个应用来说, 同名的Cache键, 对应的Value, 大小几乎相当.</li>
<li>不同的键名的个数是有限的.</li>
<li>Cache的读的次数, 远远大于写的次数.</li>
<li>Cache不是数据库, 即使Cache失效也不会带来致命错误.</li>
</ul>
<p>实现这个cache，关键是无锁化的设计. 根据laurance的说法，他解决读锁的方式是通过不加锁的读，然后CRC校验。<br>看了一下他代码的实现，是对key中存储的固定size的值进行了CRC的计算，然后把key中附带存储的crc信息和内容计算出来的crc信息进行校验。如果校验成功了，那么认为查询成功，如果校验失败了，那么认为查询失败。其实本质上这是一种使用CPU来换锁的方式，大部分的服务器是多核的，一旦加锁，对CPU是很大的浪费。下面这张图形象的表明了这一点：</p>
<p><img src="http://wx4.sinaimg.cn/mw690/67ad48bbgy1fcb4h630hgj20nk09amxi.jpg" alt=""></p>
<p>这个是个不错的trick，能够解决的问题就是在多个进程频繁的写入的时候，可能导致的读出错不会带来错误的结果，因为一旦crc校验不通过，那么读出来的结果就是失效了。这显然比上一篇文章中的共享内存的读的方式要高明一些。不过根据我的观察，使用共享内存的方式，由于一直是向后不停的写入，出现被覆盖的概率几乎没有，而laurance这里之所以要校验，则是因为他会进行内存的回收和循环写入，这点在下文中会继续说明。</p>
<p>现在重点说说这个YAC的写入的问题，首先启动的时候key空间大小确定，可以通过配置来调整分配给存储key的大小，从而扩展key的个数。4M基本上相当于32768个Cache值。首先第一个很重要的点就是如何设计哈希方法来避免写入冲突，这里他使用的是双散列法的<br><a href="https://en.wikipedia.org/wiki/MurmurHash" target="_blank" rel="external">MurmurHash</a>.</p>
<p>对于小于4M的内存块的操作由于key不同，根据哈希出来的起始位置也不同。不同key之间冲突的概率，等同于哈希算法冲突的概率，这个还是比较低的。对于大的内存块，这里使用了segment-&gt;pos指针来控制内存的分块。和共享内存扩展的实现方式还是比较类似了，反正就是一个pos指针，找得到就update，找不到就向后写。</p>
<p>那么如果发生冲突呢，laurance给出了一个例子：</p>
<blockquote>
<p>比如A进程申请了40字节, B进程申请了60字节, 但是Pos只增加了60字节. 这个时候有如下几种情况:</p>
<ol>
<li>A写完了数据, 返回成功, 但是B进程又写完了数据返回成功, 最终B进程的Cache种上了, 而A进程的被踢出了.</li>
<li>B进程写完了数据, 返回成功, A进程又写完了数据返回成功, 最终A进程的Cache种上了, B进程的被踢出.</li>
<li>A进程写一半, B进程写一半, 然后A进程又写一半, B进程又写一半, 都返回成功, 但最终, 缓存都失效.</li>
</ol>
<p>可见, 最严重的错误, 就是A和B的缓存都失效, 但是Yac不会把错误数据返回给用户, 当下一次来查询Cache的时候, 因为存在crc校验, 所以都miss.</p>
</blockquote>
<p>看到这儿终于明白了，并没有解决多进程写的问题，多进程的写还是可能会有冲突，不仅仅是单key的冲突，不同key之间也可能会有冲突。但是冲突了不怕，会通过校验的方式确保client端能够判断出来自己冲突了，这点对应用程序确实非常重要，因为这不是cache error，而仅仅是cache miss而已，这两种情况的严重程度和处理机制的确完全不同。</p>
<p>另外还有一个亮点是内存的循环分配，如果一个内存块用完了，那么可以重置pos，从而从头开始分配，有了这种机制，即使并发写导致pos一直后移，也不会出现内存耗尽的情况了，这确实是个不错的特性。</p>
<p>总结来看，yac两个不错的特性：</p>
<ul>
<li>读的CRC校验，保证最严重是cache miss</li>
<li>写的pos重置，保证内存不被写满</li>
</ul>
<p>但是针对我的使用场景，多并发情况下的同key的多写多读，它并没有很好的解决这个问题，而是比较适用于低频的用户数据的缓存，比如登陆用户的头像、昵称这类信息。拉取频次不高，miss了也能向后端请求。所以怎么办呢，只能继续进行求索。</p>
<p>ps：laurance在文章开头群嘲了一下APC的性能，相当于本地的memcache，结果文末贴出的性能对比，yac完全比不上apc。。有点莫名</p>
<h2 id="Swoole-table"><a href="#Swoole-table" class="headerlink" title="Swoole table"></a>Swoole table</h2><p>接下来说说这两年在社区里面比较火，最近刚刚发布了内置协程2.0版本的swoole. github地址：<a href="https://github.com/swoole/swoole-src" target="_blank" rel="external">https://github.com/swoole/swoole-src</a></p>
<p>swoole table是swoole中的一个基于共享内存和锁实现的超高性能的并发数据结构，用来解决多进程、多线程数据共享和同步加锁的问题。这不就是我们苦苦寻觅的解决方案么？</p>
<p>先来看一下swoole table的常见的使用方式，首先它支持三种基本的类型：</p>
<ul>
<li><code>swoole_table::TYPE_INT</code> 整形字段</li>
<li><code>swoole_table::TYPE_FLOAT</code> 浮点字段</li>
<li><code>swoole_table::TYPE_STRING</code> 字符串字段</li>
</ul>
<p>如果想要在各个进程之间共享高性能的本地数据，那么使用的范例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 新建swoole table，并且指定类型</div><div class="line">$table = new swoole_table(1024);</div><div class="line">$table-&gt;column(&apos;id&apos;, swoole_table::TYPE_INT, 4);       //1,2,4,8</div><div class="line">$table-&gt;column(&apos;name&apos;, swoole_table::TYPE_STRING, 64);</div><div class="line">$table-&gt;column(&apos;num&apos;, swoole_table::TYPE_FLOAT);</div><div class="line">$table-&gt;create();</div><div class="line"></div><div class="line">// 新建swoole的server</div><div class="line">$serv = new swoole_server(&apos;127.0.0.1&apos;, 9501);</div><div class="line">//将table保存在serv对象上</div><div class="line">$serv-&gt;table = $table;</div><div class="line">$serv-&gt;on(&apos;receive&apos;, function ($serv, $fd, $from_id, $data) &#123;</div><div class="line">    // 使用swoole table存储全局的数据</div><div class="line">    $ret = $serv-&gt;table-&gt;set($key, array(&apos;from_id&apos; =&gt; $data, &apos;fd&apos; =&gt; $fd, &apos;data&apos; =&gt; $data));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 这里需要注意的就是一定要在server启动之前创建swoole table，从而保证它能够被全局共享</div><div class="line">$serv-&gt;start();</div></pre></td></tr></table></figure>
<p>如果只是你自己的一个进程在不同的请求之间共享高性能的本地数据，那么使用的范例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class LocalSwooleTable &#123;</div><div class="line">    private static $_swooleTable;// 静态变量，单个进程内共享</div><div class="line"></div><div class="line">    const SWOOLE_TABLE_SET_FAILED = -1001;</div><div class="line">    const SWOOLE_TABLE_GET_FAILED = -1002;</div><div class="line"></div><div class="line">    // swoole table初始化</div><div class="line">    private function __construct() &#123;</div><div class="line">        //预估数据量 100个服务,每个长度30 需要3000个字节,这里申请64k</div><div class="line">        self::$_swooleTable = new \swoole_table(65536);</div><div class="line">        self::$_swooleTable-&gt;column(&apos;ip&apos;,\swoole_table::TYPE_STRING, 64);</div><div class="line">        self::$_swooleTable-&gt;column(&apos;port&apos;,\swoole_table::TYPE_INT, 4);</div><div class="line">        self::$_swooleTable-&gt;column(&apos;timestamp&apos;,\swoole_table::TYPE_INT, 4);</div><div class="line">        self::$_swooleTable-&gt;column(&apos;bTcp&apos;,\swoole_table::TYPE_INT, 4);</div><div class="line">        self::$_swooleTable-&gt;create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取单个swoole的实例</div><div class="line">    public static function getInstance() &#123;</div><div class="line">        if(self::$_swooleTable) &#123;</div><div class="line">            return self::$_swooleTable;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            new LocalSwooleTable();</div><div class="line">            return self::$_swooleTable;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 获取唯一的实例</div><div class="line">$swooleTableIns = LocalSwooleTable::getInstance();</div><div class="line">$key = &quot;sample&quot;;</div><div class="line">$routeInfo[&apos;timestamp&apos;] = time();</div><div class="line">$routeInfo[&apos;ip&apos;] = &apos;10.25.22.33&apos;;</div><div class="line">$routeInfo[&apos;port&apos;] = 1000;</div><div class="line">$routeInfo[&apos;bTcp&apos;] = 1;</div><div class="line"></div><div class="line">// 设置swoole table中的内容</div><div class="line">$flag = $swooleTableIns-&gt;set($key,$routeInfo);</div><div class="line"></div><div class="line">// 获取swoole table中的内容</div><div class="line">$routeInfo = $swooleTableIns-&gt;get($key);</div></pre></td></tr></table></figure>
<p>本来，第一种方式应该是我们最好的选择，但是因为我们使用了TSF框架（或者任何不是自己从头裸写swoole的框架），都不会把创建server这一步暴露到业务代码中，这就给我们使用全局的swoole的table带来了很大的难度。换句话说，知道好用，但是就是业务用起来非常的不方便，不具备业务扩展性。</p>
<p>所以无奈之下，我们还是选取了第二种方案，从性能上面来讲的话，确实是有提升的，不好的地方就是存储资源浪费了一些，每个进程都用了专属自己的swoole table，这当然是无奈之举。还是希望能够之后通过一些改造，把全局的swoole table这种能力能够开放出来。</p>
<p><img src="http://wx4.sinaimg.cn/mw690/67ad48bbgy1fcb4h6ukbnj21dq00ua9z.jpg" alt="Alt text"></p>
<p>基本上访问一次是0.03ms，这个性能还是比较突出的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上文中提到了针对php的共享内存方案的尝试，最终发现它并不适用于我的场景，如果想要兼容多进程或多线程并发读写的情况下可靠，一定要有适当的机制来保证资源的唯一性。&lt;/p&gt;
&lt;p&gt;加锁肯定是想到的第一选择，对于每次共享内存的时候，先获取一个锁，只有获取成功了之后才允许进行读和写
    
    </summary>
    
      <category term="php" scheme="http://meijing0114.com/categories/php/"/>
    
    
      <category term="存储" scheme="http://meijing0114.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于php的共享内存的使用和研究之由起</title>
    <link href="http://meijing0114.com/2016/12/25/php002/"/>
    <id>http://meijing0114.com/2016/12/25/php002/</id>
    <published>2016-12-25T07:43:48.000Z</published>
    <updated>2016-12-25T08:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个场景，服务寻址的时候，需要请求远程的服务，获取一批可用的ip和端口地址及其权重。根据权重和随机算法选择最合适的一个服务地址，进行请求。由于服务地址在短时间之内不会发生变化，因此为了避免无限制的进行寻址的请求，有必要将地址缓存至本地。</p>
<p>对于php而言，说到用户数据缓存本地，第一反应出来的就是APC。但是APC首先被创建出来是给php做内部缓存的，其次才是提供给用户态使用的。根据laruence在博客的说法，opcache出现了之后，对zend编译的opcode做了缓存，实际上解决了apc被创建出来想要解决的问题。因此现在APC已经处于不再更新维护的状态了。</p>
<p>对于想使用opcache，又要使用用户态的APC的同学，就需要额外的配置，同时性能上也会比原来的APC要差，差不多相当于本机的memcache。这显然就无法达到本机内存访问的效率了，因此需要寻求其他的解决方案。</p>
<h2 id="php的共享内存API"><a href="#php的共享内存API" class="headerlink" title="php的共享内存API"></a>php的共享内存API</h2><p>随后我就想到了使用php的共享内存API，反正只是缓存非常少的路由信息，加在一起不超过1k，尽管是多读多写的场景，但是覆盖了也没关系，出于这种出发点，我就开始了对php的共享内存API的研究。</p>
<p>php中操作共享内存的方式一共有两组：</p>
<ul>
<li>System V IPC<ul>
<li>编译增加 –enable-sysvshm</li>
</ul>
</li>
<li>Shared Memory<ul>
<li>–enable-shmop</li>
</ul>
</li>
</ul>
<p>先来看一个shmop的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 从系统获取一个共享内存的id</div><div class="line">$key = ftok(__FILE__, &apos;test&apos;);</div><div class="line">$size = 1024;</div><div class="line">// 打开1024字节的共享内存(如果不存在则申请)</div><div class="line">$shm_h = @shmop_open($key, &apos;c&apos;, 0644, $size);</div><div class="line">if($shm_h === false) &#123;</div><div class="line">    echo &quot;shmop open failed&quot;;</div><div class="line">    exit;</div><div class="line">&#125;</div><div class="line">// 读取共享内存中的数据</div><div class="line">$data = shmop_read($shm_h, 0, $size);</div><div class="line">// 对读取的数据进行反序列化</div><div class="line">$data = unserialize($data);</div><div class="line">//如果没有数据则写入</div><div class="line">if(empty($data)) &#123;</div><div class="line">    echo &quot;there is no data&quot;;</div><div class="line">    $data = &quot;imdonkey&quot;;</div><div class="line">    //所有写入的数据，都必须提前序列化</div><div class="line">    $write_size = shmop_write($shm_h, serialize($data), 0);</div><div class="line">    if($write_size === false) echo &quot;shmop write failed!&quot;;</div><div class="line">&#125;</div><div class="line">//如果有，显示出来，之后删掉</div><div class="line">else &#123;</div><div class="line">    echo &quot;shared memory data: &quot;;</div><div class="line">    print_r($data);</div><div class="line">    shmop_delete($shm_h);</div><div class="line">&#125;</div><div class="line">shmop_close($shm_h);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>使用shmop扩展，必须要注意数据的大小，以及读写时候的偏移量。同时，不管你写入的是什么数据类型，都必须进行序列化和反序列化。</p>
<p>再看一下SysV的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 从系统获取一个共享内存的id</div><div class="line">$shm_key = ftok(__FILE__, &apos;test&apos;);</div><div class="line">// 获取此共享内存资源的操作句柄</div><div class="line">$memsize = 1024;</div><div class="line">$shm_h = shm_attach($shm_key, $memsize, 0644);</div><div class="line">if($shm_h === false) &#123;</div><div class="line">    echo &quot;shmop open failed&quot;;</div><div class="line">    exit;</div><div class="line">&#125;</div><div class="line">// 获取共享内存中key=222时的内容</div><div class="line">$var_key = 222;</div><div class="line">$data = @shm_get_var($shm_h, $var_key);</div><div class="line">if(empty($data)) &#123;</div><div class="line">    $data = [&apos;test&apos;=&gt;&apos;here&apos;];</div><div class="line">    echo &quot;there is no data, insert $data.\n&quot;;</div><div class="line">    // 如果数据不存在，写入数据，可以是任意类型，无需初始化</div><div class="line">    shm_put_var($shm_h, $var_key, $data);</div><div class="line">&#125; else &#123;</div><div class="line">    // 否则，输出数据，并清理相关内存</div><div class="line">    echo &quot;find data: $data\n&quot;;</div><div class="line">    shm_remove_var($shm_h, $var_key);</div><div class="line">&#125;</div><div class="line">// 断开资源的链接</div><div class="line">shm_detach($shm_h);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>原理上来讲并无不同，只是SysV做了更多的封装，让你使用起来更加方便一些。不用自己控制偏移量，也不用进行序列化和反序列化。同时对于每个数据，都设置了对应的<code>var_key</code>, 这样在同一个区域可以保存多个数据，而无需再次申请另一片共享内存。</p>
<h2 id="业务中的使用"><a href="#业务中的使用" class="headerlink" title="业务中的使用"></a>业务中的使用</h2><p>在使用两者的时候，都要注意对数据大小的估算。否则很容易出现共享内存溢出的情况。而我在使用的时候，充分评估了要存储的数据结构的大小，我需要存储的内容是：<br><code>ip(15个字节以内)+port(8字节以内)+timestamp(15字节以内)+分隔符(3字节)=41字节</code><br>假设我调用100个后端服务。那么最高需要存储的路由信息就是<code>4.1k</code>大小。</p>
<p>出于这种考虑，我申请了1M的内存，觉得应该是够够的了。就这么悠哉哉的在线上跑了一个星期左右，有天没事到线上看了下php的错误日志，结果一脸懵逼：</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1fb331st5c1j20ze046wgt.jpg" alt=""></p>
<p>什么情况，调用的后端服务一共才5个，共享内存这么快就写满了？？经过一个初步的判断之后，我得出的结论是：sysV的接口能力太差，对于shareKey没有做去重处理，而是每次都写入了新的key，这样就导致了共享内存的写入指针尽管是相同的shareKey，但是却不断的后移，最终导致共享内存被写爆，而寻址的请求全部都打到了寻址服务，还好它比较健壮，也有短时的缓存，才没有产生运营事故。</p>
<p>在得出了这么个结论之后，我修改了我的代码，在每次完成对shareKey内容的获取之后，增加了一行</p>
<p><code>shm_remove_var($shareKey)</code></p>
<p>同时写了一个脚本，把原有的共享内存id对应的内容清空，经过手工处理十台机器之后，再全量替换一把代码，打卡下班，感觉自己棒棒哒。</p>
<p>没想到，这才是悲剧的开始。就在当周的周六，吃着火锅，突然就有一台线上机器罢工了。机器服务狂core不止，打开系统配置的core文件输出之后，迅速占满磁盘，无奈之下，先让运维把机器摘掉，再进一步的分析。其他机器也出现了不同程度的core，线上失败率直线上升。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1fb331ryw78j20yi0ceafh.jpg" alt="Alt text"></p>
<p>再把机器摘下来之后，看了一眼core文件，就发现，哎呀，闯祸了。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1fb331qut6tj21kw07r7a3.jpg" alt="Alt text"></p>
<p>赶快恢复到没有remove的版本，至少还能撑一个星期，不至于程序core掉。</p>
<h2 id="踩坑与解决"><a href="#踩坑与解决" class="headerlink" title="踩坑与解决"></a>踩坑与解决</h2><p>接下来开始仔细分析源码，发现sysV的扩展中，remove_var实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(shm_remove_var)</div><div class="line">&#123;</div><div class="line">    zval *shm_id;</div><div class="line">    long shm_key, shm_varpos;</div><div class="line">    sysvshm_shm *shm_list_ptr;</div><div class="line">    // 读取输入参数</div><div class="line">    if (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;rl&quot;, &amp;shm_id, &amp;shm_key)) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    SHM_FETCH_RESOURCE(shm_list_ptr, shm_id);</div><div class="line"></div><div class="line">    // 检查sharekey在共享内存中是否存在</div><div class="line">    shm_varpos = php_check_shm_data((shm_list_ptr-&gt;ptr), shm_key);</div><div class="line"></div><div class="line">    // 如果不存在，返回错误</div><div class="line">    if (shm_varpos &lt; 0) &#123;</div><div class="line">        php_error_docref(NULL TSRMLS_CC, E_WARNING, &quot;variable key %ld doesn&apos;t exist&quot;, shm_key);</div><div class="line">        RETURN_FALSE;</div><div class="line">    &#125;</div><div class="line">    // 如果存在，删除共享内存</div><div class="line">    php_remove_shm_data((shm_list_ptr-&gt;ptr), shm_varpos);</div><div class="line">    RETURN_TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>咋一看没啥问题，但是深入看一下<code>php_check_shm_data</code>，发现有问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// ptr为整个共享内存区块的头指针</div><div class="line">static long php_check_shm_data(sysvshm_chunk_head *ptr, long key)</div><div class="line">&#123;</div><div class="line">    long pos;</div><div class="line">    sysvshm_chunk *shm_var;</div><div class="line">    // 从头开始寻找</div><div class="line">    pos = ptr-&gt;start;</div><div class="line"></div><div class="line">    for (;;) &#123;</div><div class="line">        // 找到最后了返回</div><div class="line">        if (pos &gt;= ptr-&gt;end) &#123;</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        // 向前进一个内存区块，由当前区块的next指针决定</div><div class="line">        shm_var = (sysvshm_chunk*) ((char *) ptr + pos);</div><div class="line">        if (shm_var-&gt;key == key) &#123;</div><div class="line">            return pos;</div><div class="line">        &#125;</div><div class="line">        pos += shm_var-&gt;next;</div><div class="line"></div><div class="line">        if (shm_var-&gt;next &lt;= 0 || pos &lt; ptr-&gt;start) &#123;</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个根本就是线程不安全的版本额，在高并发的场景下，非常有可能出现，对一个shareKey内是否存在数据的错误判断，根据swoole的多进程模型，进程A进行寻址，查看共享内存，发现shareKey对应的区块无数据，所以他准备进行写入，同时进程B之前已经检查了shareKey数据，发现shareKey数据已经过期，执行了remove操作。这时候进程A再想去写入的时候，就会发生不可避免的segmentation fault。</p>
<p>发现了这个问题之后，反过来去想当时为什么共享内存会被写满，也是一样的问题，都怪<code>php_check_shm_data</code>对key的判断线程不安全，所以不可避免的，高并发下一直会用重复的key不停的向前写入。当时申请了 12M的内存, 每秒500请求，swoole开了24个进程，假设碰撞概率是<code>1/(24*500)=1/12000</code>。每次写入的大小是4k*3（四个服务寻址），程序设计的是五分钟进行一次put。</p>
<p>那么12M共享内存被写满的时间应该是12M/12k/(60min/5min)/24h = 3.6天左右。基本上只能撑个这么久。</p>
<p>所以呢，解决方向有两个：</p>
<ul>
<li>实现一个有锁的共享内存API版本</li>
<li>另辟蹊径，使用别的本地内存存储方案</li>
</ul>
<p>权衡之下，准备采取第二种做法，预知后事如何，且看下回分解~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到一个场景，服务寻址的时候，需要请求远程的服务，获取一批可用的ip和端口地址及其权重。根据权重和随机算法选择最合适的一个服务地址，进行请求。由于服务地址在短时间之内不会发生变化，因此为了避免无限制的进行寻址的请求，有必要将地址缓存至本地。&lt;/p&gt;
&lt;p&gt;对于php而言
    
    </summary>
    
      <category term="php" scheme="http://meijing0114.com/categories/php/"/>
    
    
      <category term="存储" scheme="http://meijing0114.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Nginx模块之echo</title>
    <link href="http://meijing0114.com/2016/12/19/nginx001/"/>
    <id>http://meijing0114.com/2016/12/19/nginx001/</id>
    <published>2016-12-19T15:17:40.000Z</published>
    <updated>2016-12-19T15:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择nginx"><a href="#选择nginx" class="headerlink" title="选择nginx"></a>选择nginx</h2><p>Nginx性能为王：</p>
<ul>
<li>支持epoll，大规模高并发</li>
<li>支持Linux的sendfile系统调用，可以高效地把硬盘中数据发送到网络上。</li>
</ul>
<p>选择Nginx的原因：</p>
<ul>
<li>更快：要理解它怎么做到更快的</li>
<li>高扩展性：不同模块，大量的第三方模块，并且模块之间具有很好的隔离性；</li>
<li>高可靠性：来自于核心框架代码的优秀设计、模块设计的简单性。master-worker模式很稳定；</li>
<li>低内存消耗：10000个非活跃的http keep-alive连接至消耗2.5MB内存！精细的数据结构控制，c语言精华的体现；</li>
<li>单机支持10万以上的并发连接：上限只取决于内存</li>
<li>热部署，从没见过这么顺滑的reload</li>
<li>BSD许可协议的自由性</li>
</ul>
<h2 id="echo模块-debug利器"><a href="#echo模块-debug利器" class="headerlink" title="echo模块 - debug利器"></a>echo模块 - debug利器</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>github开源，openresty作者推荐<br><a href="https://github.com/openresty/echo-nginx-module" target="_blank" rel="external">https://github.com/openresty/echo-nginx-module</a></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="Location测试："><a href="#Location测试：" class="headerlink" title="Location测试："></a>Location测试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /test &#123;</div><div class="line">        echo &quot;test here&quot;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/test&quot;</code></p>
<h4 id="计算后端请求时间："><a href="#计算后端请求时间：" class="headerlink" title="计算后端请求时间："></a>计算后端请求时间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location /timed_hello &#123;</div><div class="line">     # 计时器重置</div><div class="line">     echo_reset_timer;</div><div class="line">     echo hello world;</div><div class="line">     # 休眠2.5s</div><div class="line">     echo_sleep   2.5;</div><div class="line">     # 打印最终耗时</div><div class="line">     echo &quot;&apos;hello world&apos; takes about $echo_timer_elapsed sec.&quot;;</div><div class="line">     echo_reset_timer;</div><div class="line">     echo hiya igor;</div><div class="line">     echo_sleep 1;</div><div class="line">     echo &quot;&apos;hiya igor&apos; takes about $echo_timer_elapsed sec.&quot;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/timed_hello&quot;</code></p>
<h4 id="请求代理："><a href="#请求代理：" class="headerlink" title="请求代理："></a>请求代理：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">location /echo_proxy &#123;</div><div class="line">       # 修改向下游请求的body</div><div class="line">       echo_before_body hello;</div><div class="line">       echo_before_body world;</div><div class="line">       # 进行proxy pass的请求</div><div class="line">       proxy_pass $scheme://10.247.165.120:10090/monitor/monitor.html;</div><div class="line">       # 修改返回到client端的body</div><div class="line">       echo_after_body hiya;</div><div class="line">       echo_after_body igor;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/echo_proxy&quot;</code></p>
<h4 id="发起子请求："><a href="#发起子请求：" class="headerlink" title="发起子请求："></a>发起子请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># 子请求1，充分利用epoll的优势</div><div class="line">location /main1 &#123;</div><div class="line">    echo_reset_timer;</div><div class="line">    echo &quot;start takes about $echo_timer_elapsed sec.&quot;;</div><div class="line"></div><div class="line">    # subrequests in parallel，并发子请求</div><div class="line">    echo_location_async /sub1;</div><div class="line">    echo_location_async /sub2;</div><div class="line">    # 打印结果为0s 请求耗时为2s</div><div class="line">    echo &quot;took $echo_timer_elapsed sec for total.&quot;;</div><div class="line">&#125;</div><div class="line"># 子请求2，并未发挥子请求优势</div><div class="line">location /main2 &#123;</div><div class="line">    echo_reset_timer;</div><div class="line">    echo &quot;start takes about $echo_timer_elapsed sec.&quot;;</div><div class="line"></div><div class="line">    # 同步的进行请求</div><div class="line">    echo_location /sub1;</div><div class="line">    echo_location /sub2;</div><div class="line">    # 打印结果为3s 最终耗时3s</div><div class="line">    echo &quot;took $echo_timer_elapsed sec for total.&quot;;</div><div class="line">&#125;</div><div class="line"># 子请求1</div><div class="line">location /sub1 &#123;</div><div class="line">    echo_sleep 2;</div><div class="line">    echo hello;</div><div class="line">&#125;</div><div class="line"># 子请求2</div><div class="line">location /sub2 &#123;</div><div class="line">    echo_sleep 1;</div><div class="line">    echo world;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/main1&quot;
curl &quot;http://testecho.qidian.com/main2&quot;</code></p>
<h4 id="同时发起多个子请求："><a href="#同时发起多个子请求：" class="headerlink" title="同时发起多个子请求："></a>同时发起多个子请求：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">location /multi &#123;</div><div class="line">    # 指定请求方式 参数等</div><div class="line">    echo_subrequest_async POST &apos;/tools&apos; -q &apos;foo=Foo&apos; -b &apos;hi&apos;;</div><div class="line">    echo_subrequest_async PUT &apos;/tools&apos; -q &apos;bar=Bar&apos; -b &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line">location /tools &#123;</div><div class="line">    # 支持打印打印多个nginx的内建变量</div><div class="line">    echo &quot;querystring: $query_string&quot;;</div><div class="line">    echo &quot;method: $echo_request_method&quot;;</div><div class="line">    echo &quot;body: $echo_request_body&quot;;</div><div class="line">    echo &quot;content length: $http_content_length&quot;;</div><div class="line">    echo &apos;///&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/multi&quot;</code></p>
<h4 id="静态资源合并："><a href="#静态资源合并：" class="headerlink" title="静态资源合并："></a>静态资源合并：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 不多说，和combo扩展非常的类似</div><div class="line">location /merge &#123;</div><div class="line">       default_type &apos;text/javascript&apos;;</div><div class="line">       echo_foreach_split &apos;&amp;&apos; $query_string;</div><div class="line">           echo &quot;/* JS File $echo_it */&quot;;</div><div class="line">           echo_location_async $echo_it;</div><div class="line">           echo;</div><div class="line">       echo_end;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/merge?/foo.js&amp;/test.js&quot;</code></p>
<h4 id="if-由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的"><a href="#if-由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的" class="headerlink" title="if: 由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的"></a>if: 由于nginx的if语法支持的太差，因此debug在配置的时候还是非常有必要的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ^~ /if &#123;</div><div class="line">     set $res miss;</div><div class="line">     if ($arg_val ~* &apos;^a&apos;) &#123;</div><div class="line">         set $res hit;</div><div class="line">         echo $res;</div><div class="line">     &#125;</div><div class="line">     echo $res;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>curl &quot;http://testecho.qidian.com/if?val=abc&quot;</code><br><code>curl &quot;http://testecho.qidian.com/if?val=ddd&quot;</code></p>
<h3 id="其中涉及的一些nginx模块的开发概念"><a href="#其中涉及的一些nginx模块的开发概念" class="headerlink" title="其中涉及的一些nginx模块的开发概念"></a>其中涉及的一些nginx模块的开发概念</h3><h4 id="subrequest与upstream"><a href="#subrequest与upstream" class="headerlink" title="subrequest与upstream"></a>subrequest与upstream</h4><p>upstream：<br>提供了一种访问后端服务的能力。更加基础，同时充分利用了nginx优秀设计中的epoll模型，从而做到了异步和无阻塞. 通信方式不限，通信协议不限。常见的就是udp和tcp，同时再配合二进制的一些高校打包协议，这时候你就可以让nginx和后端服务无缝的衔接在一起了。</p>
<p>subrequest： 子请求<br>针对的是第三方的服务，举个例子，你的网站导航服务依赖于第三方服务比如新浪天气的返回结果，那么可以使用子请求的方式。<br>但是第三方的服务协议局限于http，同时它的底层也是由upstream实现的。但是相比之下概念和出发点有所不同。</p>
<h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>几个名词：IO多路复用、高性能网络模型、同步异步、阻塞非阻塞、协程与并发。<br>推荐篇文章：<a href="http://blog.csdn.net/tianmohust/article/details/6677985" target="_blank" rel="external">http://blog.csdn.net/tianmohust/article/details/6677985</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选择nginx&quot;&gt;&lt;a href=&quot;#选择nginx&quot; class=&quot;headerlink&quot; title=&quot;选择nginx&quot;&gt;&lt;/a&gt;选择nginx&lt;/h2&gt;&lt;p&gt;Nginx性能为王：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持epoll，大规模高并发&lt;/li&gt;
&lt;li&gt;支持
    
    </summary>
    
      <category term="接入层" scheme="http://meijing0114.com/categories/%E6%8E%A5%E5%85%A5%E5%B1%82/"/>
    
    
  </entry>
  
  <entry>
    <title>读《成为乔布斯》</title>
    <link href="http://meijing0114.com/2016/11/26/book013/"/>
    <id>http://meijing0114.com/2016/11/26/book013/</id>
    <published>2016-11-26T04:01:36.000Z</published>
    <updated>2016-11-26T04:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>《乔布斯传》的热潮似乎在慢慢的过去，人们已经逐渐淡忘了那位乔帮主，只是在每年苹果推出新产品的时候，会对tim cook 有一种矛盾的心情，既期待又担心他无法达到乔帮主的水准，愁煞了一帮果粉。</p>
<p>我是在12年才开始接触苹果的产品，对乔布斯的了解同样也是差不多时间，如今五年左右过去，回过头看看这本《成为乔布斯》，能够得到很多不同的体悟。</p>
<p>这本书作者的背景是曾任财富、华尔街日报的记者，他是能够得到乔布斯信任的不多的记者之一。要知道在很长一段时间里，乔帮主与媒体的关系并不好，这也是造成他“孤傲天才”固定形象的重要原因。</p>
<p>下面来看媒体对他的固有描述：</p>
<blockquote>
<p>史蒂夫是一位天才，在设计方面天赋过人，讲故事的能力超凡脱俗，可以产生“扭曲现实”的魔力；他就是个自以为是的混蛋，一味地追求完美，完全不顾他人的感受；他觉得自己比任何人都聪明，从来听不进任何建议，而且从出生伊始，就是天才与混蛋的结合体。</p>
</blockquote>
<p>但妖魔化的描述从来不能代表一个人的真实与多面性。本书的核心在于凸显乔布斯不服输的精神 永不满足的追求 不断学习的渴望。他绝非孤独的天才，职业生涯刚起步的乔布斯羽翼未丰、鲁莽冲动、傲慢无礼，但带领苹果扭转乾坤、重登巅峰的乔布斯却成熟稳重、思虑周全。而这种质的转变不是一蹴而就的，从1085-1997的12年时间，他都在蛰伏和不断打磨自己，理解他的成长尤为可贵。</p>
<p>要理解他的这种转变，就不能不看看他人生的各个阶段：</p>
<p>1955 出生<br>1969 结识史蒂夫沃兹尼亚克<br>1976 苹果成立<br>1979 AppleII：软驱和visiCalc<br>1980 苹果上市<br>1984 麦金塔电脑<br>1995 四年制作的玩具总动员 皮克斯上市<br>1997 重回苹果，苹果收购NeXT（OS 操作系统）<br>2000 ipod<br>2002 cancer<br>2005 迪斯尼收购皮克斯<br>2007 iphone<br>2010 ipad<br>2011 去世</p>
<h2 id="少年得志与重大挫折-1976-1985"><a href="#少年得志与重大挫折-1976-1985" class="headerlink" title="少年得志与重大挫折 1976-1985"></a>少年得志与重大挫折 1976-1985</h2><p>认识史蒂夫沃兹尼亚克给乔布斯的人生带来了第一个小高潮，凭借着他在市场营销和表达能力上的满点技能和沃兹尼亚克几乎无解的技术能力，一个个创意的小产品出现。从最早的“blue box”，到完整强大的电路板，直到appleI的出现。完全是工程师的匠心独运和市场产品人员的敏锐嗅觉的结合。</p>
<p>苹果公司正是在这种场景下应运而生。但是乔布斯却没有运营公司的经验，从租办公楼、厂房、设备，设计可靠的生产流程，组建销售团队，引入质量控制，监管工程设计，建立管理信息系统，指定财务和人事负责人，着手与主要供应商和软件开发商建立联系。这都不是他擅长的。</p>
<p>按照他自己在这个阶段的说法，他擅长创新，擅长改变世界。但却还没有达到能够捕捉业界趋势的境界。尽管他和比尔盖茨都到施乐查看了惊为天人的图形化界面和鼠标，但是如何应用仍是四处碰壁。所以这个阶段的产品，从AppleIII，到面对企业市场却费尽心思实现图形界面的Lisa，再到雷声大雨点小的麦金塔，都未能在个人电脑市场掀起波澜。而是一枝独秀的AppleII，坚挺了很长的时间。</p>
<p>ps：经典的1984广告：<a href="http://v.youku.com/v_show/id_XMTY1MzU5OTY4.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMTY1MzU5OTY4.html</a></p>
<p>这些经历表明，这个阶段的乔布斯根本不知道如何管理一家大的公司，他沉迷于小细节，逼疯工程师，用完美主义为自己的错误决策打掩护，这对苹果对团队，都是非常大的伤害。所以，不可避免的，他与董事会的冲突让他不得不黯然辞职。而逼他辞职的，就是他亲手请来的，曾经是”卖糖水”的前百事ceo john Sculley.</p>
<h2 id="十年磨一剑-1985-1997"><a href="#十年磨一剑-1985-1997" class="headerlink" title="十年磨一剑 1985-1997"></a>十年磨一剑 1985-1997</h2><p>这十二年的时间，是乔布斯转变、蛰伏、成长的时间。绝非是一帆风顺，而是仍充满着各种挫折和挑战，甚至财务危机。</p>
<p>他在NeXT苦心经营，定位便宜的工作站，面向被他称为“隐形五百强”的大学研究市场，却从未取得突破性的进展。苦心推出的第一代工作站，不但被竞争公司sun嗤之以鼻，而且甚至被比尔盖茨称为马桶一样的产品，并不愿为它开发软件。<br>由此打造一家伟大的企业成为空谈， 宏大的产品发布会成了一场看似成功却失败的秀，六年后的NeXT团队已经失去了原有的元老们。媒体开始将他与过气的失败者联系在一起。脾气暴躁，缺乏耐心，伤仲永成为了他新的标签。</p>
<p>此时时代已变，机器不重要，软件才重要，比尔盖茨最先意识到了这一点，所以他独霸九十年代。但是在Next他逐渐学会了对产品的更为理性的判断，更重要的是，在NeXT，他打造了OS X的雏形，这为他苹果的回归奠定了基础。</p>
<p>而皮克斯则是无心插柳柳成荫，遇见最佳创意管理者卡特穆尔和最佳动画师拉塞特是他最大的幸运，或者说是一种注定的相互成全。ps. 推荐卡特穆尔的《创意公司》。被离婚缠身的卢卡斯将皮克斯抛售给他，而他本想将皮克斯的3D技术用作商业化，但拉塞特的小台灯改变了一切，在图像专业大会上，人们排队六个小时，只为看几分钟的小台灯和《锡铁小人》。这甚至为他赢得了好斯卡。《玩具总动员》一鸣惊人，与迪斯尼的合作成功，皮克斯也成功上市，至少，这让他的财务又自由了。他也懂得了如何与最杰出的人进行合作，而不是总觉得自己是世上最特别的哪一个。</p>
<p>这个阶段他的转变可以概括为：</p>
<ul>
<li>从认为自己可以取代任何一个人，胜任任何一份工作到分工的理解</li>
<li>从不分轻重缓急，盲目追求视觉效果到理解人们的基本诉求</li>
<li>从追求完美，而不在意市场，慢慢的学会适应和融合</li>
<li>而他一以贯之的非常理解工程师的情感诉求，这就是为什么很多人愿意为他工作</li>
</ul>
<h2 id="扭转乾坤-1997-2011"><a href="#扭转乾坤-1997-2011" class="headerlink" title="扭转乾坤 1997-2011"></a>扭转乾坤 1997-2011</h2><p>之后的故事，大家都知道了。靠着NeXT，他重回苹果，此时的苹果，按照一些记者的说法，已经“内部腐烂”。</p>
<p>所以他：</p>
<ul>
<li>炒掉不称职的CEO</li>
<li>快刀斩乱麻的解决与微软的纠纷，推动微软为麦金塔开发软件</li>
<li>重塑企业形象，发布广告《非同凡想》，宣布苹果的价值观： <a href="http://v.youku.com/v_show/id_XMzIyNTM3MzQ0.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMzIyNTM3MzQ0.html</a></li>
<li>关掉无用的newton掌上电脑和eMate电脑产品线</li>
<li>裁员1900</li>
<li>明确只提供四种基本产品：两种台式机 两种笔记本，分别针对个人和专业人士</li>
<li>试水iMac + powerbook + OSX</li>
<li>一步一个脚印构建消费电子时代：iMovie-&gt;iTunes-&gt;iPod(johnny ive 拇指轮盘设计)-&gt;苹果专卖店-&gt;音乐电子化-&gt;safari-&gt;iphone(多点触控+触摸屏)-&gt;ipad-&gt;mac系列</li>
</ul>
<p>从下面几张图可以慢慢看到苹果的变化和不断推陈出新，走在创新边缘的步骤</p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-6a1815bc36af2e09.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ceNcZImdmrU8.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-9c8abfe451219214.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="220px-WallstreetII.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-44c7c00468efcc4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ipod-5th-gen.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-a103d93c6bf7478b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ios_6_app_store_steve_jobs_iphone_2007.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/96723-96108f9d0c0ab2f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bbd878e2bcae7ec8421e812276e6b57b.png"></p>
<p>如此高产，如此多的创意，一步一个脚印。从破产的泥潭，到世界上市值最高的科技公司，乔帮主可谓殚精竭虑，他并非外界所想的那般冷酷无情，他不是那么好相处，确实是，但他对整个消费电子时代的推动，对推出创新产品的初心丝毫未变。在此想起乔布斯在<a href="http://open.163.com/special/opencourse/jobs.html" target="_blank" rel="external">斯坦福演讲</a>中对The Whole Earch Catalog的引用: Stay hungry stay foolish，与君共勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《乔布斯传》的热潮似乎在慢慢的过去，人们已经逐渐淡忘了那位乔帮主，只是在每年苹果推出新产品的时候，会对tim cook 有一种矛盾的心情，既期待又担心他无法达到乔帮主的水准，愁煞了一帮果粉。&lt;/p&gt;
&lt;p&gt;我是在12年才开始接触苹果的产品，对乔布斯的了解同样也是差不多时间，
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="读书" scheme="http://meijing0114.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>山水游重庆</title>
    <link href="http://meijing0114.com/2016/10/06/travel001/"/>
    <id>http://meijing0114.com/2016/10/06/travel001/</id>
    <published>2016-10-06T04:28:34.000Z</published>
    <updated>2016-10-06T04:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="山城的路"><a href="#山城的路" class="headerlink" title="山城的路"></a>山城的路</h2><p>去重庆之前，听到最多的一句就是不要在重庆使用高德导航，因为这个城市的路从不以常理出牌。咋听下来不以为然，但是因为要租车，所以还是有一些忐忑。第一天刚到酒店，便忙不迭的出门探路，顺便去人气火锅店打个尖。从导航来看，不过一公里直线距离，哪知道刚出门就直呼上当。这一公里是结结实实的跌宕起伏:出门先是一个大环路，然后就是五百米的爬坡，这还不算完，又经过了三百米的六十度登山运动，这才差不多到了终点。待气喘吁吁的登了上去，竟然已经可以俯瞰住处，不禁称奇。</p>
<p>有了这么一出，却也还没免去第二天取车时的尴尬。大马路进入大名鼎鼎的洪崖洞，抬头一看，竟是十层。离着负一层的停车场差了一个人山人海的电梯。九牛二虎之力之后，终于到达负一层，一抬头竟又是大马路，令人啧啧称奇。所以呢，这座城市永远能给你惊喜，因为楼下有楼，路下有路。更妙的是，楼中有车，轻轨可以穿楼而过。楼中有路，长达二百米的大电梯让你扶层而上，甚至还要你留下两块的买路钱:)</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8ig5hdz6mj20zk0zkwle.jpg" alt=""></p>
<p>不过不得不说的一点是，在通行方面，城市的设计者确实也随性了些。对我一个健康人而言，很多地方的通行已经是一种障碍了。洪崖洞从十层到一层，踩了十几只脚，挤了七八趟电梯，十分不便。山城的魅力虽然是在此，但也确实应当更加对出行的便利性加以考虑。</p>
<p>山城两字，其实也不足以囊括重庆的精髓，因为地处嘉陵江和长江的两江交汇之处，重庆的水路也是十分的发达。朝天门码头赫赫有名，曾经在历史上承担着无比重要的地位。作为长江黄金水段的源头，碧绿的嘉陵江与浊黄的长江水在此交汇。顺水而下，遍览三峡。</p>
<p>当然了，山城的交通是立体的，除去水路和陆路，更有别具一格的空路 – 长江索道。在《周渔的火车》《疯狂的石头中》，长江索道亮点十足，最喜得就是在雾蒙蒙的江面上，独坐索道，看雾中有山，雾中有水，心里却思考着远方的感觉。让人能够不由自主的从繁复的生活中抽出，思考着人生的意义。不过在旅游旺季，就没有这么好的待遇了，长达两小时的排队和骤至的暴雨都让人等待的心焦。拥挤的人群和登索道时的忙乱更是有些措手不及，说话间，五分钟的索道就到了终点。不免有些意犹未尽，不过留下点遗憾也好，至少下次来时，还有些心中未完成的事。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5gsa1uj20zk0zkdj8.jpg" alt=""></p>
<p>路在脚下，除了用脚去丈量，开车也是一种不错的方式。自驾在重庆，是一种特别的体验。第一个体验就是眼见，重庆的人民感觉特别的随性，不止一次在内环高速或是跨县高速上看到有行人徒步，啧啧称奇。第二个体验就是脚踏，在山城开车，要求很高。尤其是高峰时段，开车排队在上山路上时，为了谨防溜车，脚始终要在刹车和油门之间进行无缝的切换。开了一会儿就要活动那么一下，就怕自己车还没上去，脚已经抽筋了。第三个体验就是路险，s弯、临水临山路、发夹弯、连续下坡都是家常便饭，尤其是当你拐弯拐到自己的右后上方的时候，不禁要感叹，以前古代人民真不容易。</p>
<h2 id="山城的吃"><a href="#山城的吃" class="headerlink" title="山城的吃"></a>山城的吃</h2><p>每个来山城的人，都怀揣着一颗蠢蠢欲动的吃货心。不过往往发生最多的情况就是，这颗吃货心会迅速的在火锅的刺激下达到顶点，然后在肠胃和口腔的双重作用下，回归成“不吃辣椒我也可以活的很好”的认怂心态。对我来说，对重庆辣度的挑战，在第一天还没开始，就已经结束了。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f8ig5ih34lj20zk0zk7al.jpg" alt=""></p>
<p>重庆菜能够放上台面来讲的，无非几样。民间的以小面、酸辣粉为首，讲究走入民间，越是平民化，越是环境一般性，越是巷子深，越是来的人络绎不绝。著名的胖妹小面，虽然不知是不是重庆小面二十强，称得上是这么的一个范例。尽管非常可惜的是店主十一休假去了，但是从环境来看，确实只是略好于路边摊，不过味道据吃过的人说，相当的“巴适”。</p>
<p>用小面解决了早饭，中饭最好来一桌江湖菜。重庆的所谓江湖菜，我的理解，讲究一种取材。因地制宜，食材很关键。因为重庆靠山又临水，所以食材可以说十分丰富。南山上的泉水鸡，一鸡三吃，道道入味，尤其是主菜椒麻鸡，肉质细嫩，入味三分。另一个比较耳熟能详的江湖菜就是毛血旺，各种食材汇聚，鲜香一锅，令人垂涎不已。就是这么些不上大桌的菜，吃的很有味道，吃完酣畅淋漓，十分痛快！</p>
<p>时间转到黄昏，整个城市起雾了，雾蒙蒙的江岸边，仔细那么一闻，还真有股老火锅的味道。现在重庆火锅主要就是两个流派，一个是新式火锅，处于特别高端的cbd或是商业街区，在口味、环境方面都做了不少的改良。还有就是所谓的“老火锅”，这些火锅店往往是酒香不怕巷子深，隐藏于不同的居民区、街区。其中有在地下室的，有在山头上的，还有在山洞里面的。家家都有那么几样经典：黄喉 牛肚 鸭肠，谁也不让谁。但是家家也都有自己的汤底独家秘方，往往那饕餮的食客们，就是闻着这么股夹杂着海椒、花椒和各式香料的味道作为导航，在一桌桌麻辣鲜香中大快朵颐。</p>
<h2 id="文化自然双遗"><a href="#文化自然双遗" class="headerlink" title="文化自然双遗"></a>文化自然双遗</h2><p>一通山城的饮食三板斧之后，驱车一路向西，不出200公里，就是世界文化遗产，大足石刻。一路向东，也是200公里上下，就是世界自然遗产，武隆天坑。一文一武，既有自然界的鬼斧神工，也有宗教人文的源远流长。</p>
<p>来了大足石刻，一圈下来，可以说是应接不暇。每一座石刻都有故事，每一处设置都有出处。雕刻家与修行者兢兢业业，为的是将他们心中的佛法留存和流传，为此殚精竭力。比如著名的九龙浴太子图，出处乃是释迦摩尼的降生故事：</p>
<p>净饭王之妻摩耶夫人身怀有孕，出游兰毗尼园中，手攀树枝，太子悉达多从其右腋下降生。太子降生即能行走七步，步步生莲，并一手指天，一手指地说：天上地下，唯我独尊。时有九蛇至太子头顶，口吐香水，为太子洗浴，诸天护俱来守护。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5sxgouj21kw16otwi.jpg" alt=""></p>
<p>这样的一个雕塑，体现了匠人的匠心独运，与自然水势相结合，引用山泉之水，为太子沐浴。正所谓因地制宜，顺势而为。而由于中国人认为蛇是邪恶的，所以故事在中国进行了进一步的演化，蛇变成了神龙。这种佛教的本地化，在佛教传入中国的过程中比比皆是。这种演化，是宗教在传播过程中遇到阻碍产生的自适应。便览大足石刻，你就能看到这种变化，从单纯的佛教主题石刻，到带有中国特色孝道的佛教石刻，再到佛、道、儒三者融合的石刻，看着这些石刻，就像是层叠的历史，完整的展现在你的面前，说真的，比大片还要过瘾。</p>
<p> 大足石刻多不胜数，而且各个内涵深意，再提一个六道轮回图，这是第一次完整的看到所谓的六道轮回及其深意。其中必须要说的是左下角那个竹林猫鼠相戏图。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f8ig5jzf7zj21kw2dme81.jpg" alt=""></p>
<p>猫于竹林下，看着竹上的老鼠，想吃却吃不到，心急如焚。老鼠在竹子上瑟瑟发抖，想求生却又无处可逃。正所谓：</p>
<p>欲求不得，苦之本也<br>看完人文景观，不妨转战天坑地缝芙蓉洞。自然的鬼斧神工，在这里几乎全部集齐。既有天生三桥这样的峡谷，又有芙蓉洞这样的山体溶洞。古人云，天人合一，请看下图，确实很适合修炼:)</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8ig5g8kqmj20zk0zktfl.jpg" alt=""></p>
<p>此地可以说在我第一次看到时，就觉得满足了我心中隐居的所有想象。深山之中，树影婆娑，一座小院，修生养性，尽管参观时人流滚滚，但站在庭院中心，一停一转，吸收天地灵气，确实又忘我之感。</p>
<p>山城来也匆匆，去也匆匆，仍有不少魅力值得探寻，但留下遗憾，即是留下再访的理由。重庆，再见！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;山城的路&quot;&gt;&lt;a href=&quot;#山城的路&quot; class=&quot;headerlink&quot; title=&quot;山城的路&quot;&gt;&lt;/a&gt;山城的路&lt;/h2&gt;&lt;p&gt;去重庆之前，听到最多的一句就是不要在重庆使用高德导航，因为这个城市的路从不以常理出牌。咋听下来不以为然，但是因为要租车，所以
    
    </summary>
    
      <category term="旅行" scheme="http://meijing0114.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>编写可读代码的艺术</title>
    <link href="http://meijing0114.com/2016/09/21/book012/"/>
    <id>http://meijing0114.com/2016/09/21/book012/</id>
    <published>2016-09-21T00:59:14.000Z</published>
    <updated>2016-10-21T01:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码应当易于理解"><a href="#代码应当易于理解" class="headerlink" title="代码应当易于理解"></a>代码应当易于理解</h2><h2 id="表面层次的改进"><a href="#表面层次的改进" class="headerlink" title="表面层次的改进"></a>表面层次的改进</h2><h3 id="把信息装到名字里"><a href="#把信息装到名字里" class="headerlink" title="把信息装到名字里"></a>把信息装到名字里</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwunkasj20l30dhwhr.jpg" alt=""></p>
<p>把信息装入名字：</p>
<ul>
<li>使用专业的词汇；</li>
<li>避免泛泛的名字</li>
<li>在适当的作用域使用适当的单词长短；</li>
<li>通过后缀的方式增加额外的信息，比如单位，比如编码的描述；</li>
<li>利用名字的格式来表达含义（通过使用下划线等区分类的变量）</li>
<li>用具体代替抽象的名字</li>
</ul>
<h4 id="使用专业的词汇"><a href="#使用专业的词汇" class="headerlink" title="使用专业的词汇"></a>使用专业的词汇</h4><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwu2j9uj20kq0c341j.jpg" alt=""><br>清晰和精确比装可爱好。</p>
<p>重灾区：get size</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">def  GetPage(url)</div></pre></td></tr></table></figure>
<p>换成FetchPage或DownloadPage会好很多</p>
<p>size -&gt; height nums memoryBytes</p>
<p>stop -&gt; kill resume pause</p>
<p>find -&gt; search extract locate recover</p>
<p>send -&gt; deliver dispatch annouce distribute route</p>
<p>start -&gt; launch create begin open</p>
<p>make -&gt; create setup build generate compose add new</p>
<h4 id="避免泛泛的名字"><a href="#避免泛泛的名字" class="headerlink" title="避免泛泛的名字"></a>避免泛泛的名字</h4><p>比如retval tmp data ret<br>使用更具象的名字能够帮你清楚的定位错误。</p>
<p>tmp的用武之地只在于经典的变量交换。</p>
<p>循环迭代器索引：i j k 的大灾难，加上数组名前缀 mi ci di</p>
<h4 id="具体的名字代替抽象的名字"><a href="#具体的名字代替抽象的名字" class="headerlink" title="具体的名字代替抽象的名字"></a>具体的名字代替抽象的名字</h4><p>在给变量、函数或其他元素命名时，描述的更具体而不是更抽象。<br><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f87vwxtmsdj20is0hx76m.jpg" alt=""><br>比如参数 –run_locally 本来是用来输出额外的调试信息</p>
<ul>
<li>新成员不知道干嘛的</li>
<li>有时候远程也需要输出调试信息</li>
<li>有时候本地性能测试，不想输出调试信息<br>其实更适合extra_logging</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/mw690/67ad48bbgw1f87vwx38fgj20jo0ay403.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f87vwwjq5lj20jk0c20v9.jpg" alt=""><br>为了更具体，需要<strong>为名字附带更多的信息</strong>。</p>
<ul>
<li>带单位的值: diff_ms max_kbsps size_mb</li>
<li>附带其他重要属性 hex_id data_urlenc html_utf8 plaintext_password</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f87vwvvukpj20lb0dg0vx.jpg" alt=""><br>那么一般<strong>名字应该有多长</strong>呢？</p>
<ul>
<li>小的作用域里可以使用短的名字，比如if for 甚至可以用单个字母</li>
<li>不用担心长名字，现在都有自动补全了</li>
<li>首字母缩写，经验原则是你还是否能理解这种缩写？比如QD就很好理解，WSD可能有点难，REC就更难了</li>
<li>普遍的没问题 str-&gt;string cnt-&gt;count eval-&gt;evaluation doc-&gt;document</li>
<li>丢掉没用的词 convert_to_string -&gt; to_string</li>
</ul>
<p>利用名字的格式来传递含义：<br>下划线 连字符和大小写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static const int kMaxOpenFiles = 100;//常量并非全大写，区分宏</div><div class="line">class LogReader &#123;// 类名驼峰</div><div class="line">  public:</div><div class="line">    void OpenFile(string local_file//变量名);</div><div class="line">  private:</div><div class="line">    int offset_;//类成员变量用下划线</div><div class="line">    DISALLOW_COPY_AND_ASSIGN(LogReader);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>总结本章：把信息塞到名字里去。</p>
<ul>
<li>使用专业的单词——例如，不用Get，而用Fetch或者Download可能会更好，这由上下文决定。</li>
<li>避免空泛的名字，像tmp和retval，除非使用它们有特殊的理由。</li>
<li>使用具体的名字来更细致地描述事物——Server Can Start()这个名字就比CanListenOnPort更不清楚。</li>
<li>给变量名带上重要的细节——例如，在值为毫秒的变量后面加上ms，或者在还需要转义的，未处理的变量前面加上raw_。</li>
<li>为作用域大的名字采用更长的名字——不要用让人费解的一个或两个字母的名字来命名在几屏之间都可见的变量。对于只存在于几行之间的变量用短一点的名字更好。<br>有目的地使用大小写、下划线等 — 例如，你可以在类成员和局部变量后面加上”_”来区分它们。</li>
</ul>
<h3 id="不会误解的名字"><a href="#不会误解的名字" class="headerlink" title="不会误解的名字"></a>不会误解的名字</h3><p>关键原则：多问自己几遍，这个名字会被别人误解成其他的含义么？<br><img src="http://ww4.sinaimg.cn/mw690/67ad48bbgw1f8a7c2q9s7j20ld0e3ad1.jpg" alt=""></p>
<p>例子：</p>
<ul>
<li>filter：需要明确是挑出来，还是过滤掉</li>
<li>clip(text,length)：减掉length，还是剪出来length -&gt; truncate更好</li>
<li>length-&gt;max_length-&gt;max_chars</li>
<li>差一问题：max<em> min</em> 进行明确，不要使用limit</li>
<li>first last表明范围，不要用start stop</li>
</ul>
<p>一些基本的实践：</p>
<ul>
<li>给bool命名,增加is has can should 这样的词</li>
<li>与使用者的期望匹配：举出了STL里面有一个size的函数调用，其实O(N2)的操作</li>
</ul>
<h3 id="审美"><a href="#审美" class="headerlink" title="审美"></a>审美</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7c23twpj20mf0fggoo.jpg" alt=""><br>好的审美真的很重要。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f8a7c14eqkj20lo0dpwhq.jpg" alt=""><br>三条原则：</p>
<ul>
<li>使用一致的布局，让读者很快习惯这种风格；</li>
<li>让相似的代码看起来相似；<ul>
<li>并不一定局限于固定换行</li>
<li>但要保持一种固定的顺序</li>
</ul>
</li>
<li>把相关代码分组，形成代码块<ul>
<li>按照逻辑分组分段，会更为清晰</li>
</ul>
</li>
</ul>
<p>让代码好看，有的时候也会涉及到一些对代码本身的改进，比如对方法的抽象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Logger &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Logger</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人风格的一致性，一致的风格，比正确的风格更为重要。</p>
<h3 id="该写什么样的注释"><a href="#该写什么样的注释" class="headerlink" title="该写什么样的注释"></a>该写什么样的注释</h3><p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7c0i74zj20lo0fw76u.jpg" alt=""></p>
<p>关键思想：注释的目的是尽量帮助读者了解的和作者一样多</p>
<h4 id="什么不需要注释"><a href="#什么不需要注释" class="headerlink" title="什么不需要注释"></a>什么不需要注释</h4><p>那些很明显的逻辑(能够被快速推断出来的逻辑)，或者是因为命名不准确做的多余注释，为了注释而注释。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f8a7bzou36j20k40humzr.jpg" alt=""></p>
<p>明显的逻辑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// The class definition for Account</div><div class="line">class Account &#123;</div><div class="line">    public:</div><div class="line">    // Contructor</div><div class="line">    Account();</div><div class="line">    // set the profit member to a new value</div><div class="line">    void SetProfit (double profit);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不好的名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Realease the handle for this key, does not modify actual registry</div><div class="line">void DeleteRegistry(RegistryKey * key);</div></pre></td></tr></table></figure>
<h4 id="记录你的思想"><a href="#记录你的思想" class="headerlink" title="记录你的思想"></a>记录你的思想</h4><p>加入导演评论：上帝视角</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// 使用二叉树比哈希表处理这些数据快很多</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// 这个类太乱了，谁写的，应该建立一个子类来处理它</div></pre></td></tr></table></figure>
<p>加入特定的标记</p>
<table>
<thead>
<tr>
<th style="text-align:right">标记</th>
<th style="text-align:right">通常的事情</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">todo</td>
<td style="text-align:right">未处理</td>
</tr>
<tr>
<td style="text-align:right">FIXME</td>
<td style="text-align:right">已知的无法运行的代码</td>
</tr>
<tr>
<td style="text-align:right">HACK</td>
<td style="text-align:right">为解决问题做的粗糙方案</td>
</tr>
<tr>
<td style="text-align:right">XXX</td>
<td style="text-align:right">危险！这里有重要问题</td>
</tr>
</tbody>
</table>
<p>给常量加注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const CHAPTER_MAX = 500 // 后台能接受的最大为500，超过会有超时</div></pre></td></tr></table></figure>
<h4 id="站在读者的角度"><a href="#站在读者的角度" class="headerlink" title="站在读者的角度"></a>站在读者的角度</h4><p>公布可能的陷阱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void SendEmail(string to, string subject ,string body);</div></pre></td></tr></table></figure>
<p>这个调用有可能会花费整整一秒的时间，标注可能的超时时间。</p>
<p>一些全局观:</p>
<ul>
<li>类之间如何交互</li>
<li>数据如何在整个系统中流动</li>
<li>入口点在哪里</li>
</ul>
<h4 id="注释会打断你的思绪么"><a href="#注释会打断你的思绪么" class="headerlink" title="注释会打断你的思绪么"></a>注释会打断你的思绪么</h4><p>其实很多时候会帮助你整理思绪。<br>把要实现的逻辑拆成几个不同的步骤，然后逐一时间，定义接口。</p>
<h3 id="写出言简意赅的注释"><a href="#写出言简意赅的注释" class="headerlink" title="写出言简意赅的注释"></a>写出言简意赅的注释</h3><p>图1</p>
<p>写出注释的关键一点在于：注释应该有很高的信息/空间率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码应当易于理解&quot;&gt;&lt;a href=&quot;#代码应当易于理解&quot; class=&quot;headerlink&quot; title=&quot;代码应当易于理解&quot;&gt;&lt;/a&gt;代码应当易于理解&lt;/h2&gt;&lt;h2 id=&quot;表面层次的改进&quot;&gt;&lt;a href=&quot;#表面层次的改进&quot; class=&quot;header
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>读阳明先生心学有感</title>
    <link href="http://meijing0114.com/2016/09/01/book011/"/>
    <id>http://meijing0114.com/2016/09/01/book011/</id>
    <published>2016-09-01T00:58:30.000Z</published>
    <updated>2016-09-17T08:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结缘，之前的感受"><a href="#结缘，之前的感受" class="headerlink" title="结缘，之前的感受"></a>结缘，之前的感受</h2><p>早先在看《明朝那些事》的时候，心里就一直对王阳明有了这么一个印象。书中的具体描述已然淡去，但作者对王阳明的心学的推崇，以及其弟子遍地开花，执掌明朝内阁大权的事实却是浓墨重彩的。当时对心学的唯一印象就是“知行合一”。尽管简单，但是让我很有好感。以致于很长的一段时间里，我并不以为它是儒学的一个分支，而是认为它是更入市，或者说更接地气的一种为人处世的方式。</p>
<p>直到近日，心中烦恼颇多。烦恼并非来自于现实中的不顺利，反而是来自于生活中的倦怠与惯性，让我感到心力俱疲。在这种情况下，不自觉的想要去寻求一种答案，再加上之前对心学的这么一个良好的印象。所以才有了对这本《王阳明-最神奇的心学》的细读。</p>
<p>不过说实话，刚开始读的时候有些患得患失。一方面担心这又是一本古文翻译而来的鸡汤（事实上书中不少篇幅确实如此），另一方面，接触了西方的那套自由思想体系之后，怕形成价值观上的冲突。不过读起来之后，倒是领悟了书中的一点：寻求本心而破除纷扰，你领悟的只是本心的，和你本来拥有的也并不冲突。这本二手书的优点在于，作者的诗词底子很好，很多心学的思想，他通过一些诗词的方式表示出来，非常能够加深你的理解。</p>
<p>太阳底下没有新鲜事，春秋战国时代百家争鸣，看后来人所议论之事，无一不能从百家经典中找到验证，不禁让人神往那个思想碰撞的年代。王阳明之言，在我看来很多是一种回归，去掉宋代朱熹那种格物的思想，提出了知行合一的观点，更关注了人性本身。</p>
<h2 id="阳明此人"><a href="#阳明此人" class="headerlink" title="阳明此人"></a>阳明此人</h2><p>王阳明一身跌宕起伏，有过少年天才得志，也有过官场为奸臣所害，更有的是龙场悟道与评定宁王之乱。更重要的是他将所行所悟，发扬光大，在他之后的明代内阁首辅，几乎大部分都受到了心学的影响。他的人生关键词可以总结为，阳明格竹 龙场悟道 宁王之乱 创立心学。 从人生轨迹和成就上来看，他是第一个实现立功立言立德的三不朽的神人。</p>
<p>心学的核心思想是心即是理，反对格物致知，提倡知行合一。说到格物，维基百科中提到了一件很有趣的事，说王阳明小时候喜欢杨朱理学，相信天下之物皆有义理，所以他不断的格物，曾经两周的时间尝试去“格”竹子，结果一场大病，最后痛定思痛，再也不从外物出发，而是关注于自己的内心。</p>
<p>史书说王阳明豪迈不羁而又十分有个性，而他自己也是表达了宁做狂人不做小人的心态：</p>
<p>“乡愿以忠信廉洁见取于君子，以同流合污无忤于小人，故非之无举，刺之无刺。然究其心，乃知忠信廉洁所以媚君子也，同流合污所以媚小人也，其心已破坏矣，故不可与入尧舜之道。狂者志存古人，一切纷嚣俗染，举不足以累其心，真有凤凰翔于千仞之意，一克念即圣人矣。惟不克念，故阔略事情，而行常不掩。惟其不掩，故心尚未坏而庶可与裁”</p>
<p>与其去做一个乡人赞赏的老好人，还不如做个狂人，更近本心，这里深得我心。因为我从小就被称为好人，循规蹈矩，不敢越雷池一步。长大后不自觉有逆反心理，常常心中所想与实际所做大相径庭。慢慢的学会贴近自己的本心，而不是以他人的眼光，定义自己的行为。</p>
<p>还有一定要提的就是王阳明的军功，作为文人，他的作战水平相当之高。对兵法的理解也是入木三分的。明史中对他的军事才能，也是十分赞赏。宁王叛乱时，谣言满天飞。而他稳如泰山，调兵遣将，迷惑对手，几乎以一人之力，平定了宁王叛乱。当真文武双全。</p>
<h2 id="精华，受到启发的地方"><a href="#精华，受到启发的地方" class="headerlink" title="精华，受到启发的地方"></a>精华，受到启发的地方</h2><p>本书将王阳明的心学主观的分成了如下的几个部分：</p>
<ul>
<li>磨砺</li>
<li>立志</li>
<li>行动</li>
<li>态度</li>
<li>智慧</li>
<li>处世</li>
</ul>
<p>对于<strong>磨砺</strong>，王阳明所提倡的就是让能力在磨练中快速成长。</p>
<blockquote>
<p>人须在事上磨练做功夫，乃有益。若只好静，遇事便乱，终无长进</p>
</blockquote>
<p>很多时候，不管是工作还是生活，我们往往会进入一种舒适的区域。在这个区域之内，我们便不敢越雷池一步。生怕犯错，生怕打破现有的生活平衡。但是如果没有磨砺，就不会有进步，就不能突破自己。但是呢，人们改变自己的意愿，有的时候又没那么强烈，所以这个时候，重要的便是<strong>立志</strong>。</p>
<p>因为“志不立，天下无可成之事”，有了决心和一个具体的目标，你会调动自己所有的能力，用尽方法去完成它。反过来，没有目标，那么努力了一段也很有可能停滞。古往今来，成大事的人往往有大志，比如张载：为天地立心，为生民立命，为往圣续绝学，为万世开太平。比如司马迁的写史书之志。但是作为我们一般人来说，是很难有这样的志向的，或许是因为际遇不足，或许是因为个人涵养不足。因此，我们正确的立志就更重要了。</p>
<p>对我来说，利用科技改变大家的生活很重要，我也愿意为之奋斗，所以我给自己也立下了这样的志向。或许不大，但是如果能够完成，对我而言就是一种巨大的满足。</p>
<p>但是立了志，如果不能正确的<strong>行动</strong>，仍是毫无用处。所以遇到该完成的时候时候，必须 “马上行动，一以贯之”。当然了，马上行动并不是鲁莽的行动，而是根据你的判断和思考所进行的行动。因为去尝试，永远好过于一直在等待。实践中的学习，永远好过纸上谈兵。如果面对该做的事情的时候，总是推脱说一切万事俱备了才去做，如此永远做不成。这种所谓等待万事俱备的推脱心态，必须加以警惕，区分到底是真的仍需时间，还是你的惰性所引起的拖延症又犯了。</p>
<p>行动固然重要，不半途而废更是如此。米卢说，<strong>态度</strong>决定一切。行动中要自己做自己的贵人。陈胜吴广起事的时候，在鱼中放置陈胜为王的布条。这就是一种心理的安慰，只有去除了疑惑，坚定了信念，做事情才能一往无前。而当你真的要做的时候，记得努力到极致，否则的话，倒还不如不做了。而一件事，如果你真想想做，很多时候方法会源源不断，记得放下你的偏见，放下你曾经学过的不能，而是发动一切你可以发动的力量。<br>所谓</p>
<blockquote>
<p>瞽者善听，聋者善视，绝利一源，用师十倍，三返昼夜，用师万倍。</p>
</blockquote>
<p>关注在一点的时候，就能够水滴石穿。</p>
<p>书中同样对<strong>智慧</strong>着墨很多，其中最得我心的就是“活在当下”。</p>
<blockquote>
<p>只存得此心常见在，便是学。过去未来事，思之何益？徒放心耳！</p>
</blockquote>
<p>这与《新世界，灵性的觉醒》中的观点何其相似。只有活在当下，你才能更好的体察当下。试着放弃其他无关的事情，花一个小时去全神贯注地做一件事。做时时刻留心、管住自己每一刻的感受。人的不快乐，很多时候来自于对事务的心猿意马，俗话说呢，就是吃着碗里的看着锅里的。而心猿意马时，及时地把自己拉回来，只要能够意识到自己的杂念就行。每天尝试冥想十分钟，完全的放飞自己的心灵，你会发现，之前让你十分苦恼的情绪，也就烟消云散了。</p>
<p>前面都是些自己的修为，<strong>处世</strong>则着重去说与他人和社会的接触。</p>
<blockquote>
<p>山光物态弄春辉，莫为轻阴便拟归。纵使晴明无雨色，入云深处亦沾衣。</p>
</blockquote>
<p>俗话说，常在河边站哪有不湿鞋，所以遇人闲话，不妨置之一笑。遇人侮辱，只当是耳边风。</p>
<blockquote>
<p>天地生意，花草一般。何曾有善恶之分？子欲观花，则以花为善，以草为恶。如欲用草时，复以草为善</p>
</blockquote>
<p>改变你的心境，就在一瞬间。现在我的很多快乐，往往是建立在与他人比较的基础之上的，很多不快乐，同样也是如此，这正应了阳明先生所说：</p>
<blockquote>
<p>不知就自己心地良知良能上体认扩充，却去求知其所不知，求能其所不能，一味只是希高慕大，不知自己桀纣心地，动辄要做尧舜事业，如何做得？</p>
</blockquote>
<p>确实值得反思。</p>
<p>诗中有云：</p>
<blockquote>
<p>钓罢归来不系船，江村月落正堪眠。纵然一夜风吹去，只在芦花浅水边。</p>
</blockquote>
<p>这种顺其自然的功夫，现在的我有些望尘莫及，但在世间纷纷扰扰之时，不妨给自己留下这么一扇窗，让自己的心灵透透气。</p>
<h2 id="践行，我所认同的心学"><a href="#践行，我所认同的心学" class="headerlink" title="践行，我所认同的心学"></a>践行，我所认同的心学</h2><p>初读这本书，自以为还是有一些收获。对我的日常生活影响最大的不外乎以下几点：</p>
<ul>
<li>活在当下</li>
<li>控制情绪，让情绪不侵入本心，而是本心静静的看着他们</li>
<li>立志，必须让远大的志向催动自己前行</li>
<li>用中学，掉书袋是万万不可的</li>
<li>想到就去做，不要犹豫，不要让自己后悔</li>
<li>专注的去做，但不是盲目的去做</li>
<li>只有见遍了好东西，才能有自己好的产出</li>
</ul>
<p>对心学一些理解仍在与自己的生活验证，而心学中的观点有些也无法完全认同。但是这种体察本心的过程，确实让我多了那么一丢丢对自己的生活的控制和专注。不过一旦遇到比较棘手的事情的时候，还是很容易乱了方寸。比如近期家中的杂事，时常让自己如热锅上的蚂蚁，想做却又无可奈何，这种情况下，对自己心态的磨砺也就尤为重要了。越是此时，越要控制住情绪，越是放任，越容易掉入情绪的大坑，与君共勉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结缘，之前的感受&quot;&gt;&lt;a href=&quot;#结缘，之前的感受&quot; class=&quot;headerlink&quot; title=&quot;结缘，之前的感受&quot;&gt;&lt;/a&gt;结缘，之前的感受&lt;/h2&gt;&lt;p&gt;早先在看《明朝那些事》的时候，心里就一直对王阳明有了这么一个印象。书中的具体描述已然淡去，但
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="哲学 心学" scheme="http://meijing0114.com/tags/%E5%93%B2%E5%AD%A6-%E5%BF%83%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>上海酒店之外滩茂悦</title>
    <link href="http://meijing0114.com/2016/08/13/life001/"/>
    <id>http://meijing0114.com/2016/08/13/life001/</id>
    <published>2016-08-13T10:14:41.000Z</published>
    <updated>2016-09-17T07:32:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前被同事安利，再加上自己之前也比较有兴趣。就去申请了一张招商银行的经典白金卡。算是真正的入坑了。这种卡带的福利还是相对不错的，比如有：</p>
<ul>
<li>每年送一次体检</li>
<li>每年送一次口腔保健</li>
<li>兑换航空公司里程</li>
<li>每年6次机场贵宾厅</li>
</ul>
<p>不过还有一个很不错的权益，那就是每年四次的300块住五星级酒店的权益。看了一下上海的列表，本来打算去住佘山艾美+欢乐谷，但是却发现佘山艾美实在是太热门了。所以最后抱着一种进城的心态，住了外滩茂悦。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f7wlob002ij20hs0vk470.jpg" alt=""></p>
<h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><p>去酒店第一个体验的是膳食。提前预定了酒店靠窗的自助餐，下面分别打分：</p>
<ul>
<li>环境：4分</li>
<li>口味：3分</li>
<li>服务：4分</li>
</ul>
<p>总体来说其实有些差强人意，环境还算马马虎虎，但是口味实在是不敢恭维。作为280这个价位的自助来说的话，它的膳食的品类、新鲜度和味道都没有达到预期。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f7wlrejxlrj216o1kwtlm.jpg" alt=""></p>
<p>其中为数不多的亮点，一个是煲仔饭，还有一个是生蚝。煲仔饭的话做法比较广式，但是食材稍差了写。生蚝算是实打实的，毕竟没有那个新鲜度的话，一般也不能放出来让你生吃不是。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f7wlrd6aygj216o1kwdw1.jpg" alt=""></p>
<p>环境的话，因为并不是直接临着外滩的，所以无法享受到无敌的江景。但是位置的安排还算合意。灯光和氛围也是中规中矩。</p>
<p>服务的话其实比较差，除了引导之外，别的服务都有点形同虚设。收拾的服务员差点把我们没吃完的东西收掉，铁板烧的服务员也是有点爱理不理。看来在这块的服务质量有待提高啊。</p>
<h2 id="房间"><a href="#房间" class="headerlink" title="房间"></a>房间</h2><p>房间的话，大小应该算是同类酒店里面的中等。先来说几个亮点，一个是浴室和房间的连接设计的很好：<br><img src="http://ww2.sinaimg.cn/mw690/67ad48bbgw1f7wlo8r5m9j21kw23uan4.jpg" alt=""></p>
<p>还有一个就是落地窗的设计使得视野十分的开阔，同时电动窗的设计也很贴心，能够保证你一觉睡到天亮。</p>
<p>但是吐槽的地方也不少，一个是开关老化，各种开关，都没有能够很顺畅的实现我想打开各种灯的想法。。反而是一直在不停的尝试，晚上起夜的时候非常的痛苦。电视的尺寸也是蛮小的，现在哪还有这种尺寸的电视。所以在硬件条件上，感觉房间是不够达标的。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f7wlo0ve7pj21kw16oti3.jpg" alt=""></p>
<h2 id="环境与其他设施"><a href="#环境与其他设施" class="headerlink" title="环境与其他设施"></a>环境与其他设施</h2><p>另外体验的酒店设施，一个最大的亮点就是顶楼的“非常时髦酒吧”。据说是小时代的取景地，它的逼格、视野和酒品都是中等偏上的，不多说，先来看几张无敌的景色照片：</p>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbjw1f7wm9kq49tj21kw0qr14n.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbjw1f7wm9mjmaij21kw1kw4ge.jpg" alt=""></p>
<p>酒吧一进去就逼格满满，是由几千个酒瓶镶嵌在墙上组成的装饰，十分的震撼。有靠窗的位置，也有内侧的包间，可以满足不同喜好。而更加惊艳的是二楼，一个全开放式的天台设计，中间还有一个小泳池。一遍喝着鸡尾酒，一遍吹着风，同时看着外滩的无敌美景，这种感觉的确是一种很好的体验。怪不得进去的每个妹子都是不停的自拍。</p>
<p>第二天早上，赶着点体验了一把泳池和水疗中心。泳池的条件没的说，不过就是池水比较浅。水疗中心里面的话，汗蒸湿蒸，温泉都是一应俱全的。这点上倒是十分的良心，值得推荐！</p>
<p>除此之外，checkin和checkout都是被吐槽的，checkin的妹子错误告诉我关于早餐的信息，checkout的时候莫名的有一个外国人在错误的引导，不知所谓，差点停车票也没了，这点实在是有失水准。</p>
<p>不过综合来看，胜在位置和顶楼的bar，为了这两点，还是可以来体验一下的。再次推荐招行，中秋还在酒店附送了一盒月饼，良心~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前被同事安利，再加上自己之前也比较有兴趣。就去申请了一张招商银行的经典白金卡。算是真正的入坑了。这种卡带的福利还是相对不错的，比如有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每年送一次体检&lt;/li&gt;
&lt;li&gt;每年送一次口腔保健&lt;/li&gt;
&lt;li&gt;兑换航空公司里程&lt;/li&gt;
&lt;li&gt;每
    
    </summary>
    
      <category term="旅行与生活体验" scheme="http://meijing0114.com/categories/%E6%97%85%E8%A1%8C%E4%B8%8E%E7%94%9F%E6%B4%BB%E4%BD%93%E9%AA%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>dotfiles入门</title>
    <link href="http://meijing0114.com/2016/08/11/tool002/"/>
    <id>http://meijing0114.com/2016/08/11/tool002/</id>
    <published>2016-08-11T01:38:57.000Z</published>
    <updated>2016-09-18T02:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于程序员来说，开发效率是非常重要的。当程序员升级自己的机器或新入职的时候，往往要做的第一件事情就是配置开发环境。毕竟工欲善其事必先利其器。而配置开发环境，无非是指如下几个方面：</p>
<ul>
<li>系统配置</li>
<li>软件配置</li>
<li>shell配置</li>
<li>IDE配置</li>
</ul>
<h2 id="为什么要用dotfiles"><a href="#为什么要用dotfiles" class="headerlink" title="为什么要用dotfiles"></a>为什么要用dotfiles</h2><p>使用dotfiles的最主要原因还是快速搭建自己的开发环境，降低迁移开发环境的成本。一些你最熟悉的配置、工具的无缝贴合，能够让你在设备升级的时候高枕无忧。</p>
<p>另外，学习dotfiles能够让你对工具或配置的理解更深入。brew bundle、cask等软件管理的软件，让你从linux的层面理解mac上的桌面软件的安装。同时你也会学会精简不需要的工具，比如sublime在刚开始使用的时候会狂装各类不同的工具，但是会发现很多工具的使用率其实不高。梳理dotfiles能够让你在这一点上做到断舍离。</p>
<p>再次，dotfiles是近距离了解和观察大牛的配置的绝佳机会。github上面有大量开源的，经验积累下来的dotfiles: <a href="https://dotfiles.github.io/" target="_blank" rel="external">https://dotfiles.github.io/</a> 通过学习和fork这些好的dotfiles，你能够有机会不断的丰富自己现有的dotfile，并把它调优到一种最佳的状态。</p>
<p>最后，还是要再强调一下效率。dotfiles给你审视自己开发环境的机会，优化并提升效率。正所谓 工欲善其事必先利其器。对于加班繁多的程序员来说，提交效率，健康生活是非常必要的。</p>
<h2 id="常见的dotfiles有哪些组成部分"><a href="#常见的dotfiles有哪些组成部分" class="headerlink" title="常见的dotfiles有哪些组成部分"></a>常见的dotfiles有哪些组成部分</h2><p>前面已经大致列举出了dotfiles的组成部分，我把它分为 系统配置、软件配置，shell配置，ide配置和松弛配置几个部分。下面会分别进行说明。</p>
<p>保存dotfiles最常见的方式就是使用github进行托管了，上文中大部分的dotfiles也都是这么做的。</p>
<ul>
<li>首先新建github的目录</li>
<li>将你常用的配置放入相应的文件夹</li>
<li>建立软链</li>
</ul>
<p>所以每当你新装机的时候，操作顺序如下：</p>
<ul>
<li>从github上面拉取文件</li>
<li>使用统一的脚本安装install.sh<ul>
<li>脚本包括建立软链、安装软件等一系列的动作。</li>
</ul>
</li>
<li>喝杯咖啡，done</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbjw1f7wf2sxqpij21kw16o7q0.jpg" alt=""></p>
<h2 id="dotfiles的常用配置"><a href="#dotfiles的常用配置" class="headerlink" title="dotfiles的常用配置"></a>dotfiles的常用配置</h2><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>之前对mac的系统配置的了解都是在这个图标层面的。知道我发现了一个关于mac系统的配置，看了之后，惊为天人。没想到mac系统还可以让你这么玩.<a href="https://github.com/mathiasbynens/dotfiles/blob/master/.macos不过这里提醒一下，对于mac系统的专门配置，我不是特别感冒，因为跨系统鸿沟太大，同时我对这个级别的配置也并没有那么多的要求。" target="_blank" rel="external">https://github.com/mathiasbynens/dotfiles/blob/master/.macos不过这里提醒一下，对于mac系统的专门配置，我不是特别感冒，因为跨系统鸿沟太大，同时我对这个级别的配置也并没有那么多的要求。</a></p>
<p>这里列举几个觉得还算有用的配置大家参考一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># 设置计算机名称</div><div class="line">sudo scutil --set ComputerName &quot;tedmac&quot;</div><div class="line"></div><div class="line"># 设置截屏保存位置</div><div class="line">defaults write com.apple.screencapture location -string &quot;$&#123;HOME&#125;/Desktop&quot;</div><div class="line"></div><div class="line"></div><div class="line"># 设置默认的触发角</div><div class="line"># Hot corners</div><div class="line"># Possible values:</div><div class="line">#  0: no-op</div><div class="line">#  2: Mission Control</div><div class="line">#  3: Show application windows</div><div class="line">#  4: Desktop</div><div class="line">#  5: Start screen saver</div><div class="line">#  6: Disable screen saver</div><div class="line">#  7: Dashboard</div><div class="line"># 10: Put display to sleep</div><div class="line"># 11: Launchpad</div><div class="line"># 12: Notification Center</div><div class="line"># Top left screen corner → sleep</div><div class="line">defaults write com.apple.dock wvous-tl-corner -int 10</div><div class="line">defaults write com.apple.dock wvous-tl-modifier -int 0</div><div class="line"># Top right screen corner → mission control</div><div class="line">defaults write com.apple.dock wvous-tr-corner -int 2</div><div class="line">defaults write com.apple.dock wvous-tr-modifier -int 0</div><div class="line"># Bottom left screen corner → lauchpad</div><div class="line">defaults write com.apple.dock wvous-bl-corner -int 11</div><div class="line">defaults write com.apple.dock wvous-bl-modifier -int 0</div><div class="line"></div><div class="line"># Bottom right screen corner → desktop</div><div class="line">defaults write com.apple.dock wvous-br-corner -int 4</div><div class="line">defaults write com.apple.dock wvous-br-modifier -int 0</div></pre></td></tr></table></figure>
<p>其他的配置大概看了下，没有了解的欲望，所以感兴趣的话还是去看上面的这个链接吧。</p>
<h3 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h3><p>说到软件配置，mac上的homebrew肯定是绕不开，它是基于ruby的类yum/apt-get 软件管理工具，如果你还没用过，非常建议你<a href="http://brew.sh/" target="_blank" rel="external">在这里</a>试用一下。</p>
<p><img src="http://ww4.sinaimg.cn/
mw690/67ad48bbjw1f7wf79n2xzj21j40pc124.jpg" alt=""></p>
<p>homebrew主要针对的是系统或者是终端软件，而针对桌面软件，则是另一个工具cask的天下。这里简单给一个demo，详细了解的话可以到<a href="https://caskroom.github.io/" target="_blank" rel="external">官网</a>。</p>
<p>homebrew bundle提供了类似于composer或者npm一样的包管理功能，通过这个，你就能方便的管理你mac上面安装的软件了。</p>
<p>比如我在set-up一台机器的时候，就会用到下面的brew bundle的配置Brewfile，来进行常用的软件管理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"># Taps,指定相应的brew的源</div><div class="line">tap &apos;caskroom/cask&apos;</div><div class="line">tap &apos;caskroom/fonts&apos;</div><div class="line">tap &apos;caskroom/versions&apos;</div><div class="line">tap &apos;homebrew/bundle&apos;</div><div class="line">tap &apos;homebrew/dupes&apos;</div><div class="line">tap &apos;homebrew/php&apos;</div><div class="line"></div><div class="line"># Make sure apps get installed in system Applications dir</div><div class="line"># 确保所有的app都安装在Applications目录之下</div><div class="line">cask_args appdir: &apos;/Applications&apos;</div><div class="line"></div><div class="line"># Install ZSH</div><div class="line"># 安装 ZSH</div><div class="line">brew &apos;zsh&apos;</div><div class="line">brew &apos;zsh-completions&apos;</div><div class="line"></div><div class="line"># Install GNU core utilities (those that come with OS X are outdated)</div><div class="line"># 安装GNU的相关功能</div><div class="line">brew &apos;coreutils&apos;</div><div class="line"></div><div class="line"># Install GNU `find`, `locate`, `updatedb`, and `xargs`, g-prefixed</div><div class="line"># 安装GNX中的 `find` `locate` `updatedb` `xargs`</div><div class="line">brew &apos;findutils&apos;</div><div class="line"></div><div class="line"># Install Bash 4</div><div class="line"># 安装 BASH 4</div><div class="line">brew &apos;bash&apos;</div><div class="line"></div><div class="line"># Install more recent versions of some OS X tools</div><div class="line"># 安装OS X工具的最近版本</div><div class="line">brew &apos;homebrew/dupes/grep&apos;</div><div class="line"></div><div class="line"># Install Binaries</div><div class="line"># 安装一些常用的终端运行软件</div><div class="line">brew &apos;awscli&apos;</div><div class="line">brew &apos;git&apos;</div><div class="line">brew &apos;hub&apos;</div><div class="line">brew &apos;tree&apos;</div><div class="line">brew &apos;mackup&apos;</div><div class="line">brew &apos;node&apos;</div><div class="line">brew &apos;trash&apos;</div><div class="line">brew &apos;wget&apos;</div><div class="line">brew &apos;svn&apos;</div><div class="line">brew &apos;httpie&apos;</div><div class="line">brew &apos;autojump&apos;</div><div class="line">brew &apos;lua&apos;</div><div class="line">brew &apos;cmake&apos;</div><div class="line">brew &apos;openssl&apos;</div><div class="line">brew &apos;ctags&apos;</div><div class="line">brew &apos;curl&apos;</div><div class="line">brew &apos;python&apos;</div><div class="line">brew &apos;python3&apos;</div><div class="line"></div><div class="line"># 安装开发环境</div><div class="line">brew &apos;php70&apos;, args: [&apos;with-debug&apos;, &apos;without-apache&apos;]</div><div class="line">brew &apos;php56&apos;, args: [&apos;with-debug&apos;, &apos;without-apache&apos;]</div><div class="line">brew &apos;mariadb&apos;</div><div class="line"></div><div class="line"># cask安装桌面的软件</div><div class="line">cask &apos;aerial&apos;</div><div class="line">cask &apos;flux&apos;</div><div class="line">cask &apos;alfred&apos;</div><div class="line">cask &apos;atom&apos;</div><div class="line">cask &apos;dash&apos;</div><div class="line">cask &apos;evernote&apos;</div><div class="line">cask &apos;fluid&apos;</div><div class="line">cask &apos;goofy&apos;</div><div class="line">cask &apos;google-chrome&apos;</div><div class="line">cask &apos;google-drive&apos;</div><div class="line">cask &apos;iterm2&apos;</div><div class="line">cask &apos;mysqlworkbench&apos;</div><div class="line">cask &apos;rescuetime&apos;</div><div class="line">cask &apos;screenhero&apos;</div><div class="line">cask &apos;sequel-pro&apos;</div><div class="line">cask &apos;slack&apos;</div><div class="line">cask &apos;sublime-text3&apos;</div><div class="line">cask &apos;textual&apos;</div><div class="line">cask &apos;tower&apos;</div><div class="line">cask &apos;transmit&apos;</div><div class="line">cask &apos;vagrant&apos;</div><div class="line">cask &apos;virtualbox&apos;</div><div class="line">cask &apos;virtualbox-extension-pack&apos;</div><div class="line">cask &apos;vlc&apos;</div><div class="line">cask &apos;istat-menus&apos;</div><div class="line"></div><div class="line"># Quicklook</div><div class="line">cask &apos;qlcolorcode&apos;</div><div class="line">cask &apos;qlmarkdown&apos;</div><div class="line">cask &apos;quicklook-json&apos;</div><div class="line">cask &apos;quicklook-csv&apos;</div><div class="line">cask &apos;qlstephen&apos;</div><div class="line"></div><div class="line"># 常用字体</div><div class="line">cask &apos;font-sauce-code-powerline&apos;</div><div class="line">cask &apos;font-source-code-pro&apos;</div><div class="line">cask &apos;font-source-sans-pro&apos;</div><div class="line">cask &apos;font-source-serif-pro&apos;</div></pre></td></tr></table></figure>
<p>如果有你需要的软件，只需要向里面添加，然后维护就可以了。在新的机器上，只需要<code>brew bundle</code>一下，就可以快速地完成所有软件的安装了。</p>
<h4 id="Introduce-mackup"><a href="#Introduce-mackup" class="headerlink" title="Introduce mackup"></a>Introduce mackup</h4><p>在完成了软件的安装，之后需要完成的就是对于软件的配置的管理了。对我来说，最需要管理的就是ide的配置了，使用的ide就是sublime3. 在这种应用场景之下，就需要针对Mackup进行配置的管理了。</p>
<p>Mackup主要做的就是把你在~/Library中的配置进行拷贝到同步的目录，然后通过建立软链的方式在机器之间共享。每次安装新机器的时候，只需要只需要拷贝你同步的目录，然后执行<code>mackup restore</code>.</p>
<h3 id="shell配置"><a href="#shell配置" class="headerlink" title="shell配置"></a>shell配置</h3><p>我选用的shell是在mac厦门大名鼎鼎的zsh，它有着十分强大的特性。诸如自动填充、共享命令历史、带主题的命令行等等。</p>
<p>但是一开始zsh并不是特别的用户友好，所以后来出现了神器oh-my-zsh，mactalk的池老师也曾经推荐过。github地址如下：</p>
<p>oh-my-zsh把zsh进行了一些层面的抽象，使得使用起来更加方便一点。包括可以选取不同的命令行主题，可以配置各种不同的zsh插件，以及常用的alias和export。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># 选取一个主题</div><div class="line">ZSH_THEME=&quot;agnoster&quot;</div><div class="line"></div><div class="line"># 配置powerline，这又是一个神奇的东西</div><div class="line">. /Users/liangchen/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh</div><div class="line"></div><div class="line"># 配置神奇的插件</div><div class="line"># autojump 从此找文件夹不用cd 直接一个j命令搞定，超强联想</div><div class="line">[[ -s `brew --prefix`/etc/autojump.sh ]] &amp;&amp; . `brew --prefix`/etc/autojump.sh</div><div class="line"># 其他有用的插件</div><div class="line">plugins=(git textmate ruby autojump osx mvn gradle zsh-syntax-highlighting)</div><div class="line"></div><div class="line"># 个人专有配置</div><div class="line">alias cls=&apos;clear&apos;</div><div class="line">alias ll=&apos;ls -l&apos;</div><div class="line">alias la=&apos;ls -a&apos;</div><div class="line">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</div><div class="line">alias grep=&quot;grep --color=auto&quot;</div><div class="line">alias dotfiles=&quot;~/dev/github/dotfiles&quot;</div><div class="line"></div><div class="line"># 指定php文件都以sublime的方式打开，非常方便，可以支持多种不同的文件后缀和打开的方式。</div><div class="line">alias -s c=vim</div><div class="line">alias -s gz=&apos;tar -xzvf&apos;</div><div class="line">alias -s tgz=&apos;tar -xzvf&apos;</div><div class="line">alias -s zip=&apos;unzip&apos;</div><div class="line">alias -s bz2=&apos;tar -xjvf&apos;</div><div class="line">alias  -s php=&apos;subl&apos;</div></pre></td></tr></table></figure>
<h3 id="IDE配置"><a href="#IDE配置" class="headerlink" title="IDE配置"></a>IDE配置</h3><p>现在主要在用的ide是sublime，有优点也有不少缺点。优点在于：</p>
<ul>
<li>编辑的效率更高，比如支持vim模式。</li>
<li>开放的插件体系，很多人贡献了很多不错的开源插件，如果你不满意，也可以自己修改</li>
<li>很好的代码模板功能</li>
</ul>
<p>缺点同样也很明显，但是最致命的就是对php的语法检查， 没有一个很好的插件能够做到。最基本的尽管有，但是对$符的检查和支持就没有phpstorm那么到位了。这块之后想办法再去优化一下插件吧。</p>
<p>针对sublime的php开发配置，可以另开一篇文章了，这里只是先列举一下我常用的sublime的插件：</p>
<ul>
<li>php开发专用：<ul>
<li>codeintel：进行php专用的代码提示，可以配置不同的php执行的版本，这里选择的是php5.5；但是一直被人诟病不稳定性；</li>
<li>sublimelinter：php基本语法依赖检查</li>
<li>sublimePHPCS: 代码探测和PSR2校验</li>
<li>php companion: 类的自动导入，包括对命名空间的识别和导入</li>
<li>Bracket hightling: 语法高亮</li>
<li>Codebug：类似PHPstrom 对xdebug的集成</li>
<li>php completion: 代码自动补全</li>
<li>php NinJa Manuel：热心人折腾的php中文文档，挺实用的</li>
</ul>
</li>
<li>实用工具：<ul>
<li>svn</li>
<li>git</li>
<li>vcs gutter: 版本控制自动识别与提示</li>
<li>markdown preview</li>
<li>CodeFormatter：代码美化</li>
<li>prettyjson: json美化</li>
<li>snippet：代码块自定义与自动生成</li>
<li>evernote插件</li>
</ul>
</li>
<li>心情愉悦：<ul>
<li>boxy theme： 2016 sublime最佳主题之一</li>
</ul>
</li>
</ul>
<p>看了这么多的配置，不知你是否也有兴趣尝试一下？快快行动起来，提高你的工作效率吧！</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f6p22b5u1hj20hj09n756.jpg" alt=""></p>
<h2 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h2><p><a href="https://driesvints.com/blog/getting-started-with-dotfiles/" target="_blank" rel="external">https://driesvints.com/blog/getting-started-with-dotfiles/</a><br><a href="https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/" target="_blank" rel="external">https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/</a><br><a href="http://www.anishathalye.com/2014/08/03/managing-your-dotfiles/" target="_blank" rel="external">http://www.anishathalye.com/2014/08/03/managing-your-dotfiles/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于程序员来说，开发效率是非常重要的。当程序员升级自己的机器或新入职的时候，往往要做的第一件事情就是配置开发环境。毕竟工欲善其事必先利其器。而配置开发环境，无非是指如下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统配置&lt;/li&gt;
&lt;li&gt;软件配置&lt;/li&gt;
&lt;li&gt;shell配
    
    </summary>
    
      <category term="程序员效率" scheme="http://meijing0114.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%88%E7%8E%87/"/>
    
    
      <category term="程序员效率" scheme="http://meijing0114.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>漫谈php框架之中间件</title>
    <link href="http://meijing0114.com/2016/08/08/php001/"/>
    <id>http://meijing0114.com/2016/08/08/php001/</id>
    <published>2016-08-08T15:17:54.000Z</published>
    <updated>2016-08-11T01:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/mw690/67ad48bbgw1f6p22evywlj20zk0np42f.jpg" alt="题图" title="题图"></p>
<p>市面上常见的php框架有很多，最近因为有技术需求，所以对常见的php框架的中间件进行了一些了解。各个框架尽管在目标上对php框架的定义大同小异，但是在实现方式上却各有不同，且看下文：</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>首先什么是php的中间件？</p>
<p>根据zend-framework中的定义：</p>
<blockquote>
<p>所谓中间件是指提供在请求和响应之间的，能够截获请求，并在其基础上进行逻辑处理，与此同时能够完成请求的响应或传递到下一个中间件的代码。</p>
</blockquote>
<p>这一介绍十分的简洁，但却略显抽象，接下来我们通过例子来一个个看。</p>
<h2 id="处在原始时代的CI"><a href="#处在原始时代的CI" class="headerlink" title="处在原始时代的CI"></a>处在原始时代的CI</h2><p>首先来看CI框架，php star数 12830.<br>作为一款非常简洁的框架，CI被吐槽的不少，但是也有很多人喜欢。首先来看它官方给出的一张请求时序图：</p>
<p><img src="http://7rfkw4.com1.z0.glb.clouddn.com/appflowchart.png" alt="CI框架请求时序" title="CI框架请求时序"></p>
<p>根据上文中对中间件的定义，那么对于CI框架来说，唯一称得上是内置中间件的：Security模块</p>
<p>Security模块是在请求进入controller之前实现的逻辑：</p>
<ul>
<li>请求在完成路由之后，进入controller之前；</li>
<li>CI框架支持通过配置的方式，决定是否启用包括“URI安全、XSS过滤、CSRF保护”在内的功能模块；</li>
<li>一旦框架初始化时探测到模块启用，那么优先进行模块逻辑；</li>
<li>触发安全模块，请求即告终止。</li>
</ul>
<p>乍看起来，CI框架的中间件十分的局限，但是其实它却提供了无限的可能性。。因为CI中还提供了一个叫做Hooks的功能。即钩子。</p>
<p>下面来看两个个hooks的例子：</p>
<p>定义一个在controller逻辑之前的钩子，并指定钩子的参数、类名或函数名信息：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$hook[<span class="string">'pre_controller'</span>] = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'class'</span>    =&gt; <span class="string">'MyClass'</span>,</div><div class="line">    <span class="string">'function'</span> =&gt; <span class="string">'Myfunction'</span>,</div><div class="line">    <span class="string">'filename'</span> =&gt; <span class="string">'Myclass.php'</span>,</div><div class="line">    <span class="string">'filepath'</span> =&gt; <span class="string">'hooks'</span>,</div><div class="line">    <span class="string">'params'</span>   =&gt; <span class="keyword">array</span>(<span class="string">'beer'</span>, <span class="string">'wine'</span>, <span class="string">'snacks'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>定义一个在controller逻辑之后的钩子，并直接给出其实现：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$hook[<span class="string">'post_controller'</span>] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/* do something here */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>为什么说CI没提供什么像样的中间件但是又很灵活呢，就是因为它可以在如下的多个阶段进行挂钩子的操作。细数过来有7种之多。</p>
<p>从后文中可以看出，很多其他的框架可能也就会涵盖两三种阶段，因此，从这个角度上来说，CI的钩子组合而成的中间件的确很灵活。</p>
<ul>
<li><strong>pre_system</strong>阶段： 在系统执行的早期调用，这个时候只有 基准测试类 和 钩子类 被加载了， 还没有执行到路由或其他的流程；</li>
<li><strong>pre_controller</strong>阶段： 在你的控制器调用之前执行，所有的基础类都已加载，路由和安全检查也已经完成；</li>
<li><strong>post_controller_constructor</strong>阶段： 在你的控制器实例化之后立即执行，控制器的任何方法都还尚未调用；</li>
<li><strong>post_controller</strong>阶段： 在你的控制器完全运行结束时执行；</li>
<li><strong>display_override</strong>阶段： 覆盖 _display() 方法，该方法用于在系统执行结束时向浏览器发送最终的页面结果； 这可以让你有自己的显示页面的方法。注意你可能需要使用 <code>$this-&gt;CI =&amp; get_instance()</code>方法来获取 CI 超级对象，以及使用 <code>$this-&gt;CI-&gt;output-&gt;get_output()</code>方法来 获取最终的显示数据；</li>
<li><strong>cache_override</strong>阶段： 使用你自己的方法来替代 输出类 中的 _display_cache() 方法，这让你有自己的缓存显示机制。</li>
<li><strong>post_system</strong> 在最终的页面发送到浏览器之后、在系统的最后期被调用。</li>
</ul>
<p>总结来看，CI中的中间件：</p>
<ul>
<li>有很大的自由度</li>
<li>同时支持在多个阶段对请求进行嵌入（对比下来是最全面的）</li>
<li>钩子函数的使用成本高；</li>
<li>支持各种diy：<ul>
<li>请求来时http校验、权限校验、额外的安全策略</li>
<li>请求去时上报数据</li>
</ul>
</li>
</ul>
<h2 id="大红大紫的Laravel"><a href="#大红大紫的Laravel" class="headerlink" title="大红大紫的Laravel"></a>大红大紫的Laravel</h2><p>github star 24997<br>作为最近两年大红大紫的Laravel，的确也是有必要对其中间件机制进行了解：</p>
<p>首先Laravel提供了一个很好的中间件自动生成工具：<br><code>php artisan make:middleware OldMiddleware</code><br>由Laravel的命令行完成，这种看似简单的命令行工具其实可以对框架的扩展起到非常重要的作用。</p>
<p>再来看一个Laravel中典型的请求过滤器：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldMiddleware</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 运行请求过滤器。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</div><div class="line">     * <span class="doctag">@param</span>  \Closure  $next</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($request-&gt;input(<span class="string">'age'</span>) &lt;= <span class="number">200</span>) &#123;</div><div class="line">            <span class="keyword">return</span> redirect(<span class="string">'home'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $next($request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过滤器，filter，是中间件中使用最广泛的一种，很多框架里甚至filter就等同于中间件。意如其名，即是对请求Request进行某种过滤，这个过滤可以是参数上的限制、安全策略的限制、http协议的限制，只要是请求中带来的属性，都可以据此进行过滤。</p>
<p>同时这里也可以看到，Laravel使用闭包的方式进行请求的传递，真正践行的优雅的中间件串联的方式，只需要调用next函数，请求即可被按照预先定义的规则传递到下一个中间件中。</p>
<p>Laravel支持全局的中间件和根据具体路由规定的中间件两种，同时优先级又以定义顺序为准。做到全局与具体情况的兼顾。同时它显示的支持前置、后置和Terminable三种中间件，覆盖了大部分的中间件场景，是一种相对不错的设计。</p>
<p>但美中不足或者说场景覆盖不够友好的地方在于它以路由的方式组织中间件，会与controller有些脱节，每次定义controller中action行为的时候，还需要转换为路由进行配置，略有些不方便。</p>
<p>总结来看</p>
<ul>
<li>Laravel践行了让controller更纯粹的思想，中间件交给路由，controller只做它该做的事；</li>
<li>中间件与路由组灵活结合，能够满足应用场景；</li>
<li>前置、后置与Terminable支持了现有大部分的中间件需求；</li>
<li>自动生成十分方便扩展中间件，开发友好；</li>
<li>但对一个controller内多个action需要统一加入或统一不加入中间件的场景，支持不友好。</li>
</ul>
<h2 id="老生常谈yii-2-0"><a href="#老生常谈yii-2-0" class="headerlink" title="老生常谈yii 2.0"></a>老生常谈yii 2.0</h2><p>github star 4668</p>
<p>yii框架首先是中国人开发的，star数虽然不是很多，但是功能也算丰富。<br>yii框架从1.1到2.0，经过了一个比较大的升级，支持了很多新的特性，如果不支持，只怕是要落伍了。</p>
<p>在yii框架1.1中，中间件干脆就叫filters了，十分的直白，分为pre-filter和post-fiter两种，即前文中说的，在进入controller之前的过滤逻辑，和完成controller处理之后的过滤逻辑。</p>
<p>但是到了yii2.0之后，filters经过了一层升级，到了behaviors，明确了一点：重心放在了每一个controller的行为上，而不是像Laravel一样controller很傻很单纯。</p>
<p>yii框架的behaviors可以在controller或application中配置。</p>
<p>这里是一个访问控制的filter，具体进行什么样的访问控制由className定义，同时对controller中的action支持“only”关键字，还有“”关键字，能够支持排除法的功能，这个在一些场景下还是很有用的。同时“roles”也能够支持你预先定义好的角色的概念，比如学生无法访问教师后台，而教师无法访问学生论坛等。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">filters</span>\<span class="title">AccessControl</span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">behaviors</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        <span class="string">'access'</span> =&gt; [</div><div class="line">            <span class="string">'class'</span> =&gt; AccessControl::className(),</div><div class="line">            <span class="string">'only'</span> =&gt; [<span class="string">'create'</span>, <span class="string">'update'</span>],</div><div class="line">            <span class="string">'rules'</span> =&gt; [</div><div class="line">                <span class="comment">// allow authenticated users</span></div><div class="line">                [</div><div class="line">                    <span class="string">'allow'</span> =&gt; <span class="keyword">true</span>,</div><div class="line">                    <span class="string">'roles'</span> =&gt; [<span class="string">'@'</span>],</div><div class="line">                ],</div><div class="line">                <span class="comment">// everything else is denied by default</span></div><div class="line">            ],</div><div class="line">        ],</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，在Yii中你也可以自定义filter：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">components</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">ActionFilter</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionTimeFilter</span> <span class="keyword">extends</span> <span class="title">ActionFilter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_startTime;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($action)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_startTime = microtime(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::beforeAction($action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterAction</span><span class="params">($action, $result)</span></span></div><div class="line">    &#123;</div><div class="line">        $time = microtime(<span class="keyword">true</span>) - <span class="keyword">$this</span>-&gt;_startTime;</div><div class="line">        Yii::trace(<span class="string">"Action '&#123;$action-&gt;uniqueId&#125;' spent $time second."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::afterAction($action, $result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里明显可以看出，这个filter针对action，分别在“beforeAction”和“afterAction”两个阶段进行了逻辑处理，完成了请求的计时工作。</p>
<p>所以总的来看，Yii框架中的中间件：</p>
<ul>
<li>支持前置和后置两个阶段的自定义；</li>
<li>提供了基本的访问控制中间件；</li>
<li>配置侵入到controller中，完成对controller行为的深度控制；</li>
<li>无法自动生成中间件，自定义成本略高。</li>
</ul>
<h2 id="大家伙-ZendFramework"><a href="#大家伙-ZendFramework" class="headerlink" title="大家伙 ZendFramework"></a>大家伙 ZendFramework</h2><p>ZendFramework是由zend公司推出的php框架，其目标就是建立一套大而全的php框架。以满足企业应用开发的目标。<br>ZendFramework由很多不同的模块构成，使用者可以通过相互组合的方式来实现自己想要的功能，同时也能够不一次加载大而全的框架，十分的灵活。<br>比如有负责授权的”zend-authentication”,或者是负责验证码的”zend-captcha”等等。</p>
<p>其中”zend-stratigility” 负责提供中间件以及中间件执行流的功能。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Zend</span>\<span class="title">Stratigility</span>\<span class="title">MiddlewarePipe</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Zend</span>\<span class="title">Diactoros</span>\<span class="title">Server</span>;</div><div class="line"></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</div><div class="line"></div><div class="line">$app    = <span class="keyword">new</span> MiddlewarePipe();</div><div class="line">$server = Server::createServer($app, $_SERVER, $_GET, $_POST, $_COOKIE, $_FILES);</div><div class="line"></div><div class="line"><span class="comment">// Landing page</span></div><div class="line">$app-&gt;pipe(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($req, $res, $next)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (! in_array($req-&gt;getUri()-&gt;getPath(), [<span class="string">'/'</span>, <span class="string">''</span>], <span class="keyword">true</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> $next($req, $res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $res-&gt;end(<span class="string">'Hello world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Another page</span></div><div class="line">$app-&gt;pipe(<span class="string">'/foo'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($req, $res, $next)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> $res-&gt;end(<span class="string">'FOO!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$server-&gt;listen();</div></pre></td></tr></table></figure>
<p>这里的代码给出了两个中间件的例子。第一个是落地页，监听了root路径，如果命中了这一路由规则，那么请求会被提前结束，返回给用户“Hello world！”。<br>而第二个中间件去匹配foo这一路径，模糊匹配的方式，如果命中了，会返回FOO并结束请求。</p>
<p>与Laravel类似，这里同样支持使用next（可调用的变量）的方式将请求继续向下传递。而这里中间件配置的方式也跟Laravel比较像，是统一在一个地方根据路由进行配置的，这样完全可以按照如下的方式根据不同的路由定义不同的中间件处理逻辑：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$app-&gt;pipe(<span class="string">'/api'</span>, $apiMiddleware);</div><div class="line">$app-&gt;pipe(<span class="string">'/docs'</span>, $apiDocMiddleware);</div><div class="line">$app-&gt;pipe(<span class="string">'/files'</span>, $filesMiddleware);</div></pre></td></tr></table></figure>
<p>总结来看，ZendFramework的中间件：</p>
<ul>
<li>主要侧重在请求前置阶段，淡化了请求后置或其他阶段</li>
<li>通过路由的方式统一配置中间件，支持串行</li>
<li>并未预先定义中间件</li>
</ul>
<h2 id="我心目中的中间件设计"><a href="#我心目中的中间件设计" class="headerlink" title="我心目中的中间件设计"></a>我心目中的中间件设计</h2><p>首先按照不同的类别列举一下常见的中间件：</p>
<ul>
<li>前置中间件：<ul>
<li>cookie验证：验证用户的cookie</li>
<li>用户角色验证：定义不同的用户角色并验证</li>
<li>用户权限验证：配置不同的用户权限，并验证</li>
<li>安全相关，如CSRF校验：CSRF校验中间件</li>
<li>http方法过滤：过滤特定的GET POST请求</li>
<li>http或者page cache：对指定路径的页面进行缓存</li>
<li>跨域中间件：不用在nginx配置，而是通过框架的方式，针对某些域名或某些请求，提供跨域的服务。</li>
</ul>
</li>
<li>后置中间件：<ul>
<li>共同数据输出：针对统一业务的公共数据，在后置中统一输出</li>
</ul>
</li>
<li>请求返回浏览器之后的中间件：<ul>
<li>打印日志</li>
<li>更新session（Laravel）</li>
</ul>
</li>
</ul>
<p>所以一个php框架最好能够：</p>
<ul>
<li>定义核心可用中间件；</li>
<li>提供在不同阶段扩展中间件的能力，不能太多，支持前置和后置即可覆盖大部分场景；</li>
<li>统一配置中间件，方便管理所有的中间件，让controller单纯一些；</li>
<li>提供中间件自动生成与方便扩展功能。</li>
</ul>
<p>以上</p>
<p><img src="http://ww3.sinaimg.cn/mw690/67ad48bbgw1f6p22b5u1hj20hj09n756.jpg" alt="小白学web" title="小白学web"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/67ad48bbgw1f6p22evywlj20zk0np42f.jpg&quot; alt=&quot;题图&quot; title=&quot;题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;市面上常见的php框架有很多，最近因为有技术需求，所以对常见的ph
    
    </summary>
    
      <category term="php" scheme="http://meijing0114.com/categories/php/"/>
    
    
      <category term="中间件,框架" scheme="http://meijing0114.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>读评《web全栈工程师的自我修养》</title>
    <link href="http://meijing0114.com/2016/06/06/book010/"/>
    <id>http://meijing0114.com/2016/06/06/book010/</id>
    <published>2016-06-06T15:06:43.000Z</published>
    <updated>2016-08-08T00:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本书年初的时候在班车上面翻了一遍。刚开始的时候对其中很多观点不以为然，认为太浅。不过后来再翻一次的时候，不少东西还是很有启发意义，因此加以推介，涉及到作者观点、大纲，有兴趣的同学可以自行阅读，加以判断。非常适合对全栈感兴趣，但对某一细分技术还不甚了解的同学。</p>
<h2 id="什么是全栈工程师"><a href="#什么是全栈工程师" class="headerlink" title="什么是全栈工程师"></a>什么是全栈工程师</h2><p>现在，技术其实变得越来越简单。云服务就在提供水和电。<br>所以你需要充分的去了解PAAS服务的平台，amazon的服务，github的服务，让技术不再成为门槛，让事情聚焦在提供专业的价值上面。这也就是世界级的IT支持了，你再也不用担心“只差一个程序员”了。</p>
<p>LAMP的技术栈<br>MEAN的技术栈</p>
<p>作者提出全栈工程师或者说工程师的前景：</p>
<ul>
<li>一专多长</li>
<li>解决问题而不是醉心技术</li>
</ul>
<p>其实全栈工程师，跟我在taobao十年里面看到的工程师可能是不相符合的。很多淘宝的大型系统，需要非常专业的工程师进行很多的优化才可以实现。</p>
<h2 id="如何成为全栈工程师"><a href="#如何成为全栈工程师" class="headerlink" title="如何成为全栈工程师"></a>如何成为全栈工程师</h2><p>我们都是普通人，“一万小时定律”是绕不过去的。所以要成为有竞争力的专业人员，必须要投入大量的时间。</p>
<p>对于招聘来说，要的不仅仅是满足要求，很多时候非常希望候选人能够超出预期。你必须要有一些额外的亮点，也就是竞争力才行。</p>
<p>对于成为全栈工程师这件事情，作者提供了一些建议：</p>
<ul>
<li>围绕商业目标：转型是每时每刻都存在的，每个人，不仅仅是公司，都应该围绕商业目标。商业目标是稳定的，比技术更为稳定。<ul>
<li>对于直接制作产品，给用户使用的团队，就需要对外关注如何提高产品质量、降低产品成本；对内应该关注如何优化流程、减少错误率、如果团队输出的结果是公司内其他部门需要的原材料，就要关注下游的需求，研究如何更好地输出结果，如何在流程上使得输出产品的过程更加顺畅。</li>
<li>关注用户体验<ul>
<li>不爽的地方不要习惯，而是要去改变。<ul>
<li>专注目标，以目标的维度去思考，不要让别人费事的去猜。</li>
<li>做自己会用的产品</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="从学生到工程师"><a href="#从学生到工程师" class="headerlink" title="从学生到工程师"></a>从学生到工程师</h2><p>本章主要论述了从学生进行校园招聘到入职实习后作者的一些感悟，对于未毕业的学生还是可以一看的。已经工作的同学，就略过吧~~</p>
<h2 id="野生程序员的故事"><a href="#野生程序员的故事" class="headerlink" title="野生程序员的故事"></a>野生程序员的故事</h2><blockquote>
<p>这一章是这本书争议比较大的地方，甚至在csdn上面也引起了广泛的讨论。主要的争议点在于作者的“野生程序员”观点，引起了小公司技术者的反弹。</p>
</blockquote>
<p>除了对野生程序员的讨论，本章中另一有益的讨论是针对大公司和创业公司。<br>大公司可以给你的：</p>
<ul>
<li>较小的风险</li>
<li>技术最佳实践</li>
<li>垂直专精的技能</li>
<li>服务海量用户的经验</li>
<li>软技能</li>
<li>人脉</li>
<li>心态</li>
</ul>
<p>由此而见，作者本人是比较喜欢大公司的。不过根据《黑客与画家》中的观点，大公司会让你的公司没有可放大性与可衡量性。究竟如何选择，就是仁者见仁，智者见智了。</p>
<h2 id="工程师事业指南"><a href="#工程师事业指南" class="headerlink" title="工程师事业指南"></a>工程师事业指南</h2><p>对技术人员而言，职业生涯的发展非常重要。《您就是极客》中提出了对软件工程师而言最重要的三点：技术、成长和声望。</p>
<p>为啥架构师那么火？就是因为他看起来对所有的问题都知道答案。如果你是团队中这样的角色，那么可以说你非常重要。所以首先对你来说就是成为那个什么都懂得家伙。</p>
<p>其次对你来说重要的是积累你的作品集。作品集其实是想别人（老板、潜在老板、志同道合者）的展示窗口。github显然是程序员最重要的作品集之一。而对于高逼格的设计师来说，dribble则是更好的选择。同时github提供的静态页面托管服务对于不想费力租赁机器搭建网站的人来说，也是一个很好的选择。</p>
<h2 id="全栈工程师眼中的HTTP"><a href="#全栈工程师眼中的HTTP" class="headerlink" title="全栈工程师眼中的HTTP"></a>全栈工程师眼中的HTTP</h2><p>http协议是web开发绕不开的关键点，但是前后台对其理解都有不同。<br>Http版本，现存最多的还是http1.1，而大部分的浏览器和服务器server都已经支持http/2了。<br>从前端的角度来看，有很多http的优化方式:</p>
<ul>
<li>减少请求</li>
<li>合并同域请求</li>
<li>减少同域内请求以规避达到同域并发上线</li>
<li>传输内容缩减</li>
<li>雪碧图</li>
<li>代码、html gzip压缩</li>
<li>静态资源单独部署</li>
<li>各类缓存（cdn、浏览器缓存）</li>
</ul>
<p>而从后台来看则是另外的一种场景：</p>
<ul>
<li>关注服务器最大连接数</li>
<li>关注服务器网络模型</li>
<li>必须防范DDos攻击</li>
</ul>
<p>BigPipe：提供针对一次http请求，服务器返回多次的结果，从而规避过多的建立连接过程。事实上大数据时候，http server本来就会分块传输。</p>
<h2 id="高性能网站的关键：缓存"><a href="#高性能网站的关键：缓存" class="headerlink" title="高性能网站的关键：缓存"></a>高性能网站的关键：缓存</h2><p> 本章主要是从基本概念的维度介绍了一下缓存，从服务器缓存到浏览器缓存两大门类。<br>服务器缓存则分为：</p>
<ul>
<li>数据库缓存（读多写少的场景）</li>
<li>memcache：闻名的web缓存，支持分布式，但不支持无痛扩展。</li>
<li>文件缓存</li>
<li>静态化：叫缓存可能不准确了，更多是加速。</li>
</ul>
<p>浏览器缓存：</p>
<ul>
<li>expires：设置过期时间，无须交互</li>
<li>last-modified：需要和服务器简单交互一次，304</li>
<li>cache-control：新的倒计时式的缓存</li>
</ul>
<p>作者推荐的浏览器缓存最佳实践：</p>
<ul>
<li>对于动态生成的HTML页面使用Https头：Cache-control：no-cache</li>
<li>对于静态HTML页面使用HTTPS头：Last-modified</li>
<li>其他文件类型设置Expires头，并在文件内容修改时，更改Query String(现在的前端构建都是通过修改文件名的方式了。)。</li>
</ul>
<h2 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h2><p>作者在本章提出了大前端的概念，这也是最近在前端业界被提的比较多的一点。<br>比较有参考价值的是作者提出的前端知识体系：<br>初级工程师：</p>
<ul>
<li>对浏览器兼容性的了解</li>
<li>对HTML/CSS/JavaScript语法和原理的理解</li>
<li>对编辑器和插件的熟悉程度</li>
<li>对调试工具的了解程度</li>
<li>对版本管理软件的熟悉和应用经验</li>
<li>对前端库/框架的使用</li>
<li>标准/规范</li>
</ul>
<p>中级工程师：</p>
<ul>
<li>对代码质量、代码规范的理解</li>
<li>对Javascript单元测试的熟悉</li>
<li>对性能优化的应用和理解</li>
<li>对SEO的应用和理解</li>
<li>代码部署</li>
<li>移动web</li>
</ul>
<p>高级工程师：</p>
<ul>
<li>代码架构</li>
<li>安全</li>
<li>对自动化测试的理解</li>
</ul>
<p>一家之言，不过大家需要的可以自行对照参考。</p>
<h2 id="向移动端转型"><a href="#向移动端转型" class="headerlink" title="向移动端转型"></a>向移动端转型</h2><p>移动端转型是大势所趋，因为大家在手机上花费的浏览时间越来越长了。<br>移动端可以参与的主要有：</p>
<ul>
<li>IOS原生App</li>
<li>Android原生App</li>
<li>Windows Phone原生App</li>
<li>Web App</li>
<li>混合模式App（最近热的发烫的reactor）</li>
</ul>
<p>本章在讨论移动端的同时也强调了一个观点：</p>
<blockquote>
<p>让市场认可你的能力，而不是让老板认可，因为老板会变，老板的标准不一致，而市场是一致的。</p>
</blockquote>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>对于服务端和前端开发而言，由于没有客户端和移动app端的集成开发环境，比较难打通包括版本控制、包管理、依赖关系、持续集成在内的流程。</p>
<p>版本控制软件中，SVN与GIT难解难分。本质上是集中管理å分布式代码管理之争。这里不展开，但是提供一些版本控制的最佳实践：</p>
<ul>
<li>鼓励频繁的提交</li>
<li>确定分支流程：feature分支和bug修复分支是必须的</li>
<li>定义主干原则：主干必须可以随时上线</li>
<li>不要把逻辑修改和代码格式化混在一起</li>
<li>不想干的代码分开提交</li>
<li>保持工作代码库干净：适当的ignore</li>
</ul>
<p>包管理中，node的npm做的非常出色。经历过java的maven那一套的都能理解npm做的有多好，多简单。同时作者还推介了bower作为新的包管理工具，这适用于有很多前端版本js库的情况。</p>
<p>最后本章讨论了构建工具：</p>
<ul>
<li>首先必须有良好架构</li>
<li>具备合适的分离粒度，区分全局、局部组件</li>
<li>最小知识原则：组件和对象不应暴露细节</li>
<li>DRY：特殊功能不应存在多个副本</li>
<li>最小化预先设计：选择器这类组件，必须留下自定义空间，不限死排列</li>
<li>一致且可执行的命名规则</li>
<li>完成了良好架构，接下来就是grunt、gulp等javascript构建工具的登场</li>
</ul>
<h2 id="理解编程语言"><a href="#理解编程语言" class="headerlink" title="理解编程语言"></a>理解编程语言</h2><p>本章更多是以一种白话的方式老生常谈了程序界经常讨论的问题：是语言重要还是对算法和系统的理解更重要。<br>当然最终作者没有也无法给出答案，这个只能读者自己来思考了。</p>
<h2 id="全栈游乐场"><a href="#全栈游乐场" class="headerlink" title="全栈游乐场"></a>全栈游乐场</h2><p>全栈工程师的游乐场是VPS，随着阿里云、腾讯云、AWS的大力推广，现在获取VPS的成本也越来越低了。<br>获取自己的VPS并搭建自己网站最大的好处就在于它可以给你一览网站的全貌，而不再是局限在自己的技术栈中。<br>作者在本章也给出了使用VPS的一般入门，有兴趣的同学可以关注下。</p>
<h2 id="软件设计方法"><a href="#软件设计方法" class="headerlink" title="软件设计方法"></a>软件设计方法</h2><p>本章作者主要介绍了常见的设计模式，比较有料的是介绍了Web开发中的MVC这种架构模式。同时也列举了一些不同语言中常见的MVC框架：</p>
<ul>
<li>Javascript mvc framework：AngularJS、backbone.js</li>
<li>Php：CakePHP、Yii、Codeigniter</li>
<li>Objective-C: Cocoa</li>
<li>Ruby mvc framework：Ruby on Rails</li>
<li>Nodejs：Sail.js Total.js Express</li>
</ul>
<h2 id="高效工程师"><a href="#高效工程师" class="headerlink" title="高效工程师"></a>高效工程师</h2><p>效率在现在快节奏的职场中越来越重要。对于工程师来说，必须做到：</p>
<ul>
<li>不断学习</li>
<li>阅读英文资料</li>
<li>加入技术社区</li>
<li>善用搜索引擎</li>
<li>时间管理</li>
<li>时间管理四象限：要忙，但是不要瞎忙</li>
<li>消除重复的工作：善用脚本，善用工具</li>
<li>给自己留出专注的时间</li>
<li>番茄工作法</li>
<li>跨界思考</li>
<li>智商头脑风暴</li>
</ul>
<h2 id="学习设计"><a href="#学习设计" class="headerlink" title="学习设计"></a>学习设计</h2><p>对工程师来说，了解设计，对设计有感觉非常的重要。<br>作者这里推荐了一本《写给大家看的设计书》，着重强调了设计的四大基本理论：</p>
<ul>
<li>亲密性</li>
<li>对齐</li>
<li>重复</li>
<li>对比</li>
</ul>
<p>对这些理论的理解能够让我们在coding的同时，也能停下来看看自己的产品究竟做的如何。</p>
<h2 id="全栈思维"><a href="#全栈思维" class="headerlink" title="全栈思维"></a>全栈思维</h2><blockquote>
<p>一个人的价值，体现在他能够承担的责任。</p>
</blockquote>
<p>市场越成熟，这句话应该就越对。<br>同时作者强调了沟通能力在全栈能力中的重要作用：</p>
<ul>
<li>针对目标听众</li>
<li>诉诸对方的利益</li>
<li>找到方法</li>
<li>金字塔原则：任何事情都可以归纳出一个中心论点。</li>
<li>向上表达自己的想法:</li>
<li>立场足够简单，围绕这一立场沟通</li>
</ul>
<h2 id="书单汇总"><a href="#书单汇总" class="headerlink" title="书单汇总"></a>书单汇总</h2><p>《专业主义》<br>《重来》<br>《精益创业》<br>《写给大家看的设计书》<br>《打造facebook》<br>《您就是极客》<br>《代码整洁之道》<br>《精益创业》<br>《黑客与画家》<br>《卓有成效的管理者》<br>《编程的本质》<br>《图解HTTP》<br>《高性能网站建设进阶指南》<br>《从0到1：开启商业与未来的秘密》<br>《代码的未来》<br>《禅与摩托车维修艺术》<br>《只是为了好玩：Linux之父林纳斯自传》<br>《卓有成效的程序员》<br>《软件随想录》<br>《金字塔原理》<br>《卓有成效的管理者》<br>《安静：内向性格的竞争力》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书年初的时候在班车上面翻了一遍。刚开始的时候对其中很多观点不以为然，认为太浅。不过后来再翻一次的时候，不少东西还是很有启发意义，因此加以推介，涉及到作者观点、大纲，有兴趣的同学可以自行阅读，加以判断。非常适合对全栈感兴趣，但对某一细分技术还不甚了解的同学。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>书影 | 管中窥豹，读《淘宝技术这十年》 上</title>
    <link href="http://meijing0114.com/2016/02/21/book009/"/>
    <id>http://meijing0114.com/2016/02/21/book009/</id>
    <published>2016-02-21T09:22:02.000Z</published>
    <updated>2016-08-07T09:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本书断断续续，竟然读过了一个新年的时间跨度。并非是要找借口，但自己的感觉：这种书其实读起来蛮累的，碎片化的时间加上作者东一耙，西一铲的叙述，还有以下两点：</p>
<ul>
<li>首先如果你把它当一本励志故事书来看的话，这本书可没那么轻松，间或夹杂着马云爸爸、淘宝初创人员的励志与猎奇的故事，但是还没等你那碗鸡汤入口，一个不小心，就是技术细节了。</li>
<li>而如果你把它当一本技术书来看的话，这本书更不轻松。淘宝技术的十年发展，从一个人的眼中望去，就像多汁但难以消化的顶级牛排，很多地方浅尝辄止，一口咬下去，得消化半天。观者一方面是开了眼界，觉得这些技术简直不是一般的牛，细节都不敢想。另一方面，想再深入了解一些的时候，却发现少了一些深度，留下了太多的开放式问题，让你觉得不知道简直不好意思。双重折磨之下，只好抓嘴挠腮，只恨自己在技术上的积累太少。</li>
</ul>
<p>所以说，如果你既想要看故事，又想要了解细节。<a href="http://book.douban.com/subject/2343878/" target="_blank" rel="external">《阿里巴巴神话》</a> 和<a href="http://book.douban.com/subject/25723064/" target="_blank" rel="external">《大型网站技术架构》</a> 是两道非常不错的佐料。想看故事的人，搭配第一本，这样高层和底层都看到了。想看技术的人，把《架构》这本书当做工具书，不懂翻一下，收益也是颇多。</p>
<p>淘宝网从买来的网站框架起步，到如今这样的一个复杂的架构。经历了好几轮的重构和优化。对于想了解其中波折的人来说，值得一看。但对技术同学来说，对其过往需要的是理顺，知其所以然，但更应该把重心放在现有的淘宝比较成熟的架构的研究上面来，考虑如何取其精华，为我所用。</p>
<p>纵观整个淘宝的发展历程，启示颇多：</p>
<h2 id="首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。"><a href="#首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。" class="headerlink" title="首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。"></a>首先技术上不要想着一口吃个胖子，最适应现有业务发展的技术才是好技术。</h2><p>淘宝网也不是一天建成的，架构在最初也无法做到最合理，技术应该以满足业务为第一要务，以适应业务发展为加分项，以盲目追求技术为大忌。</p>
<p>03年，刚开始做淘宝的时候，考虑的一个因素就是快。所以网站的第一版是买来的“php auction”。那些参与第一版的开发人员，每个人都是技术牛人，从实力上来说，都可以独立写出php auction，但不这么做的原因，是这样只会拖累业务发展的后腿。我个人感觉这是淘宝技术的第一阶段，叫做业务撵着技术走。技术可以说是疲于奔命，速度第一，埋下不少坑是肯定的，但是关键顶住了。<br>这个阶段同时也包括淘宝的硬件升级，从mysql到oracle，硬盘和小型机，各种商用，怎么贵怎么来。这个阶段，兵来将挡水来土掩，技术上算是顶住了。</p>
<p>但是随着业务的发展，单纯的累加已经不起作用了，必须从底层改造。这才触及了第一次到Java网站的升级。这次升级更多是语言层面的，复用了非常多优秀的java组件。技术在业务的压力下被迫忍痛切换，但是这却为之后的扩展打下了坚实的基础。这个阶段，技术不再那么滞后于业务，而是迎头赶上了。优秀的DBA，优秀的MVC架构，都是在这个阶段打下的，逻辑层可以说已经能够完全支持到业务了。</p>
<p>而现行的阶段，则是技术不断突破，创造自己的技术，并且在很多方面走到了业务的前面。这个阶段我们看到大量优秀的技术创新组件出现了。如淘宝文件系统TFS，淘宝KV缓存系统Tair。同时，分布式电子商务操作系统的理念也被提出。通过服务化的设计，辅以高性能中间件的支撑，开始给业务发展提供动力。</p>
<p>从这几个阶段可以看出，不断发展的业务和技术必须相辅相成，很难说是哪一方造就了哪一方。但是对我们来说，从中汲取的更应该是在技术选型和架构时的思考和审慎。好的架构不应拖业务后腿，而应不断提供向前的助力。</p>
<h2 id="其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。"><a href="#其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。" class="headerlink" title="其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。"></a>其次都说外来的和尚会念经，淘宝几次牛人的引入，新的思想完全起到了给业务助力的作用。</h2><p>比如开发和引入了LVS的章文蒿博士，他的贡献在于对高性能、高扩展性、高可用和低成本的基础平台的打造。尤其是他提出的GreenCompute项目，以节省能源为目的来不断的提升整个系统方方面面的性能，从CDN到低功耗到高性能，不得不说令人耳目一新。</p>
<p>而提出了开放平台的淘宝首席架构师王文彬，为淘宝的针对B侧市场的开发助力很多。他并发第一个提出，但却践行的非常好。一个开放平台，脏活累活很多。一方面需要对接大量的内部业务，说服、推动他们开放，有时候甚至要思考让他们如何开放。另一方面，则是开放到外部之后，稳定性和安全性比其他任何的业务都要更加保证。面对流水般的api调用，一旦稳定性不好，大量第三方应用都会挂掉。一旦安全性没保障，大量用户数据可能泄露。这都对开放的决心和技术提出了很高的挑战。进来风头比较劲的微信开放平台，也是如走钢丝一般，逐步开放自己的体系。可以说开放共赢创建生态是大势，而技术必须要为之保驾护航。</p>
<p>不得不提的还有顶住压力引入规范研发流程的空闻大师。从硅谷空降而来的他践行了持续集成、自动化测试和回归的研发流程。很多时候在业务的催促之下，会产生很多烂代码。但与其让不稳定的代码污染线上，造成往复的开发，还不如从一开始就杜绝。能够承担这种业务的压力，并做到这么果断的，确实值得佩服。看似业务的上线时间在短期因此而被延长了，但可靠性却大大提高了。这是个典型的，“长痛不如短痛”的例子。</p>
<p>这也说明了不断吸取新的思想多么重要，固守老的流程往往会拖业务的后腿。不敢尝试新的技术也会让技术停滞不前。</p>
<h2 id="从产品的创新性上来看，淘宝更多是顺应时势。"><a href="#从产品的创新性上来看，淘宝更多是顺应时势。" class="headerlink" title="从产品的创新性上来看，淘宝更多是顺应时势。"></a>从产品的创新性上来看，淘宝更多是顺应时势。</h2><p>2004年，成功的阿里巴巴，马云产生了做淘宝的想法。而在ebay和易趣激战正酣的时候通过技术人员封闭开发推出淘宝网，足以显示其快准狠的特性。尽管大网站被ebay封杀，但中小网站投放的广告策略、灵活的决策和与ebay的重重审批流程相比而言高效的执行效率，最终杀出了淘宝这么一匹黑马。从创新上而言，淘宝做了一些适应国内情况的优化，比如商家不收费，允许买卖双方沟通、交易，这些都是煽风点火，促使淘宝网不断发展壮大。</p>
<p>而在salesforce风头正劲的时候提出“work at Alibaba”的工作平台。并且一旦认准了之后，大力投入。现在淘宝的生态体系中，B侧开发的商家和企业非常之多，他们利用了淘宝提供的各种各样的数据，组合出用户需要的各式功能，充分丰富了整个生态，这也是淘宝让人感觉无可撼动的重要原因之一。</p>
<p>总体而言，淘宝发展亦步亦趋，始终不离大势，不犯大错，在牛掰技术的支撑下最终形成现在这样的一个庞大、复杂、但流转顺畅的生态系统。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书断断续续，竟然读过了一个新年的时间跨度。并非是要找借口，但自己的感觉：这种书其实读起来蛮累的，碎片化的时间加上作者东一耙，西一铲的叙述，还有以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先如果你把它当一本励志故事书来看的话，这本书可没那么轻松，间或夹杂着马云爸爸、淘宝初创人
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>译术 | SQL vs NoSQL：异同比较</title>
    <link href="http://meijing0114.com/2016/01/17/translate001/"/>
    <id>http://meijing0114.com/2016/01/17/translate001/</id>
    <published>2016-01-17T15:46:38.000Z</published>
    <updated>2016-01-17T15:28:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>译者按：SQL与NoSQL之争近年来十分受到关注，既存在“SQL吃遍天下”这种理念，也不乏“NoSQL一定代表着先进生产力”这种谬误。争者往往不求甚解，为弄潮而争，忽略了本质。这篇文章原文地址：<a href="http://www.sitepoint.com/sql-vs-nosql-differences/" target="_blank" rel="external">http://www.sitepoint.com/sql-vs-nosql-differences/</a> 作者对SQL与NoSQL在多个层面进行了细致的比较。值得一读。</p>
</blockquote>
<p>SQL（结构化查询语言）数据库成为主流的数据存储机制已经存在了80余年。在1990年代末，随着web应用和诸如MySQL、PostgreSQL和SQLite这类开源项目的兴起，SQL随之得到爆发式应用。</p>
<p>NoSQL数据库产生于1960年代，但是最近才出现了一些类似于MongoDB、CouchDB、Redis和Apache Cassandra这样的流行选择。</p>
<p>你可能会看到很多探讨如何使用SQL或NoSQL的某个特性的文章。对如何从中二选一的讨论却并不多见。我希望能填补这个空白。这篇文章中，我们会覆盖到最基本的差异。而接下来会有一篇文章针对典型的场景讨论数据存储的最优选择。</p>
<p>大多数例子适用于流行的MySQL SQL数据库和MongoDB NoSQL数据库。其他的SQL/NoSQL数据库是类似的，但是在特性和语法上可能略有不同。</p>
<h2 id="SQL与NoSQL的神圣战争"><a href="#SQL与NoSQL的神圣战争" class="headerlink" title="SQL与NoSQL的神圣战争"></a>SQL与NoSQL的神圣战争</h2><p>在进一步讨论之前，让我们先来修正一些普遍的谬误：</p>
<h3 id="谬误：-NoSQL比SQL更好-差"><a href="#谬误：-NoSQL比SQL更好-差" class="headerlink" title="谬误： NoSQL比SQL更好/差"></a>谬误： NoSQL比SQL更好/差</h3><p>有些项目更适合使用SQL数据库。有些则更适合NoSQL。 还有些则能配合使用。这篇文章不是想在两者之间决出一个胜者，因为你不可能在所有的场景下都应用同样的假设。</p>
<h3 id="谬误：-NoSQL和MySQL之间有着清晰的鸿沟"><a href="#谬误：-NoSQL和MySQL之间有着清晰的鸿沟" class="headerlink" title="谬误： NoSQL和MySQL之间有着清晰的鸿沟"></a>谬误： NoSQL和MySQL之间有着清晰的鸿沟</h3><p>这不一定是对的。有些SQL数据库正在加入NoSQL的特性，反之亦然。这两者的界限很可能会越来越模糊。而新的混合数据库能在未来提供有趣的选择。</p>
<h3 id="谬误：编程语言-框架-决定了数据库"><a href="#谬误：编程语言-框架-决定了数据库" class="headerlink" title="谬误：编程语言/框架 决定了数据库"></a>谬误：编程语言/框架 决定了数据库</h3><p>我们越来越习惯各种各样的技术栈：</p>
<ul>
<li>LAMP: linux, Apache, MySQL(SQL), PHP</li>
<li>MEAN: MongoDB(NoSQL), Express, Angular, Node.js</li>
<li>.NET, IIS和SQL Server</li>
<li>Java, Apache和Oracle</li>
</ul>
<p>这些技术栈产生可以归于应用的，历史上的和商业上的原因，但别被限死了。 你当然可以在你的PHP或.NET项目使用MongoDB的NoSQL数据库。你也可以在Node.js里面连接MySQL或SQL SERVER。可能你没法找到那么多教程和资源，但是你的需求本身应该决定数据库的类型，而不是编程语言。<br>（这意味着，别给自己故意挖坑！原则一个不常见的技术组合或SQL和NoSQL的混合式可能的，但是在寻求帮助和找到有经验的开发者方面会遇到不少困难<br>）<br>记住了这些，让我们来看看异同的比较。</p>
<h2 id="SQL的表-vs-NoSQL的文档"><a href="#SQL的表-vs-NoSQL的文档" class="headerlink" title="SQL的表 vs NoSQL的文档"></a>SQL的表 vs NoSQL的文档</h2><p>SQL数据库提供了一族相关的数据表。举例来说，如果你在运营一个线上的书店，书的信息可以被加入到一个叫<strong>book</strong>的表。</p>
<table>
<thead>
<tr>
<th>ISBN</th>
<th style="text-align:center">title</th>
<th style="text-align:right">author</th>
<th style="text-align:right">format</th>
<th style="text-align:right">price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9780992461225</td>
<td style="text-align:center">JavaScript: Novice to Ninja</td>
<td style="text-align:right">Darren Jones</td>
<td style="text-align:right">ebook</td>
<td style="text-align:right">29.00</td>
</tr>
<tr>
<td>9780994182654</td>
<td style="text-align:center">Jump Start Git</td>
<td style="text-align:right">Shaumik Daityari</td>
<td style="text-align:right">ebook</td>
<td style="text-align:right">29.00</td>
</tr>
</tbody>
</table>
<p>每一行都是一条不同的书德尔记录。这种设计是比较苛刻的，你没法使用同样的表去存储不同的信息或者在是数字类型的字段插入字符串。</p>
<p>NoSQL数据库存储类JSON的键值对文档：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00</div><div class="line">                    &#125;</div></pre></td></tr></table></figure>
<pre><code>相似的文档可以被存储进一个**集合**，这跟SQL表十分类似。但是，在文档里面你可以存储任何形式的数据，NoSQL数据库并不会抱怨：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                year: 2014, </div><div class="line">                    format: &quot;ebook&quot;, </div><div class="line">                        price: 29.00, </div><div class="line">                            description: &quot;Learn JavaScript from scratch!&quot;, </div><div class="line">                                rating: &quot;5/5&quot;, </div><div class="line">                                    review: [ </div><div class="line">                                            &#123; name: &quot;A Reader&quot;, text: &quot;The best JavaScript book I&apos;ve ever read.&quot; &#125;, </div><div class="line">                                                    &#123; name: &quot;JS Expert&quot;, text: &quot;Recommended to novice and expert developers alike.&quot; &#125; </div><div class="line">                                                        ]</div><div class="line">                                                        &#125;</div></pre></td></tr></table></figure>

                                                        SQL表创建的是严格的数据模板，所以你很难犯错。而NoSQL更加灵活，但是能够在任何地方存储数据可能会导致持续的问题。

                                                        ## SQL架构 vs NoSQL去架构
                                                        在一个SQL数据库中，在你确定表和字段类型这些架构之前是无法添加数据的。SQL架构还可能包括其他的信息：
                                                        * primary keys: 主键，就像ISBN一样标示了唯一的一条记录
                                                        * indexs: 索引，经常被查询的字段会被加上索引来提高检索速度
                                                        * relationships: 关系，数据字段之间的逻辑联系
                                                        * 诸如存储过程和触发器这样的机制

                                                        你的数据架构一定要在实现任何操作数据的应用逻辑之前被设计和实现出来。尽管之后再修改是可行的，但是大量的变更会非常复杂。

                                                        在NoSQL数据库中，数据可以被非常灵活的添加。并不需要事先进行字段设计和表的设计。比如说，在MongoDB中，下面的命令会在**book**表中创建一条新的记录，如果**book**表不存在，那它也会被同时创建：
                                                        <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.book.insert(</div><div class="line">    ISBN: 9780994182654, </div><div class="line">        title: &quot;Jump Start Git&quot;, </div><div class="line">            author: &quot;Shaumik Daityari&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00</div><div class="line">                    );</div></pre></td></tr></table></figure>

                                                                            (MongoDB会自动在表中添加一条唯一的_id字段，随后你也可以对索引进行定义。)

                                                                            一个NoSQL数据库可能更适合初始数据形式很难确定的项目中。但这并不意味着，你可以因此而偷懒：在项目开始的时候忽视设计正确的数据表，可能会在之后引入问题。

                                                                            ## SQL 中心化 vs NoSQL去中心化
                                                                            假定我们需要往book数据库中添加出版社信息。在SQL数据库中，一个出版社会包含多个标题，我们创建了一张新的**publisher**表：

                                                                            | id | name | country | email | 
                                                                            | ------------- |:-------------:| -----:| -----:| 
                                                                            | SP001 | SitePoint | Australia | feedback@sitepoint.com | 

                                                                            我们可以在**book**表里面添加一个**publisher_id**字段，来作为**publisher.id**的外键。

                                                                            | ISBN | title | author | format | price | publisher_id|
                                                                            | ------------- |:-------------:| -----:| -----:| -----:| ----:|
                                                                            | 9780992461225 | JavaScript: Novice to Ninja | Darren Jones | ebook | 29.00| SP001|
                                                                            | 9780994182654 | Jump Start Git | Shaumik Daityari | ebook | 29.00| SP001|

                                                                            这使得数据冗余被最小化，我们不必为每本书重复出版社的信息--只需要创建外键就行了。这种技术被称为中心化，而且也确实很有益处。我们可以在不用修改**book**的数据的前提下更新出版社信息。

                                                                            在NoSQL中我们也可以使用中心化的技术。看一下在**book**集合中得一条文档：
                                                                            <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00, </div><div class="line">                        publisher_id: &quot;SP001&quot;</div><div class="line">                        &#125;</div></pre></td></tr></table></figure>

                                                                                                    -- 引用了一条在**publisher**集合中得一条文档：
                                                                                                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    id: &quot;SP001&quot; </div><div class="line">        name: &quot;SitePoint&quot;, </div><div class="line">            country: &quot;Australia&quot;, </div><div class="line">                email: &quot;feedback@sitepoint.com&quot;</div><div class="line">                &#125;</div></pre></td></tr></table></figure>

                                                                                                                    然而这有的时候却并不实际。更希望的是能够把数据去中心化，对每一个**book**重复冗余的**publisher**.

                                                                                                                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    ISBN: 9780992461225, </div><div class="line">        title: &quot;JavaScript: Novice to Ninja&quot;, </div><div class="line">            author: &quot;Darren Jones&quot;, </div><div class="line">                format: &quot;ebook&quot;, </div><div class="line">                    price: 29.00, </div><div class="line">                        publisher: </div><div class="line">                            &#123; </div><div class="line">                                    name: &quot;SitePoint&quot;, </div><div class="line">                                            country: &quot;Australia&quot;, </div><div class="line">                                                    email: &quot;feedback@sitepoint.com&quot; </div><div class="line">                                                        &#125;</div><div class="line">                                                        &#125;</div></pre></td></tr></table></figure>

                                                                                                                                                                            这会使我们查询的更快，但是再多条记录中更新publisher信息，会非常的慢。

                                                                                                                                                                            ## SQL关系型的JOIN vs NoSQL
                                                                                                                                                                            SQL查询提供了强劲的JOIN语法。我们可以使用一条SQL语句在多个数据表中获取关系数据库。举例来说:
                                                                                                                                                                            <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT book.title, book.author, publisher.nameFROM bookLEFT JOIN book.publisher_id ON publisher.id;</div></pre></td></tr></table></figure>

                                                                                                                                                                            这个语句会返回所有的书的标题，作者以及相关的出版人姓名。（假设出版人姓名存在）
                                                                                                                                                                            NoSQL没有相对应的JOIN，这可能对那些熟练使用SQL的人非常不习惯。如果我们使用中心化的NoSQL集合，那我们需要拉取所有的book文档，再获取所有的publisher文档，再手动的通过程序逻辑来把两者联系起来。这也是为什么对NoSQL往往使用去中心化的方式很有必要。


                                                                                                                                                                            ## SQL vs NoSQL 数据完整性
                                                                                                                                                                            大部分的SQL数据库允许你通过外键限制的方式来强制的保证数据完整性。（除非你还在使用MySQL中得陈旧 不再被维护的MyISAM引擎）我们的book数据表能够：
                                                                                                                                                                            * 保证所有的book数据能够有一个合法的对应在pubilisher表中得publisher_id
                                                                                                                                                                            * 如果有book数据引用了publisher信息，那么这条数据不能被删除
                                                                                                                                                                            这种模式强制了数据库应该遵循的规范。对于开发者或者用户而言，无法在可能引入孤儿数据或非法数据的情况下，对数据条目进行编辑或删除。但是在NoSQL中却没有类似的数据完整性保证。你可以不管其他的文档，只存储你想要存储的内容。理想的情况下，一个数据条目应该成为关于一个事物的唯一信息来源。

                                                                                                                                                                            ## SQL vs NoSQL 事务
                                                                                                                                                                            在SQL数据库中，两条或多条更新语句能够在一个事务（保证成功或失败回滚的机制）中被同时执行。举例来说，假设book数据库包含订单和库存两张表。当一本书被订购的时候，我们需要往订单表添加一条数据，然后在库存表中将库存字段减一。如果我们把这两条更新语句独立执行，一条可能失败，另一条可能成功。因此会造成数据的不同步。而把他们通过事务的方式执行，就能保证一起成功或一起失败。
                                                                                                                                                                            在NoSQL数据库中，对单个文档的修改是原子的。也就是说，如果你在文档中更新三个字段，那么要么三个字段同时更新，要么都不变。但是对于多条文档的更新而言却没有事务。不过有一个类事务的选项（http://docs.mongodb.org/manual/core/write-operations-atomicity/）。不过在写这篇文章的时候，这些还都需要你在代码里自行处理。

                                                                                                                                                                            ## SQL vs NoSQL CRUD 语法
                                                                                                                                                                            创建、读取、更新和删除数据是所有数据库系统的基础。本质上来说：
                                                                                                                                                                            * SQL是轻量级的解释性语言。语法强大，并且已经成为了国际标准。尽管大多数系统实现语法的时候略有不同。
                                                                                                                                                                            * NoSQL数据库使用带json参数的类javascript语言一样的查询。基本的操作比较简单，但是对于更复杂的查询来说，嵌套的JSON会非常的繁复。
                                                                                                                                                                            一个快速的对比：

                                                                                                                                                                            | SQL | NoSQL  | 
                                                                                                                                                                            | ------------- |:-------------:| 
                                                                                                                                                                            | SP001 | SitePoint | 
                                                                                                                                                                            |插入一条book记录|
                                                                                                                                                                            |```INSERT INTO book ( `ISBN`, `title`, `author`)VALUES ( &apos;9780992461256&apos;, &apos;Full Stack JavaScript&apos;, &apos;Colin Ihrig &amp; Adam Bretz&apos;);```|```db.book.insert({ ISBN: &quot;9780992461256&quot;, title: &quot;Full Stack JavaScript&quot;, author: &quot;Colin Ihrig &amp; Adam Bretz&quot;});```|
                                                                                                                                                                            |更新一条book记录|
                                                                                                                                                                            |```UPDATE bookSET price = 19.99WHERE ISBN = &apos;9780992461256&apos;```|```db.book.update( { ISBN: &apos;9780992461256&apos; }, { $set: { price: 19.99 } });```|
                                                                                                                                                                            |返回所有$10以上的书的标题|
                                                                                                                                                                            |```SELECT title FROM bookWHERE price &gt; 10;```|```db.book.find( { price: { &amp;gt;: 10 } }, { _id: 0, title: 1 });```第二个JSON对象就是所谓的**projection**: 它设置了哪些字段要被返回 (_id字段是被默认返回的，所以需要覆盖它).|
                                                                                                                                                                            |计算所有SitePoint网站的书的数量|
                                                                                                                                                                            |```SELECT COUNT(1) FROM bookWHERE publisher_id = &apos;SP001&apos;;```|```db.book.count({ &quot;publisher.name&quot;: &quot;SitePoint&quot;});```这条语句假定使用了NoSQL的去中心化设计|
                                                                                                                                                                            |返回book的格式类型的数量|
                                                                                                                                                                            |```SELECT format, COUNT(1) AS `total`FROM bookGROUP BY format;```|```db.book.aggregate([ { $group: { _id: &quot;$format&quot;, total: { $sum: 1 } } }]);```这就是所谓的聚合：一个新的文档集合从原始的文档集合计算出来。|
                                                                                                                                                                            |删除所有的SitePoint书|
                                                                                                                                                                            |```DELETE FROM bookWHERE publisher_id = &apos;SP001&apos;;```|```db.book.remove({ &quot;publisher.name&quot;: &quot;SitePoint&quot;});```|

                                                                                                                                                                            ## SQL vs NoSQL 性能表现
                                                                                                                                                                            或许这是最有争议性的比较。NoSQL通常被认为势必SQL更快的。这并不奇怪。NoSQL更简单的去中心化存储允许你在单词请求中获取一个条目的所有信息。因此并不需要相关的JOIN或复杂的SQL查询。
                                                                                                                                                                            也就是说，你的项目设计和数据库设计的影响很大。一个被设计的很好的SQL数据库肯定比设计的很差的NoSQL数据库性能好很多，当然反之亦然。

                                                                                                                                                                            ## SQL vs NoSQL 扩容
                                                                                                                                                                            随着你数据的增加，你可能会觉得有必要把负载分布到多台服务器。对于基于SQL的系统来说，这有时候没那么容易。你如何分配相关的数据呢？集群化可能是最简单的选项；多个服务器访问相同的中心化存储 -- 但是即使这样也会有挑战。
                                                                                                                                                                            NoSQL简单地数据模型会使得扩容简单一些，很多NoSQL数据库一开始就自建了扩容的功能。不过当你遇到实际问题的时候，还是最好寻求专家的建议。

                                                                                                                                                                            ## SQL vs NoSQL 实用性
                                                                                                                                                                            最终，来考虑下安全和系统的问题。最流行的NoSQL数据库已经有几年了。不过它们相比于成熟的SQL产品，问题还是较多。不过大多数被报告的问题，还是因为一个原因：*知识不足*.
                                                                                                                                                                            开发者和系统管理者对新的数据库系统经验不足，因此不免会犯错误。如果因为NoSQL比较新鲜或者因为你想避免最终必会发生的范式设计而使用它，那么之后你很可能会遇到问题。

                                                                                                                                                                            ## SQL vs NoSQL 总结
                                                                                                                                                                            SQL和NoSQL数据库用不同的方式做着同样的事情。在刚开始选择一种，之后在进行切换时完全可行的，但是预先设计肯定会节省时间和金钱。
                                                                                                                                                                            **适用于SQL的项目：**
                                                                                                                                                                            * 可以被预先确定的逻辑相关的离散数据
                                                                                                                                                                            * 数据完整性是必须的
                                                                                                                                                                            * 需要具有丰富开发者经验和支持的标准技术的项目

                                                                                                                                                                            **适用于NoSQL的项目:**
                                                                                                                                                                            * 非关系型的、模糊的或是不断演进的数据存储需求
                                                                                                                                                                            * 简单、宽松的项目目标，能够快速的开始编程
                                                                                                                                                                            * 速度和可扩展性很有必要

                                                                                                                                                                            在
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译者按：SQL与NoSQL之争近年来十分受到关注，既存在“SQL吃遍天下”这种理念，也不乏“NoSQL一定代表着先进生产力”这种谬误。争者往往不求甚解，为弄潮而争，忽略了本质。这篇文章原文地址：&lt;a href=&quot;http://www.sitepoi
    
    </summary>
    
      <category term="译术" scheme="http://meijing0114.com/categories/%E8%AF%91%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>读《大型网站架构》</title>
    <link href="http://meijing0114.com/2015/11/23/book008/"/>
    <id>http://meijing0114.com/2015/11/23/book008/</id>
    <published>2015-11-23T03:14:09.000Z</published>
    <updated>2016-08-11T01:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>大型网站技术架构这本书，囤积已久，最近终于有时间，从头到尾浏览了一遍。看这本书的原因，颇有一些功利性，说白了，就是冲着书名去的。大型网站架构一直心向往之，读完之后，收获也是颇多，值得向大家推荐。</p>
<p>曾经看到一本冯唐的零散文集，其中有篇文章印象颇深。他在文章的开头，提出了一个问题：如何写好一首诗。大唐盛世300年，诗人不计其数，但最终留下唐诗300首。这么个简单地问题，可以说上的上是让古往今来的诗人们前赴后继了。答案也很简单，先学，学到什么程度呢？从模仿开始，读遍前人之作，看遍前人所感，触类旁通，一步一个脚印。就好比攀爬终南山，不沿着前人的脚印，怎么爬到山顶一览众山小呢？</p>
<p>本书作者也表达了类似的观点，我想这点在技术上也是想通的。不多看看NB的技术是什么样子的？怎么会有能力做出与之媲美甚至是超越之的完美技术解决方案呢？</p>
<p>本书在思想上，除了这点启发之外，对架构的重视也值得一提。技术上得架构，类比于建筑业可以说是图纸设计，类比于广告业可以说是方案策划。但是不同之处在于，技术架构影响深远，而且由于应对的挑战随行业发展快速变化，因此必须足够灵活多变。这对架构提出了很高的要求，也正是本书吸引我的一点。</p>
<p>但是尽管书名看起来像是程序员专享，但作者仍然点出了，给用户提供有价值的产品和优秀的体验才是关键，这点每个互联网从业者应该都会赞同，至少都在内心有所追求。</p>
<p>技术上而言，这本书给我提供了一套体系。两年前开始接触web开发，零零散散做了不少的事情，也逐步建立了一些自己的体系，但与本书参照了之后，收获仍是颇丰。无本之木不牢，因此技术体系很重要。从MVC的模型，到Restful API，再到web优化的准则。这些体系化的说明，使得我的技术层次更加清晰，也更加脱离闷头乱撞的状态了。不过说到优化，根据自己的经验来看，对于一个编程基础不算太差，人也不笨的程序员来说，优化往往不是什么大问题。主要的问题在于找到优化点。计算机是一门科学，因此任何优化都应该是有理有据的，通过高效的工具和经验找到瓶颈再优化，比奢求瞎猫撞上死耗子，还是要靠谱一些的。而随着技术了解的深入，我们总是希望自己承担一些模块的设计，这也被很多公司认为是区分初级工程师和熟练工程师的分水岭。这件事要我说，跟打德州扑克很相似：你必须对自己的底牌足够了解，才能打得出一手好牌。要设计后端存储，你就必须知道mysql的特性、优化点、系统可能的瓶颈、存储量、redis的应用场景、维护手段。如果这些你都不了解，那做什么设计呢？可以想象的场景就是，面向用户的产品成了你的练兵场，存储不知不觉挂了，你才知道mysql到底该怎么用。除此之外，程序员应该是很懒的一批人，个人认为，技术成长，应该越“懒”越好。为啥上线要手动上传文件到服务器？这个时代还应该存在人肉测试么？新人来了还是要花一天安装和熟悉环境？机器磁盘都要爆了，还要凌晨四点手动清理？每个人的时间有限，作为程序员，真的要让自动化再多一点。与此同时，很多人把产品的发布作为一个里程碑，但却对产品的安全问题视而不见。安全的代码依赖于对漏洞的清晰认知、良好的编程习惯、流程保证与漏洞监测机制。当不安全的代码上线的时候，你就是为自己埋了一个很大很大的坑。。</p>
<p>除却这些技术上的启发和细节，本书在安利个人技术的成长上面，不吝笔墨。第一点应该是在最开始说的：阅尽好的东西，你才能写出接近甚至超越的代码。苹果的联合创始人沃兹在自传中讲述了自己成为电脑专家的过程：对电脑的狂热让他把市面上所有的机型都拆了又装，装了又拆，从熟悉到自己重新设计，他从copy，上升到了design。而第二点，则是不要沉迷于代码，甚至不要沉迷于架构。很多人国人沉迷于某项技术，因此会在不恰当的时候做出背离实际情况的坚持。熟悉web前端优化的同学都知道，CDN是个好东西，那些前端文件、静态资源，大可以通过CDN的方式来解决。但这并不意味着CDN是标准程序。结合成本、实际问题，应该量体裁衣。有时候基本的静态资源服务器，就可以实现网站的需求，并不一定要“奢侈”的接入CDN。就连维基百科，都是多种方式相互结合，而并非完全依靠CDN这个“圣杯”。最后一点，则是说架构师，这个职业方向，承担的责任很多，做的事情也需要更多的思考。有人说架构师最需要代码能力，有人说架构师最需要设计能力，有人说最需要带领团队。但是我最认同一位技术公司首席架构师的说法：架构师说到底，需要具有非常强的problem-solving的能力。这突破了技术的限制，让你能够调动自己所有的脑细胞和能力，来解决你团队遇到的技术、产品、等等问题。</p>
<p>作为一名程序员，遇到这本书十分的开心，接触到很多很赞的技术细节，也见识了作者架构的功力。这也让我更加期待接下来要看的《企业应用架构模式》了。不过在那之前，真诚推荐这本《大型网站技术架构》。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大型网站技术架构这本书，囤积已久，最近终于有时间，从头到尾浏览了一遍。看这本书的原因，颇有一些功利性，说白了，就是冲着书名去的。大型网站架构一直心向往之，读完之后，收获也是颇多，值得向大家推荐。&lt;/p&gt;
&lt;p&gt;曾经看到一本冯唐的零散文集，其中有篇文章印象颇深。他在文章的开头
    
    </summary>
    
      <category term="书评影评" scheme="http://meijing0114.com/categories/%E4%B9%A6%E8%AF%84%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
</feed>
